
Trilateration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010988  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  08010b18  08010b18  00011b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801121c  0801121c  0001324c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801121c  0801121c  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011224  08011224  0001324c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011224  08011224  00012224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011228  08011228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0801122c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003370  2000024c  08011478  0001324c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035bc  08011478  000135bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001324c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d748  00000000  00000000  0001327c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064a9  00000000  00000000  000409c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  00046e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001dd9  00000000  00000000  000494d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304c8  00000000  00000000  0004b2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f52c  00000000  00000000  0007b779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b095  00000000  00000000  000aaca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b5d3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b97c  00000000  00000000  001b5d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001c16fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b00 	.word	0x08010b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	08010b00 	.word	0x08010b00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af04      	add	r7, sp, #16
  const char *name = "BlueNRG";
 8001026:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MX_BlueNRG_MS_Init+0x128>)
 8001028:	613b      	str	r3, [r7, #16]
  uint8_t bdaddr_len_out;
  uint8_t hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 800102a:	f000 f8ab 	bl	8001184 <User_Init>

  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800102e:	2000      	movs	r0, #0
 8001030:	f002 f8b2 	bl	8003198 <BSP_PB_GetState>
 8001034:	4603      	mov	r3, r0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b44      	ldr	r3, [pc, #272]	@ (800114c <MX_BlueNRG_MS_Init+0x12c>)
 800103a:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 800103c:	2100      	movs	r1, #0
 800103e:	4844      	ldr	r0, [pc, #272]	@ (8001150 <MX_BlueNRG_MS_Init+0x130>)
 8001040:	f006 ffc6 	bl	8007fd0 <hci_init>

  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001044:	1dba      	adds	r2, r7, #6
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f006 fe75 	bl	8007d3c <getBlueNRGVersion>

  hci_reset();
 8001052:	f006 feb5 	bl	8007dc0 <hci_reset>
  HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	f002 fb4e 	bl	80036f8 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) {
 800105c:	7a3b      	ldrb	r3, [r7, #8]
 800105e:	2b30      	cmp	r3, #48	@ 0x30
 8001060:	d902      	bls.n	8001068 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8001062:	4b3c      	ldr	r3, [pc, #240]	@ (8001154 <MX_BlueNRG_MS_Init+0x134>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8001068:	f107 0209 	add.w	r2, r7, #9
 800106c:	4b3a      	ldr	r3, [pc, #232]	@ (8001158 <MX_BlueNRG_MS_Init+0x138>)
 800106e:	2106      	movs	r1, #6
 8001070:	2080      	movs	r0, #128	@ 0x80
 8001072:	f006 fddd 	bl	8007c30 <aci_hal_read_config_data>
 8001076:	4603      	mov	r3, r0
 8001078:	617b      	str	r3, [r7, #20]
  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 800107a:	4b37      	ldr	r3, [pc, #220]	@ (8001158 <MX_BlueNRG_MS_Init+0x138>)
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001082:	2bc0      	cmp	r3, #192	@ 0xc0
 8001084:	d001      	beq.n	800108a <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <MX_BlueNRG_MS_Init+0x66>
  }

  // GATT Init (still required)
  ret = aci_gatt_init();
 800108a:	f006 fcf1 	bl	8007a70 <aci_gatt_init>
 800108e:	4603      	mov	r3, r0
 8001090:	617b      	str	r3, [r7, #20]
  if (ret){
    PRINTF("GATT_Init failed.\n");
  }

  // ➤ GAP Init as CENTRAL
  if (bnrg_expansion_board == IDB05A1) {
 8001092:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <MX_BlueNRG_MS_Init+0x134>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d110      	bne.n	80010bc <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800109a:	f107 020e 	add.w	r2, r7, #14
 800109e:	f107 030a 	add.w	r3, r7, #10
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	4613      	mov	r3, r2
 80010ac:	2207      	movs	r2, #7
 80010ae:	2100      	movs	r1, #0
 80010b0:	2004      	movs	r0, #4
 80010b2:	f006 fbae 	bl	8007812 <aci_gap_init_IDB05A1>
 80010b6:	4603      	mov	r3, r0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e00a      	b.n	80010d2 <MX_BlueNRG_MS_Init+0xb2>
  } else {
    ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010bc:	f107 030a 	add.w	r3, r7, #10
 80010c0:	f107 020c 	add.w	r2, r7, #12
 80010c4:	f107 010e 	add.w	r1, r7, #14
 80010c8:	2003      	movs	r0, #3
 80010ca:	f006 fbf2 	bl	80078b2 <aci_gap_init_IDB04A1>
 80010ce:	4603      	mov	r3, r0
 80010d0:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_BlueNRG_MS_Init+0xbc>
    PRINTF("GAP_Init failed.\n");
    while(1);
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <MX_BlueNRG_MS_Init+0xb8>
  }

  // Device name update (optional for central)
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010dc:	89fc      	ldrh	r4, [r7, #14]
 80010de:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80010e0:	6938      	ldr	r0, [r7, #16]
 80010e2:	f7ff f8c5 	bl	8000270 <strlen>
 80010e6:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	2200      	movs	r2, #0
 80010f2:	4629      	mov	r1, r5
 80010f4:	4620      	mov	r0, r4
 80010f6:	f006 fcde 	bl	8007ab6 <aci_gatt_update_char_value>
 80010fa:	4603      	mov	r3, r0
 80010fc:	617b      	str	r3, [r7, #20]
  if (ret) {
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_BlueNRG_MS_Init+0xe8>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MX_BlueNRG_MS_Init+0xe4>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001108:	2301      	movs	r3, #1
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_BlueNRG_MS_Init+0x13c>)
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2300      	movs	r3, #0
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	2310      	movs	r3, #16
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2307      	movs	r3, #7
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2001      	movs	r0, #1
 8001120:	f006 fc11 	bl	8007946 <aci_gap_set_auth_requirement>
 8001124:	4603      	mov	r3, r0
 8001126:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_BlueNRG_MS_Init+0x112>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <MX_BlueNRG_MS_Init+0x10e>
  }

  // Set output power level
  ret = aci_hal_set_tx_power_level(1, 4);
 8001132:	2104      	movs	r1, #4
 8001134:	2001      	movs	r0, #1
 8001136:	f006 fdd0 	bl	8007cda <aci_hal_set_tx_power_level>
 800113a:	4603      	mov	r3, r0
 800113c:	617b      	str	r3, [r7, #20]

  PRINTF("BLE Stack Initialized as CENTRAL\n");
  // aci_gap_start_general_discovery_proc(0x4000,0x4000,PUBLIC_ADDR,0x00);
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bdb0      	pop	{r4, r5, r7, pc}
 8001146:	bf00      	nop
 8001148:	08010b18 	.word	0x08010b18
 800114c:	20000000 	.word	0x20000000
 8001150:	080014f1 	.word	0x080014f1
 8001154:	20000268 	.word	0x20000268
 8001158:	2000026c 	.word	0x2000026c
 800115c:	0001e240 	.word	0x0001e240

08001160 <startScan>:

void startScan(void){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	printf("Start scanning\r\n");
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <startScan+0x20>)
 8001166:	f00b fcbb 	bl	800cae0 <puts>
	aci_gap_start_general_discovery_proc(0x4000,0x4000,PUBLIC_ADDR,0x00);
 800116a:	2300      	movs	r3, #0
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001172:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001176:	f006 fc3d 	bl	80079f4 <aci_gap_start_general_discovery_proc>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	08010b20 	.word	0x08010b20

08001184 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001188:	2101      	movs	r1, #1
 800118a:	2000      	movs	r0, #0
 800118c:	f001 ffb0 	bl	80030f0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8001190:	2000      	movs	r0, #0
 8001192:	f001 ff5b 	bl	800304c <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8001196:	2000      	movs	r0, #0
 8001198:	f002 f85c 	bl	8003254 <BSP_COM_Init>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <BSP_PB_Callback+0x1c>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000272 	.word	0x20000272

080011c0 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80011cc:	f002 fa88 	bl	80036e0 <HAL_GetTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	743b      	strb	r3, [r7, #16]
 80011d8:	f002 fa82 	bl	80036e0 <HAL_GetTick>
 80011dc:	4603      	mov	r3, r0
 80011de:	0adb      	lsrs	r3, r3, #11
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	425b      	negs	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	74bb      	strb	r3, [r7, #18]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	425b      	negs	r3, r3
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	753b      	strb	r3, [r7, #20]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	121b      	asrs	r3, r3, #8
 800120a:	b2db      	uxtb	r3, r3
 800120c:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	425b      	negs	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	75bb      	strb	r3, [r7, #22]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	425b      	negs	r3, r3
 8001220:	121b      	asrs	r3, r3, #8
 8001222:	b2db      	uxtb	r3, r3
 8001224:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	763b      	strb	r3, [r7, #24]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	121b      	asrs	r3, r3, #8
 8001234:	b2db      	uxtb	r3, r3
 8001236:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	76bb      	strb	r3, [r7, #26]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	121b      	asrs	r3, r3, #8
 8001246:	b2db      	uxtb	r3, r3
 8001248:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	773b      	strb	r3, [r7, #28]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	121b      	asrs	r3, r3, #8
 8001258:	b2db      	uxtb	r3, r3
 800125a:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	77bb      	strb	r3, [r7, #30]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	121b      	asrs	r3, r3, #8
 800126a:	b2db      	uxtb	r3, r3
 800126c:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f887 3020 	strb.w	r3, [r7, #32]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	121b      	asrs	r3, r3, #8
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	121b      	asrs	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <Acc_Update+0x10c>)
 800129c:	8818      	ldrh	r0, [r3, #0]
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <Acc_Update+0x110>)
 80012a0:	8819      	ldrh	r1, [r3, #0]
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2314      	movs	r3, #20
 80012aa:	2200      	movs	r2, #0
 80012ac:	f006 fc03 	bl	8007ab6 <aci_gatt_update_char_value>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80012b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80012be:	2347      	movs	r3, #71	@ 0x47
 80012c0:	e000      	b.n	80012c4 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000274 	.word	0x20000274
 80012d0:	20000278 	.word	0x20000278

080012d4 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80012d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d8:	b08e      	sub	sp, #56	@ 0x38
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80012e0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80012e2:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <Read_Request_CB+0x16c>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d105      	bne.n	80012f8 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80012ec:	4a55      	ldr	r2, [pc, #340]	@ (8001444 <Read_Request_CB+0x170>)
 80012ee:	4956      	ldr	r1, [pc, #344]	@ (8001448 <Read_Request_CB+0x174>)
 80012f0:	4856      	ldr	r0, [pc, #344]	@ (800144c <Read_Request_CB+0x178>)
 80012f2:	f7ff ff65 	bl	80011c0 <Acc_Update>
 80012f6:	e091      	b.n	800141c <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80012f8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80012fa:	4b55      	ldr	r3, [pc, #340]	@ (8001450 <Read_Request_CB+0x17c>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 808b 	bne.w	800141c <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001306:	f00a fc1f 	bl	800bb48 <rand>
 800130a:	4603      	mov	r3, r0
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	61fa      	str	r2, [r7, #28]
 8001312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001316:	f04f 0000 	mov.w	r0, #0
 800131a:	f04f 0100 	mov.w	r1, #0
 800131e:	0099      	lsls	r1, r3, #2
 8001320:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001324:	0090      	lsls	r0, r2, #2
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	1851      	adds	r1, r2, r1
 800132e:	6139      	str	r1, [r7, #16]
 8001330:	69f9      	ldr	r1, [r7, #28]
 8001332:	eb43 0101 	adc.w	r1, r3, r1
 8001336:	6179      	str	r1, [r7, #20]
 8001338:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001344:	f7ff fca0 	bl	8000c88 <__aeabi_uldivmod>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff f91c 	bl	800058c <__aeabi_ul2d>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b3e      	ldr	r3, [pc, #248]	@ (8001454 <Read_Request_CB+0x180>)
 800135a:	f7fe ff97 	bl	800028c <__adddf3>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fc3f 	bl	8000be8 <__aeabi_d2f>
 800136a:	4603      	mov	r3, r0
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 800136e:	f00a fbeb 	bl	800bb48 <rand>
 8001372:	4603      	mov	r3, r0
 8001374:	17da      	asrs	r2, r3, #31
 8001376:	4698      	mov	r8, r3
 8001378:	4691      	mov	r9, r2
 800137a:	4642      	mov	r2, r8
 800137c:	464b      	mov	r3, r9
 800137e:	1891      	adds	r1, r2, r2
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	415b      	adcs	r3, r3
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800138a:	eb12 0408 	adds.w	r4, r2, r8
 800138e:	eb43 0509 	adc.w	r5, r3, r9
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	016b      	lsls	r3, r5, #5
 800139c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80013a0:	0162      	lsls	r2, r4, #5
 80013a2:	eb14 0a02 	adds.w	sl, r4, r2
 80013a6:	eb45 0b03 	adc.w	fp, r5, r3
 80013aa:	eb1a 0308 	adds.w	r3, sl, r8
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	eb4b 0309 	adc.w	r3, fp, r9
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013c2:	f7ff fc61 	bl	8000c88 <__aeabi_uldivmod>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff f8dd 	bl	800058c <__aeabi_ul2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <Read_Request_CB+0x184>)
 80013d8:	f7fe ff58 	bl	800028c <__adddf3>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fc00 	bl	8000be8 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80013ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013f0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800145c <Read_Request_CB+0x188>
 80013f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80013fc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001400:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 3a90 	vmov	r3, s15
 8001410:	b21b      	sxth	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	ee16 0a90 	vmov	r0, s13
 8001418:	f000 f824 	bl	8001464 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 800141c:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <Read_Request_CB+0x18c>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001424:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <Read_Request_CB+0x18c>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f006 fbd4 	bl	8007bd6 <aci_gatt_allow_read>
 800142e:	4603      	mov	r3, r0
 8001430:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	@ 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800143e:	bf00      	nop
 8001440:	20000278 	.word	0x20000278
 8001444:	2000029c 	.word	0x2000029c
 8001448:	20000290 	.word	0x20000290
 800144c:	20000284 	.word	0x20000284
 8001450:	20000276 	.word	0x20000276
 8001454:	403b0000 	.word	0x403b0000
 8001458:	408f4000 	.word	0x408f4000
 800145c:	42c80000 	.word	0x42c80000
 8001460:	2000027a 	.word	0x2000027a

08001464 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af02      	add	r7, sp, #8
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8001470:	f002 f936 	bl	80036e0 <HAL_GetTick>
 8001474:	4603      	mov	r3, r0
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	733b      	strb	r3, [r7, #12]
 800147c:	f002 f930 	bl	80036e0 <HAL_GetTick>
 8001480:	4603      	mov	r3, r0
 8001482:	0adb      	lsrs	r3, r3, #11
 8001484:	b2db      	uxtb	r3, r3
 8001486:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	73bb      	strb	r3, [r7, #14]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	121b      	asrs	r3, r3, #8
 8001492:	b2db      	uxtb	r3, r3
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	141b      	asrs	r3, r3, #16
 800149a:	b2db      	uxtb	r3, r3
 800149c:	743b      	strb	r3, [r7, #16]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	161b      	asrs	r3, r3, #24
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	74bb      	strb	r3, [r7, #18]
 80014ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014b0:	121b      	asrs	r3, r3, #8
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <BlueMS_Environmental_Update+0x84>)
 80014ba:	8818      	ldrh	r0, [r3, #0]
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <BlueMS_Environmental_Update+0x88>)
 80014be:	8819      	ldrh	r1, [r3, #0]
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2308      	movs	r3, #8
 80014c8:	2200      	movs	r2, #0
 80014ca:	f006 faf4 	bl	8007ab6 <aci_gatt_update_char_value>
 80014ce:	4603      	mov	r3, r0
 80014d0:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80014d8:	2347      	movs	r3, #71	@ 0x47
 80014da:	e000      	b.n	80014de <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000274 	.word	0x20000274
 80014ec:	20000276 	.word	0x20000276

080014f0 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b08e      	sub	sp, #56	@ 0x38
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80014fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fe:	3301      	adds	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b04      	cmp	r3, #4
 8001508:	f040 80d3 	bne.w	80016b2 <user_notify+0x1c2>
    return;
  //printf("event\n");
  switch(event_pckt->evt){
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2bff      	cmp	r3, #255	@ 0xff
 8001512:	f000 8094 	beq.w	800163e <user_notify+0x14e>
 8001516:	2bff      	cmp	r3, #255	@ 0xff
 8001518:	f300 80ce 	bgt.w	80016b8 <user_notify+0x1c8>
 800151c:	2b05      	cmp	r3, #5
 800151e:	d002      	beq.n	8001526 <user_notify+0x36>
 8001520:	2b3e      	cmp	r3, #62	@ 0x3e
 8001522:	d003      	beq.n	800152c <user_notify+0x3c>
 8001524:	e0c8      	b.n	80016b8 <user_notify+0x1c8>
	  case EVT_DISCONN_COMPLETE:
		{
		  GAP_DisconnectionComplete_CB();
 8001526:	f000 f8d7 	bl	80016d8 <GAP_DisconnectionComplete_CB>
		}
		break;
 800152a:	e0c5      	b.n	80016b8 <user_notify+0x1c8>

	  case EVT_LE_META_EVENT:
		  //printf("EVT_LE_META_EVENT\n");
		{
		  evt_le_meta_event *evt = (void *)event_pckt->data;
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	3302      	adds	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]

		  switch(evt->subevent){
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <user_notify+0x50>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d00e      	beq.n	800155c <user_notify+0x6c>
				  }
			  }
			  break;
		  }
		}
		break;
 800153e:	e0bb      	b.n	80016b8 <user_notify+0x1c8>
				  evt_le_connection_complete *cc = (void *)evt->data;
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
				  GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1d5a      	adds	r2, r3, #5
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f000 f8d5 	bl	8001704 <GAP_ConnectionComplete_CB>
				break;
 800155a:	e06f      	b.n	800163c <user_notify+0x14c>
			      le_advertising_info *adv_info = (le_advertising_info *)(evt->data + 1);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	3301      	adds	r3, #1
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
			      uint8_t adv_len = adv_info->data_length;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	7a1b      	ldrb	r3, [r3, #8]
 8001568:	74fb      	strb	r3, [r7, #19]
			      int8_t rssi = adv_info->data_RSSI[adv_len];
 800156a:	7cfb      	ldrb	r3, [r7, #19]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4413      	add	r3, r2
 8001570:	7a5b      	ldrb	r3, [r3, #9]
 8001572:	74bb      	strb	r3, [r7, #18]
				  for (int i = 0; i < NUM_DEVICES; i++) {
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001578:	e05c      	b.n	8001634 <user_notify+0x144>
					  if (match_mac(adv_info->bdaddr, tracked_devices[i].mac)) {
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	1c98      	adds	r0, r3, #2
 800157e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4a4d      	ldr	r2, [pc, #308]	@ (80016c0 <user_notify+0x1d0>)
 800158a:	4413      	add	r3, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f000 fa60 	bl	8001a52 <match_mac>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d04a      	beq.n	800162e <user_notify+0x13e>
						  tracked_devices[i].current_rssi = rssi;
 8001598:	4949      	ldr	r1, [pc, #292]	@ (80016c0 <user_notify+0x1d0>)
 800159a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	3306      	adds	r3, #6
 80015a8:	7cba      	ldrb	r2, [r7, #18]
 80015aa:	701a      	strb	r2, [r3, #0]
						  kalman_filter_update(&tracked_devices[i].kalman, (float)rssi);
 80015ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	3308      	adds	r3, #8
 80015b8:	4a41      	ldr	r2, [pc, #260]	@ (80016c0 <user_notify+0x1d0>)
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	f997 2012 	ldrsb.w	r2, [r7, #18]
 80015c2:	ee07 2a90 	vmov	s15, r2
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fa60 	bl	8001a94 <kalman_filter_update>
						  tracked_devices[i].filtered_rssi = tracked_devices[i].kalman.x;
 80015d4:	493a      	ldr	r1, [pc, #232]	@ (80016c0 <user_notify+0x1d0>)
 80015d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	330c      	adds	r3, #12
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	4836      	ldr	r0, [pc, #216]	@ (80016c0 <user_notify+0x1d0>)
 80015e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4403      	add	r3, r0
 80015f4:	3308      	adds	r3, #8
 80015f6:	6019      	str	r1, [r3, #0]
						  printf("RPi %d: Raw RSSI = %d, Filtered = %.2f\r\n",i + 1, rssi, tracked_devices[i].filtered_rssi);
 80015f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015fa:	1c5c      	adds	r4, r3, #1
 80015fc:	f997 5012 	ldrsb.w	r5, [r7, #18]
 8001600:	492f      	ldr	r1, [pc, #188]	@ (80016c0 <user_notify+0x1d0>)
 8001602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3308      	adds	r3, #8
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff98 	bl	8000548 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9cd 2300 	strd	r2, r3, [sp]
 8001620:	462a      	mov	r2, r5
 8001622:	4621      	mov	r1, r4
 8001624:	4827      	ldr	r0, [pc, #156]	@ (80016c4 <user_notify+0x1d4>)
 8001626:	f00b f9f3 	bl	800ca10 <iprintf>
						  break;
 800162a:	bf00      	nop
			  break;
 800162c:	e005      	b.n	800163a <user_notify+0x14a>
				  for (int i = 0; i < NUM_DEVICES; i++) {
 800162e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001630:	3301      	adds	r3, #1
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001636:	2b02      	cmp	r3, #2
 8001638:	dd9f      	ble.n	800157a <user_notify+0x8a>
			  break;
 800163a:	bf00      	nop
		break;
 800163c:	e03c      	b.n	80016b8 <user_notify+0x1c8>

	  case EVT_VENDOR:
		{
		  evt_blue_aci *blue_evt = (void*)event_pckt->data;
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	3302      	adds	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
		  switch(blue_evt->ecode){
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	f240 4207 	movw	r2, #1031	@ 0x407
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <user_notify+0x17e>
 8001652:	f640 4214 	movw	r2, #3092	@ 0xc14
 8001656:	4293      	cmp	r3, r2
 8001658:	d12d      	bne.n	80016b6 <user_notify+0x1c6>
		    case EVT_BLUE_GATT_READ_PERMIT_REQ:
			{
			  evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	3302      	adds	r3, #2
 800165e:	61fb      	str	r3, [r7, #28]
			  Read_Request_CB(pr->attr_handle);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	885b      	ldrh	r3, [r3, #2]
 8001664:	b29b      	uxth	r3, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fe34 	bl	80012d4 <Read_Request_CB>
			}
			break;
 800166c:	e020      	b.n	80016b0 <user_notify+0x1c0>
		    case EVT_BLUE_GAP_PROCEDURE_COMPLETE:
		    {
		    	num_scans++;
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <user_notify+0x1d8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <user_notify+0x1d8>)
 8001676:	6013      	str	r3, [r2, #0]
		    	if(num_scans < 2){
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <user_notify+0x1d8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	dc0b      	bgt.n	8001698 <user_notify+0x1a8>
		    		printf("Scan again\r\n");
 8001680:	4812      	ldr	r0, [pc, #72]	@ (80016cc <user_notify+0x1dc>)
 8001682:	f00b fa2d 	bl	800cae0 <puts>
		    		aci_gap_start_general_discovery_proc(0x1000,0x1000,PUBLIC_ADDR,0x00);
 8001686:	2300      	movs	r3, #0
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800168e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001692:	f006 f9af 	bl	80079f4 <aci_gap_start_general_discovery_proc>
		    		printf("Scan procedure complete\r\n");
		    		num_scans = 0;
		    		osSemaphoreRelease(SendSemaphoreHandle);
		    	}
		    }
		    break;
 8001696:	e00a      	b.n	80016ae <user_notify+0x1be>
		    		printf("Scan procedure complete\r\n");
 8001698:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <user_notify+0x1e0>)
 800169a:	f00b fa21 	bl	800cae0 <puts>
		    		num_scans = 0;
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <user_notify+0x1d8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
		    		osSemaphoreRelease(SendSemaphoreHandle);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <user_notify+0x1e4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f007 f987 	bl	80089bc <osSemaphoreRelease>
		    break;
 80016ae:	bf00      	nop
		  }
		}
		break;
 80016b0:	e001      	b.n	80016b6 <user_notify+0x1c6>
    return;
 80016b2:	bf00      	nop
 80016b4:	e000      	b.n	80016b8 <user_notify+0x1c8>
		break;
 80016b6:	bf00      	nop
	  }
}
 80016b8:	3730      	adds	r7, #48	@ 0x30
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000004 	.word	0x20000004
 80016c4:	08010b38 	.word	0x08010b38
 80016c8:	200002a8 	.word	0x200002a8
 80016cc:	08010b64 	.word	0x08010b64
 80016d0:	08010b70 	.word	0x08010b70
 80016d4:	20001704 	.word	0x20001704

080016d8 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  connected = FALSE;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <GAP_DisconnectionComplete_CB+0x20>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <GAP_DisconnectionComplete_CB+0x24>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <GAP_DisconnectionComplete_CB+0x28>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	20000280 	.word	0x20000280
 80016fc:	20000001 	.word	0x20000001
 8001700:	2000027c 	.word	0x2000027c

08001704 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <GAP_ConnectionComplete_CB+0x38>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <GAP_ConnectionComplete_CB+0x3c>)
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 800171c:	2305      	movs	r3, #5
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e002      	b.n	8001728 <GAP_ConnectionComplete_CB+0x24>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3b01      	subs	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f9      	bne.n	8001722 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	20000280 	.word	0x20000280
 8001740:	2000027a 	.word	0x2000027a

08001744 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HCI_TL_SPI_Init+0x88>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <HCI_TL_SPI_Init+0x88>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HCI_TL_SPI_Init+0x88>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001764:	2340      	movs	r3, #64	@ 0x40
 8001766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001768:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	4815      	ldr	r0, [pc, #84]	@ (80017d0 <HCI_TL_SPI_Init+0x8c>)
 800177a:	f002 fa5d 	bl	8003c38 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800177e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179a:	f002 fa4d 	bl	8003c38 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800179e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	4807      	ldr	r0, [pc, #28]	@ (80017d4 <HCI_TL_SPI_Init+0x90>)
 80017b8:	f002 fa3e 	bl	8003c38 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80017bc:	f001 fe36 	bl	800342c <BSP_SPI3_Init>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48001000 	.word	0x48001000
 80017d4:	48000c00 	.word	0x48000c00

080017d8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80017dc:	2140      	movs	r1, #64	@ 0x40
 80017de:	4808      	ldr	r0, [pc, #32]	@ (8001800 <HCI_TL_SPI_DeInit+0x28>)
 80017e0:	f002 fbd4 	bl	8003f8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80017e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017e8:	4806      	ldr	r0, [pc, #24]	@ (8001804 <HCI_TL_SPI_DeInit+0x2c>)
 80017ea:	f002 fbcf 	bl	8003f8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80017ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f6:	f002 fbc9 	bl	8003f8c <HAL_GPIO_DeInit>
  return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	48001000 	.word	0x48001000
 8001804:	48000c00 	.word	0x48000c00

08001808 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001812:	480d      	ldr	r0, [pc, #52]	@ (8001848 <HCI_TL_SPI_Reset+0x40>)
 8001814:	f002 fcc6 	bl	80041a4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800181e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001822:	f002 fcbf 	bl	80041a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001826:	2005      	movs	r0, #5
 8001828:	f001 ff66 	bl	80036f8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001836:	f002 fcb5 	bl	80041a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800183a:	2005      	movs	r0, #5
 800183c:	f001 ff5c 	bl	80036f8 <HAL_Delay>
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	48000c00 	.word	0x48000c00

0800184c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800185c:	23ff      	movs	r3, #255	@ 0xff
 800185e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001860:	230b      	movs	r3, #11
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	2300      	movs	r3, #0
 8001866:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800186e:	4822      	ldr	r0, [pc, #136]	@ (80018f8 <HCI_TL_SPI_Receive+0xac>)
 8001870:	f002 fc98 	bl	80041a4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001874:	f107 010c 	add.w	r1, r7, #12
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2205      	movs	r2, #5
 800187e:	4618      	mov	r0, r3
 8001880:	f001 fe04 	bl	800348c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001884:	7b3b      	ldrb	r3, [r7, #12]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d12a      	bne.n	80018e0 <HCI_TL_SPI_Receive+0x94>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800188a:	7c3b      	ldrb	r3, [r7, #16]
 800188c:	b21b      	sxth	r3, r3
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01e      	beq.n	80018e0 <HCI_TL_SPI_Receive+0x94>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80018a2:	8bfa      	ldrh	r2, [r7, #30]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d901      	bls.n	80018ae <HCI_TL_SPI_Receive+0x62>
        byte_count = size;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	777b      	strb	r3, [r7, #29]
 80018b2:	e010      	b.n	80018d6 <HCI_TL_SPI_Receive+0x8a>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80018b4:	f107 011b 	add.w	r1, r7, #27
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	2201      	movs	r2, #1
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fde4 	bl	800348c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 80018c4:	7f7b      	ldrb	r3, [r7, #29]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	7efa      	ldrb	r2, [r7, #27]
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 80018d0:	7f7b      	ldrb	r3, [r7, #29]
 80018d2:	3301      	adds	r3, #1
 80018d4:	777b      	strb	r3, [r7, #29]
 80018d6:	7f7b      	ldrb	r3, [r7, #29]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	8bfa      	ldrh	r2, [r7, #30]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8e9      	bhi.n	80018b4 <HCI_TL_SPI_Receive+0x68>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018e6:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <HCI_TL_SPI_Receive+0xac>)
 80018e8:	f002 fc5c 	bl	80041a4 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80018ec:	7f7b      	ldrb	r3, [r7, #29]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	48000c00 	.word	0x48000c00

080018fc <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001908:	230a      	movs	r3, #10
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	2300      	movs	r3, #0
 800190e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001910:	f001 fee6 	bl	80036e0 <HAL_GetTick>
 8001914:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001920:	481c      	ldr	r0, [pc, #112]	@ (8001994 <HCI_TL_SPI_Send+0x98>)
 8001922:	f002 fc3f 	bl	80041a4 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001926:	f107 0108 	add.w	r1, r7, #8
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2205      	movs	r2, #5
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fdab 	bl	800348c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001936:	7a3b      	ldrb	r3, [r7, #8]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d10f      	bne.n	800195c <HCI_TL_SPI_Send+0x60>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800193c:	7a7b      	ldrb	r3, [r7, #9]
 800193e:	461a      	mov	r2, r3
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	4293      	cmp	r3, r2
 8001944:	d806      	bhi.n	8001954 <HCI_TL_SPI_Send+0x58>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	461a      	mov	r2, r3
 800194a:	4913      	ldr	r1, [pc, #76]	@ (8001998 <HCI_TL_SPI_Send+0x9c>)
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f001 fd9d 	bl	800348c <BSP_SPI3_SendRecv>
 8001952:	e006      	b.n	8001962 <HCI_TL_SPI_Send+0x66>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001954:	f06f 0301 	mvn.w	r3, #1
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e002      	b.n	8001962 <HCI_TL_SPI_Send+0x66>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
 8001960:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001968:	480a      	ldr	r0, [pc, #40]	@ (8001994 <HCI_TL_SPI_Send+0x98>)
 800196a:	f002 fc1b 	bl	80041a4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800196e:	f001 feb7 	bl	80036e0 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d903      	bls.n	8001984 <HCI_TL_SPI_Send+0x88>
    {
      result = -3;
 800197c:	f06f 0302 	mvn.w	r3, #2
 8001980:	61fb      	str	r3, [r7, #28]
      break;
 8001982:	e002      	b.n	800198a <HCI_TL_SPI_Send+0x8e>
    }
  } while(result < 0);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	dbc5      	blt.n	8001916 <HCI_TL_SPI_Send+0x1a>

  return result;
 800198a:	69fb      	ldr	r3, [r7, #28]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	48000c00 	.word	0x48000c00
 8001998:	200002b4 	.word	0x200002b4

0800199c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80019a0:	2140      	movs	r1, #64	@ 0x40
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <IsDataAvailable+0x1c>)
 80019a4:	f002 fbe6 	bl	8004174 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	48001000 	.word	0x48001000

080019bc <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <hci_tl_lowlevel_init+0x50>)
 80019c4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <hci_tl_lowlevel_init+0x54>)
 80019c8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <hci_tl_lowlevel_init+0x58>)
 80019cc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80019ce:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <hci_tl_lowlevel_init+0x5c>)
 80019d0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <hci_tl_lowlevel_init+0x60>)
 80019d4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <hci_tl_lowlevel_init+0x64>)
 80019d8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4618      	mov	r0, r3
 80019de:	f006 fb39 	bl	8008054 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80019e2:	4910      	ldr	r1, [pc, #64]	@ (8001a24 <hci_tl_lowlevel_init+0x68>)
 80019e4:	4810      	ldr	r0, [pc, #64]	@ (8001a28 <hci_tl_lowlevel_init+0x6c>)
 80019e6:	f002 f8e3 	bl	8003bb0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <hci_tl_lowlevel_init+0x70>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	480e      	ldr	r0, [pc, #56]	@ (8001a28 <hci_tl_lowlevel_init+0x6c>)
 80019f0:	f002 f8c4 	bl	8003b7c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2017      	movs	r0, #23
 80019fa:	f001 ff7c 	bl	80038f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019fe:	2017      	movs	r0, #23
 8001a00:	f001 ff95 	bl	800392e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08001745 	.word	0x08001745
 8001a10:	080017d9 	.word	0x080017d9
 8001a14:	080018fd 	.word	0x080018fd
 8001a18:	0800184d 	.word	0x0800184d
 8001a1c:	08001809 	.word	0x08001809
 8001a20:	080034cd 	.word	0x080034cd
 8001a24:	16000006 	.word	0x16000006
 8001a28:	200002ac 	.word	0x200002ac
 8001a2c:	08001a31 	.word	0x08001a31

08001a30 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001a34:	e005      	b.n	8001a42 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001a36:	2000      	movs	r0, #0
 8001a38:	f006 fc70 	bl	800831c <hci_notify_asynch_evt>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d105      	bne.n	8001a4e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001a42:	f7ff ffab 	bl	800199c <IsDataAvailable>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f4      	bne.n	8001a36 <hci_tl_lowlevel_isr+0x6>
 8001a4c:	e000      	b.n	8001a50 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001a4e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <match_mac>:
    .mac = {0xEE, 0x89, 0xD9, 0xEB, 0x27, 0xB8},
    .kalman = {.x = 0.0f, .P = 1.0f, .initialized = 0}
  },
};

int match_mac(uint8_t *mac1, uint8_t *mac2) {
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 6; i++) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e00e      	b.n	8001a80 <match_mac+0x2e>
    if (mac1[i] != mac2[i]) return 0;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	440b      	add	r3, r1
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d001      	beq.n	8001a7a <match_mac+0x28>
 8001a76:	2300      	movs	r3, #0
 8001a78:	e006      	b.n	8001a88 <match_mac+0x36>
  for (int i = 0; i < 6; i++) {
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	dded      	ble.n	8001a62 <match_mac+0x10>
  }
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <kalman_filter_update>:

void kalman_filter_update(KalmanState *state, float measurement) {
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	ed87 0a00 	vstr	s0, [r7]
    // Kalman filter parameters
    const float q = 0.001f;  // Process noise covariance
 8001aa0:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <kalman_filter_update+0xb0>)
 8001aa2:	617b      	str	r3, [r7, #20]
    const float r = 4.0f;    // Measurement noise covariance
 8001aa4:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001aa8:	613b      	str	r3, [r7, #16]

    if (!state->initialized) {
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7a1b      	ldrb	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <kalman_filter_update+0x34>
        // Initialize with first measurement
        state->x = measurement;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	601a      	str	r2, [r3, #0]
        state->P = 1.0f;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001abe:	605a      	str	r2, [r3, #4]
        state->initialized = 1;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	721a      	strb	r2, [r3, #8]
        return;
 8001ac6:	e038      	b.n	8001b3a <kalman_filter_update+0xa6>
    }

    // Prediction step
    // x_pred = x (no motion model for RSSI)
    // P_pred = P + q
    state->P += q;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update step
    float K = state->P / (state->P + r);  // Kalman gain
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af4:	edc7 7a03 	vstr	s15, [r7, #12]
    state->x = state->x + K * (measurement - state->x);  // Update estimate
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	edd7 6a00 	vldr	s13, [r7]
 8001b08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	edc3 7a00 	vstr	s15, [r3]
    state->P = (1.0f - K) * state->P;  // Update error covariance
 8001b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	3a83126f 	.word	0x3a83126f

08001b48 <rssi_to_distance>:

float rssi_to_distance(char id, int8_t rssi) {
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460a      	mov	r2, r1
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71bb      	strb	r3, [r7, #6]
  float txPower; // Calibrated RSSI at 1 meter from the beacon
  switch(id){
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d00c      	beq.n	8001b78 <rssi_to_distance+0x30>
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	dc0c      	bgt.n	8001b7c <rssi_to_distance+0x34>
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <rssi_to_distance+0x24>
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d003      	beq.n	8001b72 <rssi_to_distance+0x2a>
 8001b6a:	e007      	b.n	8001b7c <rssi_to_distance+0x34>
  	  case 0: // Rpi 1
  		  txPower =  -60;
 8001b6c:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <rssi_to_distance+0xf8>)
 8001b6e:	60fb      	str	r3, [r7, #12]
  		  break;
 8001b70:	e004      	b.n	8001b7c <rssi_to_distance+0x34>
  	  case 1:
  		  txPower = -72;
 8001b72:	4b34      	ldr	r3, [pc, #208]	@ (8001c44 <rssi_to_distance+0xfc>)
 8001b74:	60fb      	str	r3, [r7, #12]
  		  break;
 8001b76:	e001      	b.n	8001b7c <rssi_to_distance+0x34>
  	  case 2:
  		  txPower = -72;
 8001b78:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <rssi_to_distance+0xfc>)
 8001b7a:	60fb      	str	r3, [r7, #12]
  }

  if (rssi == 0) return -1.0; // invalid RSSI
 8001b7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <rssi_to_distance+0x40>
 8001b84:	4b30      	ldr	r3, [pc, #192]	@ (8001c48 <rssi_to_distance+0x100>)
 8001b86:	e049      	b.n	8001c1c <rssi_to_distance+0xd4>
  float ratio = rssi * 1.0 / txPower;
 8001b88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fcc9 	bl	8000524 <__aeabi_i2d>
 8001b92:	4604      	mov	r4, r0
 8001b94:	460d      	mov	r5, r1
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7fe fcd6 	bl	8000548 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7fe fe52 	bl	800084c <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff f81a 	bl	8000be8 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60bb      	str	r3, [r7, #8]

  if (ratio < 1.0) return powf(ratio, 10);           // RSSI > txPower, distance < 1m
 8001bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d508      	bpl.n	8001bdc <rssi_to_distance+0x94>
 8001bca:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001bce:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bd2:	f00e fbcd 	bl	8010370 <powf>
 8001bd6:	ee10 3a10 	vmov	r3, s0
 8001bda:	e01f      	b.n	8001c1c <rssi_to_distance+0xd4>
  else return 0.89976 * powf(ratio, 7.7095) + 0.111; // RSSI < txPower, distance >= 1m
 8001bdc:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001c4c <rssi_to_distance+0x104>
 8001be0:	ed97 0a02 	vldr	s0, [r7, #8]
 8001be4:	f00e fbc4 	bl	8010370 <powf>
 8001be8:	ee10 3a10 	vmov	r3, s0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcab 	bl	8000548 <__aeabi_f2d>
 8001bf2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001c30 <rssi_to_distance+0xe8>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fcfe 	bl	80005f8 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	a30c      	add	r3, pc, #48	@ (adr r3, 8001c38 <rssi_to_distance+0xf0>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe fb3f 	bl	800028c <__adddf3>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ffe7 	bl	8000be8 <__aeabi_d2f>
 8001c1a:	4603      	mov	r3, r0
}
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	7bc7f77b 	.word	0x7bc7f77b
 8001c34:	3feccad5 	.word	0x3feccad5
 8001c38:	f9db22d1 	.word	0xf9db22d1
 8001c3c:	3fbc6a7e 	.word	0x3fbc6a7e
 8001c40:	c2700000 	.word	0xc2700000
 8001c44:	c2900000 	.word	0xc2900000
 8001c48:	bf800000 	.word	0xbf800000
 8001c4c:	40f6b439 	.word	0x40f6b439

08001c50 <fast_sqrt>:
};

const float CONST_C0 = 20.25f;
const float CONST_C1 = 20.2433f;

static float fast_sqrt(float x, int iters) {
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c5a:	6038      	str	r0, [r7, #0]
    if (x <= 0.0f) return 0.0f;
 8001c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d802      	bhi.n	8001c70 <fast_sqrt+0x20>
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e036      	b.n	8001cde <fast_sqrt+0x8e>
    float approx = x;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	617b      	str	r3, [r7, #20]
    float three_x = 3.0f * x;
 8001c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c78:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < iters; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e024      	b.n	8001cd4 <fast_sqrt+0x84>
        float sq_app = approx * approx;
 8001c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c92:	edc7 7a02 	vstr	s15, [r7, #8]
        approx = (sq_app * approx + three_x * approx) / (3.0f * sq_app + x);
 8001c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca2:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001cb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cca:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < iters; i++) {
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbd6      	blt.n	8001c8a <fast_sqrt+0x3a>
    }
    return approx;
 8001cdc:	697b      	ldr	r3, [r7, #20]
}
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <calculate_werr>:

static inline float calculate_werr(float x, float y, const float distance[3]) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cfe:	6078      	str	r0, [r7, #4]
    float total_sq_err = 0.0f;
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 3; i++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
 8001d0a:	e041      	b.n	8001d90 <calculate_werr+0xa0>
        float dx = x - AX[i];
 8001d0c:	4a26      	ldr	r2, [pc, #152]	@ (8001da8 <calculate_werr+0xb8>)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d20:	edc7 7a07 	vstr	s15, [r7, #28]
        float dy = y - AY[i];
 8001d24:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <calculate_werr+0xbc>)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d38:	edc7 7a06 	vstr	s15, [r7, #24]
        float d_calc = fast_sqrt(dx*dx + dy*dy, 5);
 8001d3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	2005      	movs	r0, #5
 8001d52:	eeb0 0a67 	vmov.f32	s0, s15
 8001d56:	f7ff ff7b 	bl	8001c50 <fast_sqrt>
 8001d5a:	ed87 0a05 	vstr	s0, [r7, #20]
        float err_i = d_calc - distance[i];
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	edc7 7a04 	vstr	s15, [r7, #16]
        total_sq_err += err_i * err_i;
 8001d76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d7e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    for (int i = 0; i < 3; i++) {
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	ddba      	ble.n	8001d0c <calculate_werr+0x1c>
    }
    return total_sq_err;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	ee07 3a90 	vmov	s15, r3
}
 8001d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001da0:	3728      	adds	r7, #40	@ 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000004c 	.word	0x2000004c
 8001dac:	20000058 	.word	0x20000058

08001db0 <lws_four>:
        float d_calc = fast_sqrt((dx*dx + dy*dy), 5);
        err[i] = d_calc - distance[i];
    }
}

void lws_four(float* x_ptr, float* y_ptr, const float distance[3], float step) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	@ 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	ed87 0a00 	vstr	s0, [r7]
    float current_x = *x_ptr;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float current_y = *y_ptr;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    float werr_current, werr_new;

    // Thresholds from original code (note the difference for x+step)
    const float threshold_default = 1e-6f;
 8001dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f40 <lws_four+0x190>)
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
    const float threshold_x_plus = 1e-5f;
 8001dd0:	4b5c      	ldr	r3, [pc, #368]	@ (8001f44 <lws_four+0x194>)
 8001dd2:	623b      	str	r3, [r7, #32]

    while (1) {
        werr_current = calculate_werr(current_x, current_y, distance);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001dda:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001dde:	f7ff ff87 	bl	8001cf0 <calculate_werr>
 8001de2:	ed87 0a07 	vstr	s0, [r7, #28]
        int moved = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]

        // Try y + step
        werr_new = calculate_werr(current_x, current_y + step, distance);
 8001dea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001dee:	edd7 7a00 	vldr	s15, [r7]
 8001df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	eef0 0a67 	vmov.f32	s1, s15
 8001dfc:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001e00:	f7ff ff76 	bl	8001cf0 <calculate_werr>
 8001e04:	ed87 0a05 	vstr	s0, [r7, #20]
        if (werr_current - werr_new > threshold_default) {
 8001e08:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e14:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e20:	d50a      	bpl.n	8001e38 <lws_four+0x88>
            current_y += step;
 8001e22:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001e26:	edd7 7a00 	vldr	s15, [r7]
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            moved = 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
            continue; // Restart checks from the new point
 8001e36:	e077      	b.n	8001f28 <lws_four+0x178>
        }

        // Try y - step
        werr_new = calculate_werr(current_x, current_y - step, distance);
 8001e38:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001e3c:	edd7 7a00 	vldr	s15, [r7]
 8001e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	eef0 0a67 	vmov.f32	s1, s15
 8001e4a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001e4e:	f7ff ff4f 	bl	8001cf0 <calculate_werr>
 8001e52:	ed87 0a05 	vstr	s0, [r7, #20]
        if (werr_current - werr_new > threshold_default) {
 8001e56:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	d50a      	bpl.n	8001e86 <lws_four+0xd6>
            current_y -= step;
 8001e70:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001e74:	edd7 7a00 	vldr	s15, [r7]
 8001e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            moved = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
            continue;
 8001e84:	e050      	b.n	8001f28 <lws_four+0x178>
        }

        // Try x - step
        werr_new = calculate_werr(current_x - step, current_y, distance);
 8001e86:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001e8a:	edd7 7a00 	vldr	s15, [r7]
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001e98:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9c:	f7ff ff28 	bl	8001cf0 <calculate_werr>
 8001ea0:	ed87 0a05 	vstr	s0, [r7, #20]
        if (werr_current - werr_new > threshold_default) {
 8001ea4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebc:	d50a      	bpl.n	8001ed4 <lws_four+0x124>
            current_x -= step;
 8001ebe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001ec2:	edd7 7a00 	vldr	s15, [r7]
 8001ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            moved = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
            continue;
 8001ed2:	e029      	b.n	8001f28 <lws_four+0x178>
        }

        // Try x + step
        werr_new = calculate_werr(current_x + step, current_y, distance);
 8001ed4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001ed8:	edd7 7a00 	vldr	s15, [r7]
 8001edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	f7ff ff01 	bl	8001cf0 <calculate_werr>
 8001eee:	ed87 0a05 	vstr	s0, [r7, #20]
        // Original code used a different threshold (1e-5f) for this specific move
        if (werr_current - werr_new > threshold_x_plus) {
 8001ef2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ef6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	d50a      	bpl.n	8001f22 <lws_four+0x172>
            current_x += step;
 8001f0c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001f10:	edd7 7a00 	vldr	s15, [r7]
 8001f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f18:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            moved = 1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
            continue;
 8001f20:	e002      	b.n	8001f28 <lws_four+0x178>
        }

        // If no move was made in any direction, the local optimum is found for this step size.
        if (moved == 0) {
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d000      	beq.n	8001f2a <lws_four+0x17a>
    while (1) {
 8001f28:	e754      	b.n	8001dd4 <lws_four+0x24>
            break;
 8001f2a:	bf00      	nop
        }
    }

    *x_ptr = current_x;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f30:	601a      	str	r2, [r3, #0]
    *y_ptr = current_y;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f36:	601a      	str	r2, [r3, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	@ 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	358637bd 	.word	0x358637bd
 8001f44:	3727c5ac 	.word	0x3727c5ac

08001f48 <trilaterate_position>:

void trilaterate_position(float *distances, float *x, float* y) {
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	float C[2], HTWC[2];
	C[0] = distances[0]*distances[0] - distances[1]*distances[1] + CONST_C0;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3304      	adds	r3, #4
 8001f68:	edd3 6a00 	vldr	s13, [r3]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800204c <trilaterate_position+0x104>
 8001f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f84:	edc7 7a06 	vstr	s15, [r7, #24]
	C[1] = distances[0]*distances[0] - distances[2]*distances[2] + CONST_C1;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002050 <trilaterate_position+0x108>
 8001fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb8:	edc7 7a07 	vstr	s15, [r7, #28]
	HTWC[0] = H[0][0]*C[0] + H[1][0]*C[1];
 8001fbc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001fc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc8:	eef1 6a02 	vmov.f32	s13, #18	@ 0x40900000  4.5
 8001fcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	edc7 7a04 	vstr	s15, [r7, #16]
	HTWC[1] = H[0][1]*C[0] + H[1][1]*C[1];
 8001fdc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002054 <trilaterate_position+0x10c>
 8001fe0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe8:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002058 <trilaterate_position+0x110>
 8001fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff8:	edc7 7a05 	vstr	s15, [r7, #20]

	*x = HTWH_INV[0][0] * HTWC[0] + HTWH_INV[0][1] * HTWC[1];
 8001ffc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800205c <trilaterate_position+0x114>
 8002000:	edd7 7a04 	vldr	s15, [r7, #16]
 8002004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002008:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002060 <trilaterate_position+0x118>
 800200c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	edc3 7a00 	vstr	s15, [r3]
	*y = HTWH_INV[1][0] * HTWC[0] + HTWH_INV[1][1] * HTWC[1];
 800201e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002060 <trilaterate_position+0x118>
 8002022:	edd7 7a04 	vldr	s15, [r7, #16]
 8002026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002064 <trilaterate_position+0x11c>
 800202e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	edc3 7a00 	vstr	s15, [r3]
}
 8002040:	bf00      	nop
 8002042:	3724      	adds	r7, #36	@ 0x24
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	41a20000 	.word	0x41a20000
 8002050:	41a1f247 	.word	0x41a1f247
 8002054:	00000000 	.word	0x00000000
 8002058:	40f9cac1 	.word	0x40f9cac1
 800205c:	3c86ec18 	.word	0x3c86ec18
 8002060:	bc1b7bf2 	.word	0xbc1b7bf2
 8002064:	3ce0370d 	.word	0x3ce0370d

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206c:	f001 fad0 	bl	8003610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002070:	f000 f848 	bl	8002104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002074:	f000 f9a2 	bl	80023bc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8002078:	f000 f8a6 	bl	80021c8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800207c:	f000 f8dc 	bl	8002238 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8002080:	f000 f918 	bl	80022b4 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8002084:	f000 f93c 	bl	8002300 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002088:	f000 f96a 	bl	8002360 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 800208c:	f7fe ffc8 	bl	8001020 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002090:	f006 fadc 	bl	800864c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ScanSemaphore */
  ScanSemaphoreHandle = osSemaphoreNew(1, 0, &ScanSemaphore_attributes);
 8002094:	4a11      	ldr	r2, [pc, #68]	@ (80020dc <main+0x74>)
 8002096:	2100      	movs	r1, #0
 8002098:	2001      	movs	r0, #1
 800209a:	f006 fbb3 	bl	8008804 <osSemaphoreNew>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <main+0x78>)
 80020a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  SendSemaphoreHandle = osSemaphoreNew(1, 0, &SendSemaphore_attributes);
 80020a4:	4a0f      	ldr	r2, [pc, #60]	@ (80020e4 <main+0x7c>)
 80020a6:	2100      	movs	r1, #0
 80020a8:	2001      	movs	r0, #1
 80020aa:	f006 fbab 	bl	8008804 <osSemaphoreNew>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <main+0x80>)
 80020b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskCompute */
  TaskComputeHandle = osThreadNew(StartTaskCompute, NULL, &TaskCompute_attributes);
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <main+0x84>)
 80020b6:	2100      	movs	r1, #0
 80020b8:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <main+0x88>)
 80020ba:	f006 fb11 	bl	80086e0 <osThreadNew>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <main+0x8c>)
 80020c2:	6013      	str	r3, [r2, #0]

  /* creation of TaskBLE */
  TaskBLEHandle = osThreadNew(StarTaskBLE, NULL, &TaskBLE_attributes);
 80020c4:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <main+0x90>)
 80020c6:	2100      	movs	r1, #0
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <main+0x94>)
 80020ca:	f006 fb09 	bl	80086e0 <osThreadNew>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <main+0x98>)
 80020d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80020d4:	f006 fade 	bl	8008694 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <main+0x70>
 80020dc:	08010d08 	.word	0x08010d08
 80020e0:	200016b0 	.word	0x200016b0
 80020e4:	08010d18 	.word	0x08010d18
 80020e8:	20001704 	.word	0x20001704
 80020ec:	08010cc0 	.word	0x08010cc0
 80020f0:	08002749 	.word	0x08002749
 80020f4:	200009f0 	.word	0x200009f0
 80020f8:	08010ce4 	.word	0x08010ce4
 80020fc:	0800291d 	.word	0x0800291d
 8002100:	20001250 	.word	0x20001250

08002104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b096      	sub	sp, #88	@ 0x58
 8002108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	2244      	movs	r2, #68	@ 0x44
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f00a fde6 	bl	800cce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002126:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800212a:	f002 faef 	bl	800470c <HAL_PWREx_ControlVoltageScaling>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002134:	f000 fc06 	bl	8002944 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002138:	f002 faca 	bl	80046d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800213c:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <SystemClock_Config+0xc0>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a20      	ldr	r2, [pc, #128]	@ (80021c4 <SystemClock_Config+0xc0>)
 8002144:	f023 0318 	bic.w	r3, r3, #24
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800214c:	2314      	movs	r3, #20
 800214e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002150:	2301      	movs	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002154:	2301      	movs	r3, #1
 8002156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800215c:	2360      	movs	r3, #96	@ 0x60
 800215e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002160:	2302      	movs	r3, #2
 8002162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002164:	2301      	movs	r3, #1
 8002166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002168:	2301      	movs	r3, #1
 800216a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800216c:	2328      	movs	r3, #40	@ 0x28
 800216e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002170:	2307      	movs	r3, #7
 8002172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002174:	2302      	movs	r3, #2
 8002176:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002178:	2302      	movs	r3, #2
 800217a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4618      	mov	r0, r3
 8002182:	f002 fbe5 	bl	8004950 <HAL_RCC_OscConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800218c:	f000 fbda 	bl	8002944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002190:	230f      	movs	r3, #15
 8002192:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002194:	2303      	movs	r3, #3
 8002196:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2104      	movs	r1, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 ffad 	bl	8005108 <HAL_RCC_ClockConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80021b4:	f000 fbc6 	bl	8002944 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80021b8:	f003 fcb4 	bl	8005b24 <HAL_RCCEx_EnableMSIPLLMode>
}
 80021bc:	bf00      	nop
 80021be:	3758      	adds	r7, #88	@ 0x58
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <MX_DFSDM1_Init+0x6c>)
 80021d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80021de:	4b14      	ldr	r3, [pc, #80]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021e0:	2202      	movs	r2, #2
 80021e2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021f6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80021fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 8002200:	2204      	movs	r2, #4
 8002202:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 800220c:	2201      	movs	r2, #1
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 8002212:	2200      	movs	r2, #0
 8002214:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	@ (8002230 <MX_DFSDM1_Init+0x68>)
 800221e:	f001 fba1 	bl	8003964 <HAL_DFSDM_ChannelInit>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002228:	f000 fb8c 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200003b4 	.word	0x200003b4
 8002234:	40016020 	.word	0x40016020

08002238 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800223c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <MX_I2C2_Init+0x74>)
 800223e:	4a1c      	ldr	r2, [pc, #112]	@ (80022b0 <MX_I2C2_Init+0x78>)
 8002240:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002242:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <MX_I2C2_Init+0x74>)
 8002244:	f640 6214 	movw	r2, #3604	@ 0xe14
 8002248:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <MX_I2C2_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002250:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_I2C2_Init+0x74>)
 8002252:	2201      	movs	r2, #1
 8002254:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <MX_I2C2_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <MX_I2C2_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <MX_I2C2_Init+0x74>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002268:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <MX_I2C2_Init+0x74>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800226e:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <MX_I2C2_Init+0x74>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002274:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_I2C2_Init+0x74>)
 8002276:	f001 ffc5 	bl	8004204 <HAL_I2C_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002280:	f000 fb60 	bl	8002944 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002284:	2100      	movs	r1, #0
 8002286:	4809      	ldr	r0, [pc, #36]	@ (80022ac <MX_I2C2_Init+0x74>)
 8002288:	f002 f857 	bl	800433a <HAL_I2CEx_ConfigAnalogFilter>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002292:	f000 fb57 	bl	8002944 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002296:	2100      	movs	r1, #0
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <MX_I2C2_Init+0x74>)
 800229a:	f002 f899 	bl	80043d0 <HAL_I2CEx_ConfigDigitalFilter>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80022a4:	f000 fb4e 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200003ec 	.word	0x200003ec
 80022b0:	40005800 	.word	0x40005800

080022b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022ba:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <MX_QUADSPI_Init+0x48>)
 80022bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022c0:	2202      	movs	r2, #2
 80022c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022c6:	2204      	movs	r2, #4
 80022c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022cc:	2210      	movs	r2, #16
 80022ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022d2:	2217      	movs	r2, #23
 80022d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <MX_QUADSPI_Init+0x44>)
 80022e4:	f002 fa78 	bl	80047d8 <HAL_QSPI_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80022ee:	f000 fb29 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000440 	.word	0x20000440
 80022fc:	a0001000 	.word	0xa0001000

08002300 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 8002306:	4a15      	ldr	r2, [pc, #84]	@ (800235c <MX_USART3_UART_Init+0x5c>)
 8002308:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800230a:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 800230c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002310:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 8002326:	220c      	movs	r2, #12
 8002328:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002330:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 8002338:	2200      	movs	r2, #0
 800233a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 800233e:	2200      	movs	r2, #0
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <MX_USART3_UART_Init+0x58>)
 8002344:	f004 fa0e 	bl	8006764 <HAL_UART_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800234e:	f000 faf9 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000484 	.word	0x20000484
 800235c:	40004800 	.word	0x40004800

08002360 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002364:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002366:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800236a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800236e:	2206      	movs	r2, #6
 8002370:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002374:	2202      	movs	r2, #2
 8002376:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002378:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800237a:	2202      	movs	r2, #2
 800237c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002380:	2200      	movs	r2, #0
 8002382:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002386:	2200      	movs	r2, #0
 8002388:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800238c:	2200      	movs	r2, #0
 800238e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002392:	2200      	movs	r2, #0
 8002394:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002396:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002398:	2200      	movs	r2, #0
 800239a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800239e:	2200      	movs	r2, #0
 80023a0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023a4:	f002 f860 	bl	8004468 <HAL_PCD_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80023ae:	f000 fac9 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000050c 	.word	0x2000050c

080023bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	@ 0x28
 80023c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023d2:	4bbc      	ldr	r3, [pc, #752]	@ (80026c4 <MX_GPIO_Init+0x308>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	4abb      	ldr	r2, [pc, #748]	@ (80026c4 <MX_GPIO_Init+0x308>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023de:	4bb9      	ldr	r3, [pc, #740]	@ (80026c4 <MX_GPIO_Init+0x308>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	4bb6      	ldr	r3, [pc, #728]	@ (80026c4 <MX_GPIO_Init+0x308>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	4ab5      	ldr	r2, [pc, #724]	@ (80026c4 <MX_GPIO_Init+0x308>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023f6:	4bb3      	ldr	r3, [pc, #716]	@ (80026c4 <MX_GPIO_Init+0x308>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4bb0      	ldr	r3, [pc, #704]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002406:	4aaf      	ldr	r2, [pc, #700]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800240e:	4bad      	ldr	r3, [pc, #692]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	4baa      	ldr	r3, [pc, #680]	@ (80026c4 <MX_GPIO_Init+0x308>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	4aa9      	ldr	r2, [pc, #676]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002426:	4ba7      	ldr	r3, [pc, #668]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002432:	4ba4      	ldr	r3, [pc, #656]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002436:	4aa3      	ldr	r2, [pc, #652]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243e:	4ba1      	ldr	r3, [pc, #644]	@ (80026c4 <MX_GPIO_Init+0x308>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002450:	489d      	ldr	r0, [pc, #628]	@ (80026c8 <MX_GPIO_Init+0x30c>)
 8002452:	f001 fea7 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	f248 1104 	movw	r1, #33028	@ 0x8104
 800245c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002460:	f001 fea0 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002464:	2200      	movs	r2, #0
 8002466:	f24b 0114 	movw	r1, #45076	@ 0xb014
 800246a:	4898      	ldr	r0, [pc, #608]	@ (80026cc <MX_GPIO_Init+0x310>)
 800246c:	f001 fe9a 	bl	80041a4 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	f241 0181 	movw	r1, #4225	@ 0x1081
 8002476:	4896      	ldr	r0, [pc, #600]	@ (80026d0 <MX_GPIO_Init+0x314>)
 8002478:	f001 fe94 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002482:	4893      	ldr	r0, [pc, #588]	@ (80026d0 <MX_GPIO_Init+0x314>)
 8002484:	f001 fe8e 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800248e:	4891      	ldr	r0, [pc, #580]	@ (80026d4 <MX_GPIO_Init+0x318>)
 8002490:	f001 fe88 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2120      	movs	r1, #32
 8002498:	488c      	ldr	r0, [pc, #560]	@ (80026cc <MX_GPIO_Init+0x310>)
 800249a:	f001 fe83 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	2101      	movs	r1, #1
 80024a2:	4889      	ldr	r0, [pc, #548]	@ (80026c8 <MX_GPIO_Init+0x30c>)
 80024a4:	f001 fe7e 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80024a8:	f240 1315 	movw	r3, #277	@ 0x115
 80024ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	4881      	ldr	r0, [pc, #516]	@ (80026c8 <MX_GPIO_Init+0x30c>)
 80024c2:	f001 fbb9 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80024c6:	236a      	movs	r3, #106	@ 0x6a
 80024c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	487b      	ldr	r0, [pc, #492]	@ (80026c8 <MX_GPIO_Init+0x30c>)
 80024dc:	f001 fbac 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80024e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80024ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4877      	ldr	r0, [pc, #476]	@ (80026d4 <MX_GPIO_Init+0x318>)
 80024f8:	f001 fb9e 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80024fc:	233f      	movs	r3, #63	@ 0x3f
 80024fe:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002500:	230b      	movs	r3, #11
 8002502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4871      	ldr	r0, [pc, #452]	@ (80026d4 <MX_GPIO_Init+0x318>)
 8002510:	f001 fb92 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002514:	2303      	movs	r3, #3
 8002516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002524:	2308      	movs	r3, #8
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002532:	f001 fb81 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002536:	f248 1304 	movw	r3, #33028	@ 0x8104
 800253a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002552:	f001 fb71 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002556:	2308      	movs	r3, #8
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002566:	2301      	movs	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002574:	f001 fb60 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002578:	2310      	movs	r3, #16
 800257a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800257c:	230b      	movs	r3, #11
 800257e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800258e:	f001 fb53 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002592:	23e0      	movs	r3, #224	@ 0xe0
 8002594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025a2:	2305      	movs	r3, #5
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b0:	f001 fb42 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80025b4:	2301      	movs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4840      	ldr	r0, [pc, #256]	@ (80026cc <MX_GPIO_Init+0x310>)
 80025ca:	f001 fb35 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80025ce:	2302      	movs	r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025d2:	230b      	movs	r3, #11
 80025d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	483a      	ldr	r0, [pc, #232]	@ (80026cc <MX_GPIO_Init+0x310>)
 80025e2:	f001 fb29 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80025e6:	f24b 0334 	movw	r3, #45108	@ 0xb034
 80025ea:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	4833      	ldr	r0, [pc, #204]	@ (80026cc <MX_GPIO_Init+0x310>)
 8002600:	f001 fb1a 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002604:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002608:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800260a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800260e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	482d      	ldr	r0, [pc, #180]	@ (80026d0 <MX_GPIO_Init+0x314>)
 800261c:	f001 fb0c 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002620:	f243 0381 	movw	r3, #12417	@ 0x3081
 8002624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002626:	2301      	movs	r3, #1
 8002628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4825      	ldr	r0, [pc, #148]	@ (80026d0 <MX_GPIO_Init+0x314>)
 800263a:	f001 fafd 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800263e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	481f      	ldr	r0, [pc, #124]	@ (80026d4 <MX_GPIO_Init+0x318>)
 8002658:	f001 faee 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_GPIO1_EXTI7_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin;
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002660:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VL53L0X_GPIO1_EXTI7_GPIO_Port, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4818      	ldr	r0, [pc, #96]	@ (80026d4 <MX_GPIO_Init+0x318>)
 8002672:	f001 fae1 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002676:	2302      	movs	r3, #2
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002686:	2305      	movs	r3, #5
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	480f      	ldr	r0, [pc, #60]	@ (80026d0 <MX_GPIO_Init+0x314>)
 8002692:	f001 fad1 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002696:	2378      	movs	r3, #120	@ 0x78
 8002698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a6:	2307      	movs	r3, #7
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4807      	ldr	r0, [pc, #28]	@ (80026d0 <MX_GPIO_Init+0x314>)
 80026b2:	f001 fac1 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80026b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026bc:	2312      	movs	r3, #18
 80026be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e009      	b.n	80026d8 <MX_GPIO_Init+0x31c>
 80026c4:	40021000 	.word	0x40021000
 80026c8:	48001000 	.word	0x48001000
 80026cc:	48000400 	.word	0x48000400
 80026d0:	48000c00 	.word	0x48000c00
 80026d4:	48000800 	.word	0x48000800
 80026d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026de:	2304      	movs	r3, #4
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	480b      	ldr	r0, [pc, #44]	@ (8002718 <MX_GPIO_Init+0x35c>)
 80026ea:	f001 faa5 	bl	8003c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2105      	movs	r1, #5
 80026f2:	2017      	movs	r0, #23
 80026f4:	f001 f8ff 	bl	80038f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026f8:	2017      	movs	r0, #23
 80026fa:	f001 f918 	bl	800392e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2105      	movs	r1, #5
 8002702:	2028      	movs	r0, #40	@ 0x28
 8002704:	f001 f8f7 	bl	80038f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002708:	2028      	movs	r0, #40	@ 0x28
 800270a:	f001 f910 	bl	800392e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	@ 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	48000400 	.word	0x48000400

0800271c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800272c:	d105      	bne.n	800273a <HAL_GPIO_EXTI_Callback+0x1e>
	  case BUTTON_EXTI13_Pin:
		  osSemaphoreRelease(ScanSemaphoreHandle);
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_GPIO_EXTI_Callback+0x28>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f006 f942 	bl	80089bc <osSemaphoreRelease>
		  break;
 8002738:	e000      	b.n	800273c <HAL_GPIO_EXTI_Callback+0x20>
	  default:
		  break;
 800273a:	bf00      	nop
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200016b0 	.word	0x200016b0

08002748 <StartTaskCompute>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskCompute */
void StartTaskCompute(void *argument)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b0a8      	sub	sp, #160	@ 0xa0
 800274e:	af0e      	add	r7, sp, #56	@ 0x38
 8002750:	6278      	str	r0, [r7, #36]	@ 0x24
  /* USER CODE BEGIN 5 */
	float x, y, x_raw, y_raw, x_lws, y_lws, x_raw_lws, y_raw_lws;
	float distances[3] = {0,0,0};
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	643b      	str	r3, [r7, #64]	@ 0x40
	float distances_raw[3] = {0,0,0};
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
    /* Infinite loop */
    for(;;)
    {
    	if(osSemaphoreAcquire(SendSemaphoreHandle, 0) == osOK){
 8002776:	4b64      	ldr	r3, [pc, #400]	@ (8002908 <StartTaskCompute+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f006 f8cb 	bl	8008918 <osSemaphoreAcquire>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f6      	bne.n	8002776 <StartTaskCompute+0x2e>
			for (int i = 0; i < NUM_DEVICES; i++) {
 8002788:	2300      	movs	r3, #0
 800278a:	667b      	str	r3, [r7, #100]	@ 0x64
 800278c:	e03c      	b.n	8002808 <StartTaskCompute+0xc0>
//				printf("RPi %d: Raw RSSI = %d, Filtered RSSI = %.2f\r\n",
//					   i + 1, tracked_devices[i].current_rssi, tracked_devices[i].filtered_rssi);
				distances[i] = rssi_to_distance((char)i, tracked_devices[i].filtered_rssi);
 800278e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002790:	b2d8      	uxtb	r0, r3
 8002792:	495e      	ldr	r1, [pc, #376]	@ (800290c <StartTaskCompute+0x1c4>)
 8002794:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	3308      	adds	r3, #8
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027aa:	edc7 7a06 	vstr	s15, [r7, #24]
 80027ae:	7e3b      	ldrb	r3, [r7, #24]
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	4619      	mov	r1, r3
 80027b4:	f7ff f9c8 	bl	8001b48 <rssi_to_distance>
 80027b8:	eef0 7a40 	vmov.f32	s15, s0
 80027bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3348      	adds	r3, #72	@ 0x48
 80027c2:	f107 0220 	add.w	r2, r7, #32
 80027c6:	4413      	add	r3, r2
 80027c8:	3b30      	subs	r3, #48	@ 0x30
 80027ca:	edc3 7a00 	vstr	s15, [r3]
				distances_raw[i] =  rssi_to_distance((char)i, tracked_devices[i].current_rssi);
 80027ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d0:	b2d8      	uxtb	r0, r3
 80027d2:	494e      	ldr	r1, [pc, #312]	@ (800290c <StartTaskCompute+0x1c4>)
 80027d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80027d6:	4613      	mov	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	3306      	adds	r3, #6
 80027e2:	f993 3000 	ldrsb.w	r3, [r3]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7ff f9ae 	bl	8001b48 <rssi_to_distance>
 80027ec:	eef0 7a40 	vmov.f32	s15, s0
 80027f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	3348      	adds	r3, #72	@ 0x48
 80027f6:	f107 0220 	add.w	r2, r7, #32
 80027fa:	4413      	add	r3, r2
 80027fc:	3b3c      	subs	r3, #60	@ 0x3c
 80027fe:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < NUM_DEVICES; i++) {
 8002802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002804:	3301      	adds	r3, #1
 8002806:	667b      	str	r3, [r7, #100]	@ 0x64
 8002808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800280a:	2b02      	cmp	r3, #2
 800280c:	ddbf      	ble.n	800278e <StartTaskCompute+0x46>
			}

			// Perform trilateration
			trilaterate_position(distances, &x, &y);
 800280e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002812:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8002816:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fb94 	bl	8001f48 <trilaterate_position>
			trilaterate_position(distances_raw, &x_raw, &y_raw);
 8002820:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002824:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002828:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb8b 	bl	8001f48 <trilaterate_position>
			x_lws = x, y_lws = y;
 8002832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002834:	653b      	str	r3, [r7, #80]	@ 0x50
 8002836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002838:	64fb      	str	r3, [r7, #76]	@ 0x4c
			x_raw_lws = x_raw, y_raw_lws = y_raw;
 800283a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800283c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800283e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002840:	647b      	str	r3, [r7, #68]	@ 0x44
			lws_four(&x_lws, &y_lws, distances, 0.1f);
 8002842:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002846:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800284a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800284e:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002910 <StartTaskCompute+0x1c8>
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff faac 	bl	8001db0 <lws_four>
			lws_four(&x_raw_lws, &y_raw_lws, distances_raw, 0.1f);
 8002858:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800285c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002860:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002864:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8002910 <StartTaskCompute+0x1c8>
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff faa1 	bl	8001db0 <lws_four>
			printf("{\"unfiltered\": [{\"x\": %.2f, \"y\": %.2f}], \"unfiltered_lws\": [{\"x\": %.2f, \"y\": %.2f}], \"filtered\": [{\"x\": %.2f, \"y\": %.2f}], \"filtered_lws\": [{\"x\": %.2f, \"y\": %.2f}]}\n", x_raw, y_raw, x_raw_lws, y_raw_lws, x, y, x_lws, y_lws);
 800286e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe69 	bl	8000548 <__aeabi_f2d>
 8002876:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800287a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe63 	bl	8000548 <__aeabi_f2d>
 8002882:	4682      	mov	sl, r0
 8002884:	468b      	mov	fp, r1
 8002886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe5d 	bl	8000548 <__aeabi_f2d>
 800288e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe57 	bl	8000548 <__aeabi_f2d>
 800289a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800289e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe51 	bl	8000548 <__aeabi_f2d>
 80028a6:	e9c7 0100 	strd	r0, r1, [r7]
 80028aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe4b 	bl	8000548 <__aeabi_f2d>
 80028b2:	4680      	mov	r8, r0
 80028b4:	4689      	mov	r9, r1
 80028b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fe45 	bl	8000548 <__aeabi_f2d>
 80028be:	4604      	mov	r4, r0
 80028c0:	460d      	mov	r5, r1
 80028c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fe3f 	bl	8000548 <__aeabi_f2d>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80028d2:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 80028d6:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80028da:	ed97 7b00 	vldr	d7, [r7]
 80028de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80028e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80028e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80028ea:	ed97 7b04 	vldr	d7, [r7, #16]
 80028ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80028f2:	e9cd ab00 	strd	sl, fp, [sp]
 80028f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028fa:	4806      	ldr	r0, [pc, #24]	@ (8002914 <StartTaskCompute+0x1cc>)
 80028fc:	f00a f888 	bl	800ca10 <iprintf>
			printf("------------------WAIT FOR NEXT SCAN------------------------\r\n");
 8002900:	4805      	ldr	r0, [pc, #20]	@ (8002918 <StartTaskCompute+0x1d0>)
 8002902:	f00a f8ed 	bl	800cae0 <puts>
    	if(osSemaphoreAcquire(SendSemaphoreHandle, 0) == osOK){
 8002906:	e736      	b.n	8002776 <StartTaskCompute+0x2e>
 8002908:	20001704 	.word	0x20001704
 800290c:	20000004 	.word	0x20000004
 8002910:	3dcccccd 	.word	0x3dcccccd
 8002914:	08010bc0 	.word	0x08010bc0
 8002918:	08010c68 	.word	0x08010c68

0800291c <StarTaskBLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarTaskBLE */
void StarTaskBLE(void *argument)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarTaskBLE */
  /* Infinite loop */

  for(;;)
  {
	if(osSemaphoreAcquire(ScanSemaphoreHandle, 10) == osOK){
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <StarTaskBLE+0x24>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	210a      	movs	r1, #10
 800292a:	4618      	mov	r0, r3
 800292c:	f005 fff4 	bl	8008918 <osSemaphoreAcquire>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <StarTaskBLE+0x1e>
		startScan();
 8002936:	f7fe fc13 	bl	8001160 <startScan>
	}
	hci_user_evt_proc();
 800293a:	f005 fcc3 	bl	80082c4 <hci_user_evt_proc>
	if(osSemaphoreAcquire(ScanSemaphoreHandle, 10) == osOK){
 800293e:	e7f1      	b.n	8002924 <StarTaskBLE+0x8>
 8002940:	200016b0 	.word	0x200016b0

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294c:	bf00      	nop
 800294e:	e7fd      	b.n	800294c <Error_Handler+0x8>

08002950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_MspInit+0x4c>)
 8002958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295a:	4a10      	ldr	r2, [pc, #64]	@ (800299c <HAL_MspInit+0x4c>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6613      	str	r3, [r2, #96]	@ 0x60
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_MspInit+0x4c>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_MspInit+0x4c>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <HAL_MspInit+0x4c>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_MspInit+0x4c>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	210f      	movs	r1, #15
 800298a:	f06f 0001 	mvn.w	r0, #1
 800298e:	f000 ffb2 	bl	80038f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0ac      	sub	sp, #176	@ 0xb0
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2288      	movs	r2, #136	@ 0x88
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00a f98f 	bl	800cce4 <memset>
  if(DFSDM1_Init == 0)
 80029c6:	4b25      	ldr	r3, [pc, #148]	@ (8002a5c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d142      	bne.n	8002a54 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80029ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4618      	mov	r0, r3
 80029e0:	f002 fdb6 	bl	8005550 <HAL_RCCEx_PeriphCLKConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80029ea:	f7ff ffab 	bl	8002944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80029fa:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a06:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002a0c:	f043 0310 	orr.w	r3, r3, #16
 8002a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a12:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002a1e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002a22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002a38:	2306      	movs	r3, #6
 8002a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a3e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a42:	4619      	mov	r1, r3
 8002a44:	4807      	ldr	r0, [pc, #28]	@ (8002a64 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002a46:	f001 f8f7 	bl	8003c38 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002a4a:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4a02      	ldr	r2, [pc, #8]	@ (8002a5c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002a52:	6013      	str	r3, [r2, #0]
  }

}
 8002a54:	bf00      	nop
 8002a56:	37b0      	adds	r7, #176	@ 0xb0
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20001758 	.word	0x20001758
 8002a60:	40021000 	.word	0x40021000
 8002a64:	48001000 	.word	0x48001000

08002a68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0ac      	sub	sp, #176	@ 0xb0
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2288      	movs	r2, #136	@ 0x88
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f00a f92b 	bl	800cce4 <memset>
  if(hi2c->Instance==I2C2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a21      	ldr	r2, [pc, #132]	@ (8002b18 <HAL_I2C_MspInit+0xb0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d13b      	bne.n	8002b10 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f002 fd53 	bl	8005550 <HAL_RCCEx_PeriphCLKConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ab0:	f7ff ff48 	bl	8002944 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab4:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_I2C_MspInit+0xb4>)
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab8:	4a18      	ldr	r2, [pc, #96]	@ (8002b1c <HAL_I2C_MspInit+0xb4>)
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ac0:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <HAL_I2C_MspInit+0xb4>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002acc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad4:	2312      	movs	r3, #18
 8002ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002af0:	4619      	mov	r1, r3
 8002af2:	480b      	ldr	r0, [pc, #44]	@ (8002b20 <HAL_I2C_MspInit+0xb8>)
 8002af4:	f001 f8a0 	bl	8003c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_I2C_MspInit+0xb4>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afc:	4a07      	ldr	r2, [pc, #28]	@ (8002b1c <HAL_I2C_MspInit+0xb4>)
 8002afe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_I2C_MspInit+0xb4>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002b10:	bf00      	nop
 8002b12:	37b0      	adds	r7, #176	@ 0xb0
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40005800 	.word	0x40005800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	48000400 	.word	0x48000400

08002b24 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	@ 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a17      	ldr	r2, [pc, #92]	@ (8002ba0 <HAL_QSPI_MspInit+0x7c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d128      	bne.n	8002b98 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002b46:	4b17      	ldr	r3, [pc, #92]	@ (8002ba4 <HAL_QSPI_MspInit+0x80>)
 8002b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <HAL_QSPI_MspInit+0x80>)
 8002b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b50:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b52:	4b14      	ldr	r3, [pc, #80]	@ (8002ba4 <HAL_QSPI_MspInit+0x80>)
 8002b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_QSPI_MspInit+0x80>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	4a10      	ldr	r2, [pc, #64]	@ (8002ba4 <HAL_QSPI_MspInit+0x80>)
 8002b64:	f043 0310 	orr.w	r3, r3, #16
 8002b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <HAL_QSPI_MspInit+0x80>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002b76:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002b7a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b88:	230a      	movs	r3, #10
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	4805      	ldr	r0, [pc, #20]	@ (8002ba8 <HAL_QSPI_MspInit+0x84>)
 8002b94:	f001 f850 	bl	8003c38 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	@ 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	a0001000 	.word	0xa0001000
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48001000 	.word	0x48001000

08002bac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b0ac      	sub	sp, #176	@ 0xb0
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	2288      	movs	r2, #136	@ 0x88
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f00a f889 	bl	800cce4 <memset>
  if(huart->Instance==USART3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	@ (8002c5c <HAL_UART_MspInit+0xb0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d13b      	bne.n	8002c54 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002be0:	2300      	movs	r3, #0
 8002be2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 fcb1 	bl	8005550 <HAL_RCCEx_PeriphCLKConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bf4:	f7ff fea6 	bl	8002944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_UART_MspInit+0xb4>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_UART_MspInit+0xb4>)
 8002bfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <HAL_UART_MspInit+0xb4>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_UART_MspInit+0xb4>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c14:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <HAL_UART_MspInit+0xb4>)
 8002c16:	f043 0308 	orr.w	r3, r3, #8
 8002c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_UART_MspInit+0xb4>)
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002c28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c42:	2307      	movs	r3, #7
 8002c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <HAL_UART_MspInit+0xb8>)
 8002c50:	f000 fff2 	bl	8003c38 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002c54:	bf00      	nop
 8002c56:	37b0      	adds	r7, #176	@ 0xb0
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40004800 	.word	0x40004800
 8002c60:	40021000 	.word	0x40021000
 8002c64:	48000c00 	.word	0x48000c00

08002c68 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0ac      	sub	sp, #176	@ 0xb0
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2288      	movs	r2, #136	@ 0x88
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00a f82b 	bl	800cce4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c96:	d17c      	bne.n	8002d92 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002c9e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ca2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002cae:	2318      	movs	r3, #24
 8002cb0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002cbe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 fc41 	bl	8005550 <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002cd4:	f7ff fe36 	bl	8002944 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd8:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002cf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d0e:	f000 ff93 	bl	8003c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002d12:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d2c:	230a      	movs	r3, #10
 8002d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d3c:	f000 ff7c 	bl	8003c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d40:	4b16      	ldr	r3, [pc, #88]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d44:	4a15      	ldr	r2, [pc, #84]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4c:	4b13      	ldr	r3, [pc, #76]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d58:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d114      	bne.n	8002d8e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	4a0c      	ldr	r2, [pc, #48]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002d7c:	f001 fd1c 	bl	80047b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	4a05      	ldr	r2, [pc, #20]	@ (8002d9c <HAL_PCD_MspInit+0x134>)
 8002d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002d8c:	e001      	b.n	8002d92 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002d8e:	f001 fd13 	bl	80047b8 <HAL_PWREx_EnableVddUSB>
}
 8002d92:	bf00      	nop
 8002d94:	37b0      	adds	r7, #176	@ 0xb0
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <NMI_Handler+0x4>

08002da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <HardFault_Handler+0x4>

08002db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <MemManage_Handler+0x4>

08002db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dda:	f000 fc6d 	bl	80036b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002dde:	f007 fd39 	bl	800a854 <xTaskGetSchedulerState>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d001      	beq.n	8002dec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002de8:	f008 fc2e 	bl	800b648 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002df4:	2020      	movs	r0, #32
 8002df6:	f001 f9ed 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <EXTI9_5_IRQHandler+0x20>)
 8002dfc:	f000 feec 	bl	8003bd8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002e00:	2080      	movs	r0, #128	@ 0x80
 8002e02:	f001 f9e7 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_8);
 8002e06:	4803      	ldr	r0, [pc, #12]	@ (8002e14 <EXTI9_5_IRQHandler+0x24>)
 8002e08:	f000 fee6 	bl	8003bd8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200002ac 	.word	0x200002ac
 8002e14:	2000006c 	.word	0x2000006c

08002e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002e1c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002e20:	f001 f9d8 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002e24:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002e28:	f001 f9d4 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002e2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e30:	f001 f9d0 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002e34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e38:	f001 f9cc 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002e3c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002e40:	f001 f9c8 	bl	80041d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return 1;
 8002e4c:	2301      	movs	r3, #1
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <_kill>:

int _kill(int pid, int sig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e62:	f009 ffa3 	bl	800cdac <__errno>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2216      	movs	r2, #22
 8002e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_exit>:

void _exit (int status)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ffe7 	bl	8002e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e8a:	bf00      	nop
 8002e8c:	e7fd      	b.n	8002e8a <_exit+0x12>

08002e8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e00a      	b.n	8002eb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ea0:	f3af 8000 	nop.w
 8002ea4:	4601      	mov	r1, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	60ba      	str	r2, [r7, #8]
 8002eac:	b2ca      	uxtb	r2, r1
 8002eae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dbf0      	blt.n	8002ea0 <_read+0x12>
  }

  return len;
 8002ebe:	687b      	ldr	r3, [r7, #4]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e009      	b.n	8002eee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	60ba      	str	r2, [r7, #8]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fa28 	bl	8003338 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3301      	adds	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbf1      	blt.n	8002eda <_write+0x12>
  }
  return len;
 8002ef6:	687b      	ldr	r3, [r7, #4]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_close>:

int _close(int file)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f28:	605a      	str	r2, [r3, #4]
  return 0;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <_isatty>:

int _isatty(int file)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f70:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <_sbrk+0x5c>)
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <_sbrk+0x60>)
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f7c:	4b13      	ldr	r3, [pc, #76]	@ (8002fcc <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <_sbrk+0x64>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <_sbrk+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8a:	4b10      	ldr	r3, [pc, #64]	@ (8002fcc <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d207      	bcs.n	8002fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f98:	f009 ff08 	bl	800cdac <__errno>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	220c      	movs	r2, #12
 8002fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e009      	b.n	8002fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa8:	4b08      	ldr	r3, [pc, #32]	@ (8002fcc <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fae:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <_sbrk+0x64>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4a05      	ldr	r2, [pc, #20]	@ (8002fcc <_sbrk+0x64>)
 8002fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20018000 	.word	0x20018000
 8002fc8:	00000400 	.word	0x00000400
 8002fcc:	2000175c 	.word	0x2000175c
 8002fd0:	200035c0 	.word	0x200035c0

08002fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <SystemInit+0x20>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	4a05      	ldr	r2, [pc, #20]	@ (8002ff4 <SystemInit+0x20>)
 8002fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003030 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ffc:	f7ff ffea 	bl	8002fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003000:	480c      	ldr	r0, [pc, #48]	@ (8003034 <LoopForever+0x6>)
  ldr r1, =_edata
 8003002:	490d      	ldr	r1, [pc, #52]	@ (8003038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003004:	4a0d      	ldr	r2, [pc, #52]	@ (800303c <LoopForever+0xe>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003008:	e002      	b.n	8003010 <LoopCopyDataInit>

0800300a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800300c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300e:	3304      	adds	r3, #4

08003010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003014:	d3f9      	bcc.n	800300a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003016:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003018:	4c0a      	ldr	r4, [pc, #40]	@ (8003044 <LoopForever+0x16>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800301c:	e001      	b.n	8003022 <LoopFillZerobss>

0800301e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003020:	3204      	adds	r2, #4

08003022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003024:	d3fb      	bcc.n	800301e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003026:	f009 fec7 	bl	800cdb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800302a:	f7ff f81d 	bl	8002068 <main>

0800302e <LoopForever>:

LoopForever:
    b LoopForever
 800302e:	e7fe      	b.n	800302e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003030:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003038:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800303c:	0801122c 	.word	0x0801122c
  ldr r2, =_sbss
 8003040:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8003044:	200035bc 	.word	0x200035bc

08003048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC1_2_IRQHandler>
	...

0800304c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4a04      	ldr	r2, [pc, #16]	@ (800306c <BSP_LED_Init+0x20>)
 800305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	08010d70 	.word	0x08010d70

08003070 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	4b1c      	ldr	r3, [pc, #112]	@ (80030e8 <LED_USER_GPIO_Init+0x78>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	4a1b      	ldr	r2, [pc, #108]	@ (80030e8 <LED_USER_GPIO_Init+0x78>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <LED_USER_GPIO_Init+0x78>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <LED_USER_GPIO_Init+0x78>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	4a11      	ldr	r2, [pc, #68]	@ (80030e8 <LED_USER_GPIO_Init+0x78>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030aa:	4b0f      	ldr	r3, [pc, #60]	@ (80030e8 <LED_USER_GPIO_Init+0x78>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80030bc:	480b      	ldr	r0, [pc, #44]	@ (80030ec <LED_USER_GPIO_Init+0x7c>)
 80030be:	f001 f871 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80030c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	4619      	mov	r1, r3
 80030da:	4804      	ldr	r0, [pc, #16]	@ (80030ec <LED_USER_GPIO_Init+0x7c>)
 80030dc:	f000 fdac 	bl	8003c38 <HAL_GPIO_Init>

}
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	48000400 	.word	0x48000400

080030f0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	460a      	mov	r2, r1
 80030fa:	71fb      	strb	r3, [r7, #7]
 80030fc:	4613      	mov	r3, r2
 80030fe:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	4a1f      	ldr	r2, [pc, #124]	@ (8003184 <BSP_PB_Init+0x94>)
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800310e:	79bb      	ldrb	r3, [r7, #6]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d132      	bne.n	800317a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4a1b      	ldr	r2, [pc, #108]	@ (8003188 <BSP_PB_Init+0x98>)
 800311a:	441a      	add	r2, r3
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	491b      	ldr	r1, [pc, #108]	@ (800318c <BSP_PB_Init+0x9c>)
 8003120:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 fd42 	bl	8003bb0 <HAL_EXTI_GetHandle>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003132:	f06f 0303 	mvn.w	r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e01f      	b.n	800317a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <BSP_PB_Init+0x98>)
 8003140:	1898      	adds	r0, r3, r2
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <BSP_PB_Init+0xa0>)
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	461a      	mov	r2, r3
 800314c:	2100      	movs	r1, #0
 800314e:	f000 fd15 	bl	8003b7c <HAL_EXTI_RegisterCallback>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003158:	f06f 0303 	mvn.w	r3, #3
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e00c      	b.n	800317a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003160:	2017      	movs	r0, #23
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <BSP_PB_Init+0xa4>)
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	2200      	movs	r2, #0
 800316c:	4619      	mov	r1, r3
 800316e:	f000 fbc2 	bl	80038f6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003172:	2317      	movs	r3, #23
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fbda 	bl	800392e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08010d74 	.word	0x08010d74
 8003188:	2000006c 	.word	0x2000006c
 800318c:	08010d78 	.word	0x08010d78
 8003190:	08010d7c 	.word	0x08010d7c
 8003194:	08010d80 	.word	0x08010d80

08003198 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4a09      	ldr	r2, [pc, #36]	@ (80031cc <BSP_PB_GetState+0x34>)
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 ffdf 	bl	8004174 <HAL_GPIO_ReadPin>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000068 	.word	0x20000068

080031d0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd ffe3 	bl	80011a0 <BSP_PB_Callback>
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e6:	4b19      	ldr	r3, [pc, #100]	@ (800324c <BUTTON_USER_GPIO_Init+0x6c>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ea:	4a18      	ldr	r2, [pc, #96]	@ (800324c <BUTTON_USER_GPIO_Init+0x6c>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f2:	4b16      	ldr	r3, [pc, #88]	@ (800324c <BUTTON_USER_GPIO_Init+0x6c>)
 80031f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fe:	f107 030c 	add.w	r3, r7, #12
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <BUTTON_USER_GPIO_Init+0x6c>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	4a0e      	ldr	r2, [pc, #56]	@ (800324c <BUTTON_USER_GPIO_Init+0x6c>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800321a:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <BUTTON_USER_GPIO_Init+0x6c>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003226:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800322a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800322c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003236:	f107 030c 	add.w	r3, r7, #12
 800323a:	4619      	mov	r1, r3
 800323c:	4804      	ldr	r0, [pc, #16]	@ (8003250 <BUTTON_USER_GPIO_Init+0x70>)
 800323e:	f000 fcfb 	bl	8003c38 <HAL_GPIO_Init>

}
 8003242:	bf00      	nop
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	48000800 	.word	0x48000800

08003254 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d903      	bls.n	8003270 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003268:	f06f 0301 	mvn.w	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e025      	b.n	80032bc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	79fa      	ldrb	r2, [r7, #7]
 8003274:	4914      	ldr	r1, [pc, #80]	@ (80032c8 <BSP_COM_Init+0x74>)
 8003276:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800327a:	4814      	ldr	r0, [pc, #80]	@ (80032cc <BSP_COM_Init+0x78>)
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4403      	add	r3, r0
 8003286:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003288:	79fa      	ldrb	r2, [r7, #7]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4a0e      	ldr	r2, [pc, #56]	@ (80032cc <BSP_COM_Init+0x78>)
 8003294:	4413      	add	r3, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f86a 	bl	8003370 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 800329c:	79fa      	ldrb	r2, [r7, #7]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <BSP_COM_Init+0x78>)
 80032a8:	4413      	add	r3, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f810 	bl	80032d0 <MX_USART1_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80032b6:	f06f 0303 	mvn.w	r3, #3
 80032ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80032bc:	68fb      	ldr	r3, [r7, #12]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000074 	.word	0x20000074
 80032cc:	20001760 	.word	0x20001760

080032d0 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a15      	ldr	r2, [pc, #84]	@ (8003334 <MX_USART1_UART_Init+0x64>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032e8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f003 fa22 	bl	8006764 <HAL_UART_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40013800 	.word	0x40013800

08003338 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003340:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <__io_putchar+0x30>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4a07      	ldr	r2, [pc, #28]	@ (800336c <__io_putchar+0x34>)
 8003350:	1898      	adds	r0, r3, r2
 8003352:	1d39      	adds	r1, r7, #4
 8003354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003358:	2201      	movs	r2, #1
 800335a:	f003 fa51 	bl	8006800 <HAL_UART_Transmit>
  return ch;
 800335e:	687b      	ldr	r3, [r7, #4]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	200017e8 	.word	0x200017e8
 800336c:	20001760 	.word	0x20001760

08003370 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b0ac      	sub	sp, #176	@ 0xb0
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	2288      	movs	r2, #136	@ 0x88
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f009 fcaf 	bl	800cce4 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003386:	2301      	movs	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800338a:	2300      	movs	r3, #0
 800338c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4618      	mov	r0, r3
 8003394:	f002 f8dc 	bl	8005550 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003398:	4b22      	ldr	r3, [pc, #136]	@ (8003424 <USART1_MspInit+0xb4>)
 800339a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339c:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <USART1_MspInit+0xb4>)
 800339e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80033a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003424 <USART1_MspInit+0xb4>)
 80033a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003424 <USART1_MspInit+0xb4>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003424 <USART1_MspInit+0xb4>)
 80033b6:	f043 0302 	orr.w	r3, r3, #2
 80033ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033bc:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <USART1_MspInit+0xb4>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80033c8:	2340      	movs	r3, #64	@ 0x40
 80033ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80033e0:	2307      	movs	r3, #7
 80033e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80033e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033ea:	4619      	mov	r1, r3
 80033ec:	480e      	ldr	r0, [pc, #56]	@ (8003428 <USART1_MspInit+0xb8>)
 80033ee:	f000 fc23 	bl	8003c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800340a:	2307      	movs	r3, #7
 800340c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8003410:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003414:	4619      	mov	r1, r3
 8003416:	4804      	ldr	r0, [pc, #16]	@ (8003428 <USART1_MspInit+0xb8>)
 8003418:	f000 fc0e 	bl	8003c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 800341c:	bf00      	nop
 800341e:	37b0      	adds	r7, #176	@ 0xb0
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	48000400 	.word	0x48000400

0800342c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003436:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <BSP_SPI3_Init+0x54>)
 8003438:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <BSP_SPI3_Init+0x58>)
 800343a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 800343c:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <BSP_SPI3_Init+0x5c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	4911      	ldr	r1, [pc, #68]	@ (8003488 <BSP_SPI3_Init+0x5c>)
 8003444:	600a      	str	r2, [r1, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d114      	bne.n	8003474 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800344a:	480d      	ldr	r0, [pc, #52]	@ (8003480 <BSP_SPI3_Init+0x54>)
 800344c:	f003 f818 	bl	8006480 <HAL_SPI_GetState>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10e      	bne.n	8003474 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003456:	480a      	ldr	r0, [pc, #40]	@ (8003480 <BSP_SPI3_Init+0x54>)
 8003458:	f000 f882 	bl	8003560 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8003462:	4807      	ldr	r0, [pc, #28]	@ (8003480 <BSP_SPI3_Init+0x54>)
 8003464:	f000 f83a 	bl	80034dc <MX_SPI3_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800346e:	f06f 0307 	mvn.w	r3, #7
 8003472:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003474:	687b      	ldr	r3, [r7, #4]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200017ec 	.word	0x200017ec
 8003484:	40003c00 	.word	0x40003c00
 8003488:	20001850 	.word	0x20001850

0800348c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034a4:	9200      	str	r2, [sp, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	4807      	ldr	r0, [pc, #28]	@ (80034c8 <BSP_SPI3_SendRecv+0x3c>)
 80034ac:	f002 fdc9 	bl	8006042 <HAL_SPI_TransmitReceive>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80034b6:	f06f 0305 	mvn.w	r3, #5
 80034ba:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80034bc:	697b      	ldr	r3, [r7, #20]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200017ec 	.word	0x200017ec

080034cc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80034d0:	f000 f906 	bl	80036e0 <HAL_GetTick>
 80034d4:	4603      	mov	r3, r0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <MX_SPI3_Init+0x80>)
 80034ec:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034f4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003502:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003516:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2207      	movs	r2, #7
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2208      	movs	r2, #8
 8003540:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f002 fcd0 	bl	8005ee8 <HAL_SPI_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40003c00 	.word	0x40003c00

08003560 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003568:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <SPI3_MspInit+0xa8>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	4a26      	ldr	r2, [pc, #152]	@ (8003608 <SPI3_MspInit+0xa8>)
 800356e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003572:	6593      	str	r3, [r2, #88]	@ 0x58
 8003574:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <SPI3_MspInit+0xa8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003578:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003580:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <SPI3_MspInit+0xa8>)
 8003582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003584:	4a20      	ldr	r2, [pc, #128]	@ (8003608 <SPI3_MspInit+0xa8>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800358c:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <SPI3_MspInit+0xa8>)
 800358e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a6:	2303      	movs	r3, #3
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80035aa:	2306      	movs	r3, #6
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	4815      	ldr	r0, [pc, #84]	@ (800360c <SPI3_MspInit+0xac>)
 80035b6:	f000 fb3f 	bl	8003c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80035ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c0:	2302      	movs	r3, #2
 80035c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c8:	2303      	movs	r3, #3
 80035ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80035cc:	2306      	movs	r3, #6
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80035d0:	f107 0314 	add.w	r3, r7, #20
 80035d4:	4619      	mov	r1, r3
 80035d6:	480d      	ldr	r0, [pc, #52]	@ (800360c <SPI3_MspInit+0xac>)
 80035d8:	f000 fb2e 	bl	8003c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80035dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e2:	2302      	movs	r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80035ee:	2306      	movs	r3, #6
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4804      	ldr	r0, [pc, #16]	@ (800360c <SPI3_MspInit+0xac>)
 80035fa:	f000 fb1d 	bl	8003c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80035fe:	bf00      	nop
 8003600:	3728      	adds	r7, #40	@ 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	48000800 	.word	0x48000800

08003610 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361a:	2003      	movs	r0, #3
 800361c:	f000 f960 	bl	80038e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003620:	200f      	movs	r0, #15
 8003622:	f000 f80d 	bl	8003640 <HAL_InitTick>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	71fb      	strb	r3, [r7, #7]
 8003630:	e001      	b.n	8003636 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003632:	f7ff f98d 	bl	8002950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003636:	79fb      	ldrb	r3, [r7, #7]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <HAL_InitTick+0x6c>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003654:	4b16      	ldr	r3, [pc, #88]	@ (80036b0 <HAL_InitTick+0x70>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <HAL_InitTick+0x6c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003662:	fbb3 f3f1 	udiv	r3, r3, r1
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f96d 	bl	800394a <HAL_SYSTICK_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d809      	bhi.n	8003690 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800367c:	2200      	movs	r2, #0
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f000 f937 	bl	80038f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003688:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <HAL_InitTick+0x74>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e007      	b.n	80036a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e004      	b.n	80036a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	e001      	b.n	80036a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	2000007c 	.word	0x2000007c
 80036b0:	20000064 	.word	0x20000064
 80036b4:	20000078 	.word	0x20000078

080036b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036bc:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_IncTick+0x20>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_IncTick+0x24>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4413      	add	r3, r2
 80036c8:	4a04      	ldr	r2, [pc, #16]	@ (80036dc <HAL_IncTick+0x24>)
 80036ca:	6013      	str	r3, [r2, #0]
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	2000007c 	.word	0x2000007c
 80036dc:	20001854 	.word	0x20001854

080036e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return uwTick;
 80036e4:	4b03      	ldr	r3, [pc, #12]	@ (80036f4 <HAL_GetTick+0x14>)
 80036e6:	681b      	ldr	r3, [r3, #0]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20001854 	.word	0x20001854

080036f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7ff ffee 	bl	80036e0 <HAL_GetTick>
 8003704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d005      	beq.n	800371e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003712:	4b0a      	ldr	r3, [pc, #40]	@ (800373c <HAL_Delay+0x44>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800371e:	bf00      	nop
 8003720:	f7ff ffde 	bl	80036e0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	429a      	cmp	r2, r3
 800372e:	d8f7      	bhi.n	8003720 <HAL_Delay+0x28>
  {
  }
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2000007c 	.word	0x2000007c

08003740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003750:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800375c:	4013      	ands	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003772:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	60d3      	str	r3, [r2, #12]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800378c:	4b04      	ldr	r3, [pc, #16]	@ (80037a0 <__NVIC_GetPriorityGrouping+0x18>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 0307 	and.w	r3, r3, #7
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	db0b      	blt.n	80037ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	4907      	ldr	r1, [pc, #28]	@ (80037dc <__NVIC_EnableIRQ+0x38>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2001      	movs	r0, #1
 80037c6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000e100 	.word	0xe000e100

080037e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	db0a      	blt.n	800380a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	490c      	ldr	r1, [pc, #48]	@ (800382c <__NVIC_SetPriority+0x4c>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	440b      	add	r3, r1
 8003804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003808:	e00a      	b.n	8003820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4908      	ldr	r1, [pc, #32]	@ (8003830 <__NVIC_SetPriority+0x50>)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	3b04      	subs	r3, #4
 8003818:	0112      	lsls	r2, r2, #4
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	440b      	add	r3, r1
 800381e:	761a      	strb	r2, [r3, #24]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000e100 	.word	0xe000e100
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	@ 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f1c3 0307 	rsb	r3, r3, #7
 800384e:	2b04      	cmp	r3, #4
 8003850:	bf28      	it	cs
 8003852:	2304      	movcs	r3, #4
 8003854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3304      	adds	r3, #4
 800385a:	2b06      	cmp	r3, #6
 800385c:	d902      	bls.n	8003864 <NVIC_EncodePriority+0x30>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3b03      	subs	r3, #3
 8003862:	e000      	b.n	8003866 <NVIC_EncodePriority+0x32>
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	f04f 32ff 	mov.w	r2, #4294967295
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	401a      	ands	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800387c:	f04f 31ff 	mov.w	r1, #4294967295
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	43d9      	mvns	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	4313      	orrs	r3, r2
         );
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	@ 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ac:	d301      	bcc.n	80038b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00f      	b.n	80038d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b2:	4a0a      	ldr	r2, [pc, #40]	@ (80038dc <SysTick_Config+0x40>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ba:	210f      	movs	r1, #15
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	f7ff ff8e 	bl	80037e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <SysTick_Config+0x40>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ca:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <SysTick_Config+0x40>)
 80038cc:	2207      	movs	r2, #7
 80038ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	e000e010 	.word	0xe000e010

080038e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ff29 	bl	8003740 <__NVIC_SetPriorityGrouping>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003908:	f7ff ff3e 	bl	8003788 <__NVIC_GetPriorityGrouping>
 800390c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	6978      	ldr	r0, [r7, #20]
 8003914:	f7ff ff8e 	bl	8003834 <NVIC_EncodePriority>
 8003918:	4602      	mov	r2, r0
 800391a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff5d 	bl	80037e0 <__NVIC_SetPriority>
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff31 	bl	80037a4 <__NVIC_EnableIRQ>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ffa2 	bl	800389c <SysTick_Config>
 8003958:	4603      	mov	r3, r0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0ac      	b.n	8003ad0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f8b2 	bl	8003ae4 <DFSDM_GetChannelFromInstance>
 8003980:	4603      	mov	r3, r0
 8003982:	4a55      	ldr	r2, [pc, #340]	@ (8003ad8 <HAL_DFSDM_ChannelInit+0x174>)
 8003984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e09f      	b.n	8003ad0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff f805 	bl	80029a0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003996:	4b51      	ldr	r3, [pc, #324]	@ (8003adc <HAL_DFSDM_ChannelInit+0x178>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3301      	adds	r3, #1
 800399c:	4a4f      	ldr	r2, [pc, #316]	@ (8003adc <HAL_DFSDM_ChannelInit+0x178>)
 800399e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80039a0:	4b4e      	ldr	r3, [pc, #312]	@ (8003adc <HAL_DFSDM_ChannelInit+0x178>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d125      	bne.n	80039f4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80039a8:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a4c      	ldr	r2, [pc, #304]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039b2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80039b4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4948      	ldr	r1, [pc, #288]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80039c2:	4b47      	ldr	r3, [pc, #284]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a46      	ldr	r2, [pc, #280]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039c8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80039cc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	791b      	ldrb	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d108      	bne.n	80039e8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80039d6:	4b42      	ldr	r3, [pc, #264]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	493f      	ldr	r1, [pc, #252]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80039e8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae0 <HAL_DFSDM_ChannelInit+0x17c>)
 80039ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039f2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003a02:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a12:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a18:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 020f 	bic.w	r2, r2, #15
 8003a30:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003a58:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f002 0207 	and.w	r2, r2, #7
 8003a84:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f810 	bl	8003ae4 <DFSDM_GetChannelFromInstance>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <HAL_DFSDM_ChannelInit+0x174>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	2000185c 	.word	0x2000185c
 8003adc:	20001858 	.word	0x20001858
 8003ae0:	40016000 	.word	0x40016000

08003ae4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <DFSDM_GetChannelFromInstance+0x7c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d102      	bne.n	8003afa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e02b      	b.n	8003b52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a19      	ldr	r2, [pc, #100]	@ (8003b64 <DFSDM_GetChannelFromInstance+0x80>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d102      	bne.n	8003b08 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e024      	b.n	8003b52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <DFSDM_GetChannelFromInstance+0x84>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d102      	bne.n	8003b16 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003b10:	2302      	movs	r3, #2
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e01d      	b.n	8003b52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <DFSDM_GetChannelFromInstance+0x88>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d102      	bne.n	8003b24 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e016      	b.n	8003b52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <DFSDM_GetChannelFromInstance+0x8c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d102      	bne.n	8003b32 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003b2c:	2305      	movs	r3, #5
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e00f      	b.n	8003b52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a0f      	ldr	r2, [pc, #60]	@ (8003b74 <DFSDM_GetChannelFromInstance+0x90>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d102      	bne.n	8003b40 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003b3a:	2306      	movs	r3, #6
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e008      	b.n	8003b52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0d      	ldr	r2, [pc, #52]	@ (8003b78 <DFSDM_GetChannelFromInstance+0x94>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d102      	bne.n	8003b4e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003b48:	2307      	movs	r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	e001      	b.n	8003b52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40016000 	.word	0x40016000
 8003b64:	40016020 	.word	0x40016020
 8003b68:	40016040 	.word	0x40016040
 8003b6c:	40016080 	.word	0x40016080
 8003b70:	400160a0 	.word	0x400160a0
 8003b74:	400160c0 	.word	0x400160c0
 8003b78:	400160e0 	.word	0x400160e0

08003b7c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	460b      	mov	r3, r1
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	605a      	str	r2, [r3, #4]
      break;
 8003b9a:	e002      	b.n	8003ba2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba0:	bf00      	nop
  }

  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e003      	b.n	8003bcc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <HAL_EXTI_IRQHandler+0x5c>)
 8003c02:	4413      	add	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4798      	blx	r3
    }
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40010414 	.word	0x40010414

08003c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c46:	e17f      	b.n	8003f48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8171 	beq.w	8003f42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d005      	beq.n	8003c78 <HAL_GPIO_Init+0x40>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d130      	bne.n	8003cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cae:	2201      	movs	r2, #1
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0201 	and.w	r2, r3, #1
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d118      	bne.n	8003d18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cec:	2201      	movs	r2, #1
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	f003 0201 	and.w	r2, r3, #1
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d017      	beq.n	8003d54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d123      	bne.n	8003da8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3208      	adds	r2, #8
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	08da      	lsrs	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3208      	adds	r2, #8
 8003da2:	6939      	ldr	r1, [r7, #16]
 8003da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80ac 	beq.w	8003f42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dea:	4b5f      	ldr	r3, [pc, #380]	@ (8003f68 <HAL_GPIO_Init+0x330>)
 8003dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dee:	4a5e      	ldr	r2, [pc, #376]	@ (8003f68 <HAL_GPIO_Init+0x330>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003df6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f68 <HAL_GPIO_Init+0x330>)
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e02:	4a5a      	ldr	r2, [pc, #360]	@ (8003f6c <HAL_GPIO_Init+0x334>)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e2c:	d025      	beq.n	8003e7a <HAL_GPIO_Init+0x242>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4f      	ldr	r2, [pc, #316]	@ (8003f70 <HAL_GPIO_Init+0x338>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01f      	beq.n	8003e76 <HAL_GPIO_Init+0x23e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4e      	ldr	r2, [pc, #312]	@ (8003f74 <HAL_GPIO_Init+0x33c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d019      	beq.n	8003e72 <HAL_GPIO_Init+0x23a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4d      	ldr	r2, [pc, #308]	@ (8003f78 <HAL_GPIO_Init+0x340>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_GPIO_Init+0x236>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4c      	ldr	r2, [pc, #304]	@ (8003f7c <HAL_GPIO_Init+0x344>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00d      	beq.n	8003e6a <HAL_GPIO_Init+0x232>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4b      	ldr	r2, [pc, #300]	@ (8003f80 <HAL_GPIO_Init+0x348>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <HAL_GPIO_Init+0x22e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4a      	ldr	r2, [pc, #296]	@ (8003f84 <HAL_GPIO_Init+0x34c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <HAL_GPIO_Init+0x22a>
 8003e5e:	2306      	movs	r3, #6
 8003e60:	e00c      	b.n	8003e7c <HAL_GPIO_Init+0x244>
 8003e62:	2307      	movs	r3, #7
 8003e64:	e00a      	b.n	8003e7c <HAL_GPIO_Init+0x244>
 8003e66:	2305      	movs	r3, #5
 8003e68:	e008      	b.n	8003e7c <HAL_GPIO_Init+0x244>
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	e006      	b.n	8003e7c <HAL_GPIO_Init+0x244>
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e004      	b.n	8003e7c <HAL_GPIO_Init+0x244>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e002      	b.n	8003e7c <HAL_GPIO_Init+0x244>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_GPIO_Init+0x244>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	f002 0203 	and.w	r2, r2, #3
 8003e82:	0092      	lsls	r2, r2, #2
 8003e84:	4093      	lsls	r3, r2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e8c:	4937      	ldr	r1, [pc, #220]	@ (8003f6c <HAL_GPIO_Init+0x334>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3302      	adds	r3, #2
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ebe:	4a32      	ldr	r2, [pc, #200]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ec4:	4b30      	ldr	r3, [pc, #192]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ee8:	4a27      	ldr	r2, [pc, #156]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003eee:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f12:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f18:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f3c:	4a12      	ldr	r2, [pc, #72]	@ (8003f88 <HAL_GPIO_Init+0x350>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	3301      	adds	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f47f ae78 	bne.w	8003c48 <HAL_GPIO_Init+0x10>
  }
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	48000400 	.word	0x48000400
 8003f74:	48000800 	.word	0x48000800
 8003f78:	48000c00 	.word	0x48000c00
 8003f7c:	48001000 	.word	0x48001000
 8003f80:	48001400 	.word	0x48001400
 8003f84:	48001800 	.word	0x48001800
 8003f88:	40010400 	.word	0x40010400

08003f8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f9a:	e0cd      	b.n	8004138 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80c0 	beq.w	8004132 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003fb2:	4a68      	ldr	r2, [pc, #416]	@ (8004154 <HAL_GPIO_DeInit+0x1c8>)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	220f      	movs	r2, #15
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fda:	d025      	beq.n	8004028 <HAL_GPIO_DeInit+0x9c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a5e      	ldr	r2, [pc, #376]	@ (8004158 <HAL_GPIO_DeInit+0x1cc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01f      	beq.n	8004024 <HAL_GPIO_DeInit+0x98>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a5d      	ldr	r2, [pc, #372]	@ (800415c <HAL_GPIO_DeInit+0x1d0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d019      	beq.n	8004020 <HAL_GPIO_DeInit+0x94>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a5c      	ldr	r2, [pc, #368]	@ (8004160 <HAL_GPIO_DeInit+0x1d4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_GPIO_DeInit+0x90>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8004164 <HAL_GPIO_DeInit+0x1d8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00d      	beq.n	8004018 <HAL_GPIO_DeInit+0x8c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8004168 <HAL_GPIO_DeInit+0x1dc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <HAL_GPIO_DeInit+0x88>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a59      	ldr	r2, [pc, #356]	@ (800416c <HAL_GPIO_DeInit+0x1e0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_GPIO_DeInit+0x84>
 800400c:	2306      	movs	r3, #6
 800400e:	e00c      	b.n	800402a <HAL_GPIO_DeInit+0x9e>
 8004010:	2307      	movs	r3, #7
 8004012:	e00a      	b.n	800402a <HAL_GPIO_DeInit+0x9e>
 8004014:	2305      	movs	r3, #5
 8004016:	e008      	b.n	800402a <HAL_GPIO_DeInit+0x9e>
 8004018:	2304      	movs	r3, #4
 800401a:	e006      	b.n	800402a <HAL_GPIO_DeInit+0x9e>
 800401c:	2303      	movs	r3, #3
 800401e:	e004      	b.n	800402a <HAL_GPIO_DeInit+0x9e>
 8004020:	2302      	movs	r3, #2
 8004022:	e002      	b.n	800402a <HAL_GPIO_DeInit+0x9e>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <HAL_GPIO_DeInit+0x9e>
 8004028:	2300      	movs	r3, #0
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	f002 0203 	and.w	r2, r2, #3
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	4093      	lsls	r3, r2
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	429a      	cmp	r2, r3
 8004038:	d132      	bne.n	80040a0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800403a:	4b4d      	ldr	r3, [pc, #308]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	494b      	ldr	r1, [pc, #300]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 8004044:	4013      	ands	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004048:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	43db      	mvns	r3, r3
 8004050:	4947      	ldr	r1, [pc, #284]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 8004052:	4013      	ands	r3, r2
 8004054:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004056:	4b46      	ldr	r3, [pc, #280]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	43db      	mvns	r3, r3
 800405e:	4944      	ldr	r1, [pc, #272]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 8004060:	4013      	ands	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004064:	4b42      	ldr	r3, [pc, #264]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	4940      	ldr	r1, [pc, #256]	@ (8004170 <HAL_GPIO_DeInit+0x1e4>)
 800406e:	4013      	ands	r3, r2
 8004070:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004082:	4a34      	ldr	r2, [pc, #208]	@ (8004154 <HAL_GPIO_DeInit+0x1c8>)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	3302      	adds	r3, #2
 800408a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43da      	mvns	r2, r3
 8004092:	4830      	ldr	r0, [pc, #192]	@ (8004154 <HAL_GPIO_DeInit+0x1c8>)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	400a      	ands	r2, r1
 800409a:	3302      	adds	r3, #2
 800409c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	2103      	movs	r1, #3
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	08d2      	lsrs	r2, r2, #3
 80040d4:	4019      	ands	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3208      	adds	r2, #8
 80040da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2103      	movs	r1, #3
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	2101      	movs	r1, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2103      	movs	r1, #3
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	401a      	ands	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004122:	2101      	movs	r1, #1
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa01 f303 	lsl.w	r3, r1, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	401a      	ands	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	f47f af2b 	bne.w	8003f9c <HAL_GPIO_DeInit+0x10>
  }
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40010000 	.word	0x40010000
 8004158:	48000400 	.word	0x48000400
 800415c:	48000800 	.word	0x48000800
 8004160:	48000c00 	.word	0x48000c00
 8004164:	48001000 	.word	0x48001000
 8004168:	48001400 	.word	0x48001400
 800416c:	48001800 	.word	0x48001800
 8004170:	40010400 	.word	0x40010400

08004174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e001      	b.n	8004196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
 80041b0:	4613      	mov	r3, r2
 80041b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041c0:	e002      	b.n	80041c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041de:	4b08      	ldr	r3, [pc, #32]	@ (8004200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ea:	4a05      	ldr	r2, [pc, #20]	@ (8004200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fa92 	bl	800271c <HAL_GPIO_EXTI_Callback>
  }
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40010400 	.word	0x40010400

08004204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e08d      	b.n	8004332 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fe fc1c 	bl	8002a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2224      	movs	r2, #36	@ 0x24
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d107      	bne.n	800427e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	e006      	b.n	800428c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800428a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d108      	bne.n	80042a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	e007      	b.n	80042b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69d9      	ldr	r1, [r3, #28]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	d138      	bne.n	80043c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800435a:	2302      	movs	r3, #2
 800435c:	e032      	b.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2224      	movs	r2, #36	@ 0x24
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800438c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d139      	bne.n	800445a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e033      	b.n	800445c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	@ 0x24
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af02      	add	r7, sp, #8
 800446e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e101      	b.n	800467e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fe fbea 	bl	8002c68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2203      	movs	r2, #3
 8004498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f002 ff34 	bl	8007314 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	7c1a      	ldrb	r2, [r3, #16]
 80044b4:	f88d 2000 	strb.w	r2, [sp]
 80044b8:	3304      	adds	r3, #4
 80044ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044bc:	f002 fefd 	bl	80072ba <USB_CoreInit>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0d5      	b.n	800467e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f002 ff2c 	bl	8007336 <USB_SetCurrentMode>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0c6      	b.n	800467e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e04a      	b.n	800458c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	3315      	adds	r3, #21
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	3314      	adds	r3, #20
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	b298      	uxth	r0, r3
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	332e      	adds	r3, #46	@ 0x2e
 8004532:	4602      	mov	r2, r0
 8004534:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3318      	adds	r3, #24
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800454a:	7bfa      	ldrb	r2, [r7, #15]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	331c      	adds	r3, #28
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3320      	adds	r3, #32
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3324      	adds	r3, #36	@ 0x24
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3301      	adds	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	791b      	ldrb	r3, [r3, #4]
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	429a      	cmp	r2, r3
 8004594:	d3af      	bcc.n	80044f6 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
 800459a:	e044      	b.n	8004626 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045de:	7bfa      	ldrb	r2, [r7, #15]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045f4:	7bfa      	ldrb	r2, [r7, #15]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	3301      	adds	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	791b      	ldrb	r3, [r3, #4]
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	429a      	cmp	r2, r3
 800462e:	d3b5      	bcc.n	800459c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	7c1a      	ldrb	r2, [r3, #16]
 8004638:	f88d 2000 	strb.w	r2, [sp]
 800463c:	3304      	adds	r3, #4
 800463e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004640:	f002 fec6 	bl	80073d0 <USB_DevInit>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e013      	b.n	800467e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	7b1b      	ldrb	r3, [r3, #12]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d102      	bne.n	8004672 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f80a 	bl	8004686 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f003 f86b 	bl	8007752 <USB_DevDisconnect>

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	f043 0303 	orr.w	r3, r3, #3
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d4:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a04      	ldr	r2, [pc, #16]	@ (80046ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40007000 	.word	0x40007000

080046f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046f4:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <HAL_PWREx_GetVoltageRange+0x18>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40007000 	.word	0x40007000

0800470c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471a:	d130      	bne.n	800477e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800471c:	4b23      	ldr	r3, [pc, #140]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004728:	d038      	beq.n	800479c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800472a:	4b20      	ldr	r3, [pc, #128]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004732:	4a1e      	ldr	r2, [pc, #120]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004734:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800473a:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2232      	movs	r2, #50	@ 0x32
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	4a1b      	ldr	r2, [pc, #108]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0c9b      	lsrs	r3, r3, #18
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004750:	e002      	b.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3b01      	subs	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004758:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004764:	d102      	bne.n	800476c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f2      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476c:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004778:	d110      	bne.n	800479c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00f      	b.n	800479e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478a:	d007      	beq.n	800479c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004794:	4a05      	ldr	r2, [pc, #20]	@ (80047ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40007000 	.word	0x40007000
 80047b0:	20000064 	.word	0x20000064
 80047b4:	431bde83 	.word	0x431bde83

080047b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a04      	ldr	r2, [pc, #16]	@ (80047d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047c6:	6053      	str	r3, [r2, #4]
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40007000 	.word	0x40007000

080047d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80047e0:	f7fe ff7e 	bl	80036e0 <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e063      	b.n	80048b8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10b      	bne.n	8004814 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fe f98d 	bl	8002b24 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800480a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f858 	bl	80048c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	3b01      	subs	r3, #1
 8004824:	021a      	lsls	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	2120      	movs	r1, #32
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f850 	bl	80048e0 <QSPI_WaitFlagStateUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004844:	7afb      	ldrb	r3, [r7, #11]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d131      	bne.n	80048ae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004854:	f023 0310 	bic.w	r3, r3, #16
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6852      	ldr	r2, [r2, #4]
 800485c:	0611      	lsls	r1, r2, #24
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	430b      	orrs	r3, r1
 800486a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <HAL_QSPI_Init+0xe8>)
 8004874:	4013      	ands	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6912      	ldr	r2, [r2, #16]
 800487a:	0411      	lsls	r1, r2, #16
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6952      	ldr	r2, [r2, #20]
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6992      	ldr	r2, [r2, #24]
 8004886:	4311      	orrs	r1, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	430b      	orrs	r3, r1
 800488e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80048b6:	7afb      	ldrb	r3, [r7, #11]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	ffe0f8fe 	.word	0xffe0f8fe

080048c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80048f0:	e01a      	b.n	8004928 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d016      	beq.n	8004928 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fe fef1 	bl	80036e0 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2204      	movs	r2, #4
 8004914:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e00e      	b.n	8004946 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	bf14      	ite	ne
 8004936:	2301      	movne	r3, #1
 8004938:	2300      	moveq	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d1d6      	bne.n	80048f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e3ca      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004962:	4b97      	ldr	r3, [pc, #604]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496c:	4b94      	ldr	r3, [pc, #592]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80e4 	beq.w	8004b4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_RCC_OscConfig+0x4a>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	f040 808b 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b01      	cmp	r3, #1
 8004996:	f040 8087 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800499a:	4b89      	ldr	r3, [pc, #548]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_RCC_OscConfig+0x62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e3a2      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	4b82      	ldr	r3, [pc, #520]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <HAL_RCC_OscConfig+0x7c>
 80049c2:	4b7f      	ldr	r3, [pc, #508]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ca:	e005      	b.n	80049d8 <HAL_RCC_OscConfig+0x88>
 80049cc:	4b7c      	ldr	r3, [pc, #496]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d8:	4293      	cmp	r3, r2
 80049da:	d223      	bcs.n	8004a24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fd55 	bl	8005490 <RCC_SetFlashLatencyFromMSIRange>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e383      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f0:	4b73      	ldr	r3, [pc, #460]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a72      	ldr	r2, [pc, #456]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049f6:	f043 0308 	orr.w	r3, r3, #8
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	4b70      	ldr	r3, [pc, #448]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	496d      	ldr	r1, [pc, #436]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	4968      	ldr	r1, [pc, #416]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
 8004a22:	e025      	b.n	8004a70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a24:	4b66      	ldr	r3, [pc, #408]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a65      	ldr	r2, [pc, #404]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a2a:	f043 0308 	orr.w	r3, r3, #8
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4b63      	ldr	r3, [pc, #396]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4960      	ldr	r1, [pc, #384]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a42:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	495b      	ldr	r1, [pc, #364]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fd15 	bl	8005490 <RCC_SetFlashLatencyFromMSIRange>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e343      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a70:	f000 fc4a 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b52      	ldr	r3, [pc, #328]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	4950      	ldr	r1, [pc, #320]	@ (8004bc4 <HAL_RCC_OscConfig+0x274>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8004bc8 <HAL_RCC_OscConfig+0x278>)
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a90:	4b4e      	ldr	r3, [pc, #312]	@ (8004bcc <HAL_RCC_OscConfig+0x27c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe fdd3 	bl	8003640 <HAL_InitTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d052      	beq.n	8004b4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	e327      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d032      	beq.n	8004b16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ab0:	4b43      	ldr	r3, [pc, #268]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a42      	ldr	r2, [pc, #264]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004abc:	f7fe fe10 	bl	80036e0 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac4:	f7fe fe0c 	bl	80036e0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e310      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a36      	ldr	r2, [pc, #216]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b34      	ldr	r3, [pc, #208]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	4931      	ldr	r1, [pc, #196]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b00:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	492c      	ldr	r1, [pc, #176]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
 8004b14:	e01a      	b.n	8004b4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b16:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a29      	ldr	r2, [pc, #164]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b22:	f7fe fddd 	bl	80036e0 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b2a:	f7fe fdd9 	bl	80036e0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e2dd      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b3c:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1da>
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d074      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCC_OscConfig+0x21a>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d10e      	bne.n	8004b82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d10b      	bne.n	8004b82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6a:	4b15      	ldr	r3, [pc, #84]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d064      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2f0>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d160      	bne.n	8004c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e2ba      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x24a>
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	e026      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba2:	d115      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x280>
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a05      	ldr	r2, [pc, #20]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004baa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a02      	ldr	r2, [pc, #8]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e014      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	08010d28 	.word	0x08010d28
 8004bc8:	20000064 	.word	0x20000064
 8004bcc:	20000078 	.word	0x20000078
 8004bd0:	4ba0      	ldr	r3, [pc, #640]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a9f      	ldr	r2, [pc, #636]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b9d      	ldr	r3, [pc, #628]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a9c      	ldr	r2, [pc, #624]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fd76 	bl	80036e0 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fe fd72 	bl	80036e0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	@ 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e276      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c0a:	4b92      	ldr	r3, [pc, #584]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2a8>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe fd62 	bl	80036e0 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fe fd5e 	bl	80036e0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e262      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c32:	4b88      	ldr	r3, [pc, #544]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2d0>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d060      	beq.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_OscConfig+0x310>
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d116      	bne.n	8004c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c60:	4b7c      	ldr	r3, [pc, #496]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_OscConfig+0x328>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e23f      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c78:	4b76      	ldr	r3, [pc, #472]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	4973      	ldr	r1, [pc, #460]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c8c:	e040      	b.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d023      	beq.n	8004cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c96:	4b6f      	ldr	r3, [pc, #444]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fe fd1d 	bl	80036e0 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004caa:	f7fe fd19 	bl	80036e0 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e21d      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbc:	4b65      	ldr	r3, [pc, #404]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc8:	4b62      	ldr	r3, [pc, #392]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	495f      	ldr	r1, [pc, #380]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
 8004cdc:	e018      	b.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cde:	4b5d      	ldr	r3, [pc, #372]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fe fcf9 	bl	80036e0 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fe fcf5 	bl	80036e0 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e1f9      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d24:	4b4b      	ldr	r3, [pc, #300]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fe fcd4 	bl	80036e0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7fe fcd0 	bl	80036e0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1d4      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ef      	beq.n	8004d3c <HAL_RCC_OscConfig+0x3ec>
 8004d5c:	e01b      	b.n	8004d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d64:	4a3b      	ldr	r2, [pc, #236]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fe fcb7 	bl	80036e0 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fe fcb3 	bl	80036e0 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1b7      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d88:	4b32      	ldr	r3, [pc, #200]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ef      	bne.n	8004d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80a6 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004da8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	4a26      	ldr	r2, [pc, #152]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc0:	4b24      	ldr	r3, [pc, #144]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd0:	4b21      	ldr	r3, [pc, #132]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d118      	bne.n	8004e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de8:	f7fe fc7a 	bl	80036e0 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df0:	f7fe fc76 	bl	80036e0 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e17a      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e02:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d108      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4d8>
 8004e16:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e26:	e029      	b.n	8004e7c <HAL_RCC_OscConfig+0x52c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	d115      	bne.n	8004e5c <HAL_RCC_OscConfig+0x50c>
 8004e30:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e36:	4a07      	ldr	r2, [pc, #28]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e40:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	4a03      	ldr	r2, [pc, #12]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e50:	e014      	b.n	8004e7c <HAL_RCC_OscConfig+0x52c>
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	4b9c      	ldr	r3, [pc, #624]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	4a9b      	ldr	r2, [pc, #620]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e6c:	4b98      	ldr	r3, [pc, #608]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	4a97      	ldr	r2, [pc, #604]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fe fc2c 	bl	80036e0 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fe fc28 	bl	80036e0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e12a      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ed      	beq.n	8004e8c <HAL_RCC_OscConfig+0x53c>
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fe fc15 	bl	80036e0 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fe fc11 	bl	80036e0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e113      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ed      	bne.n	8004eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ede:	7ffb      	ldrb	r3, [r7, #31]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee4:	4b7a      	ldr	r3, [pc, #488]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	4a79      	ldr	r2, [pc, #484]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80fe 	beq.w	80050f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f040 80d0 	bne.w	80050a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f04:	4b72      	ldr	r3, [pc, #456]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0203 	and.w	r2, r3, #3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d130      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	3b01      	subs	r3, #1
 8004f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d127      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d11f      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f44:	2a07      	cmp	r2, #7
 8004f46:	bf14      	ite	ne
 8004f48:	2201      	movne	r2, #1
 8004f4a:	2200      	moveq	r2, #0
 8004f4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d113      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	3b01      	subs	r3, #1
 8004f74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d06e      	beq.n	8005058 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d069      	beq.n	8005054 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f80:	4b53      	ldr	r3, [pc, #332]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f8c:	4b50      	ldr	r3, [pc, #320]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0ad      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fa8:	f7fe fb9a 	bl	80036e0 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe fb96 	bl	80036e0 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e09a      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc2:	4b43      	ldr	r3, [pc, #268]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fce:	4b40      	ldr	r3, [pc, #256]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	4b40      	ldr	r3, [pc, #256]	@ (80050d4 <HAL_RCC_OscConfig+0x784>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	0112      	lsls	r2, r2, #4
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fe8:	0212      	lsls	r2, r2, #8
 8004fea:	4311      	orrs	r1, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ff0:	0852      	lsrs	r2, r2, #1
 8004ff2:	3a01      	subs	r2, #1
 8004ff4:	0552      	lsls	r2, r2, #21
 8004ff6:	4311      	orrs	r1, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ffc:	0852      	lsrs	r2, r2, #1
 8004ffe:	3a01      	subs	r2, #1
 8005000:	0652      	lsls	r2, r2, #25
 8005002:	4311      	orrs	r1, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005008:	0912      	lsrs	r2, r2, #4
 800500a:	0452      	lsls	r2, r2, #17
 800500c:	430a      	orrs	r2, r1
 800500e:	4930      	ldr	r1, [pc, #192]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005010:	4313      	orrs	r3, r2
 8005012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005014:	4b2e      	ldr	r3, [pc, #184]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 800501a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800502a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800502c:	f7fe fb58 	bl	80036e0 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005034:	f7fe fb54 	bl	80036e0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e058      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005052:	e050      	b.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04f      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005058:	4b1d      	ldr	r3, [pc, #116]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d148      	bne.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005064:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a19      	ldr	r2, [pc, #100]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005070:	4b17      	ldr	r3, [pc, #92]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800507c:	f7fe fb30 	bl	80036e0 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fe fb2c 	bl	80036e0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e030      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	4b0e      	ldr	r3, [pc, #56]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x734>
 80050a2:	e028      	b.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d023      	beq.n	80050f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 80050b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fe fb13 	bl	80036e0 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050bc:	e00c      	b.n	80050d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050be:	f7fe fb0f 	bl	80036e0 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d905      	bls.n	80050d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e013      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
 80050d0:	40021000 	.word	0x40021000
 80050d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d8:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <HAL_RCC_OscConfig+0x7b0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ec      	bne.n	80050be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050e4:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_RCC_OscConfig+0x7b0>)
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	4905      	ldr	r1, [pc, #20]	@ (8005100 <HAL_RCC_OscConfig+0x7b0>)
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_RCC_OscConfig+0x7b4>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	60cb      	str	r3, [r1, #12]
 80050f0:	e001      	b.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40021000 	.word	0x40021000
 8005104:	feeefffc 	.word	0xfeeefffc

08005108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0e7      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800511c:	4b75      	ldr	r3, [pc, #468]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d910      	bls.n	800514c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b72      	ldr	r3, [pc, #456]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 0207 	bic.w	r2, r3, #7
 8005132:	4970      	ldr	r1, [pc, #448]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b6e      	ldr	r3, [pc, #440]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0cf      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	4b66      	ldr	r3, [pc, #408]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005164:	429a      	cmp	r2, r3
 8005166:	d908      	bls.n	800517a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005168:	4b63      	ldr	r3, [pc, #396]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4960      	ldr	r1, [pc, #384]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d04c      	beq.n	8005220 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d107      	bne.n	800519e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518e:	4b5a      	ldr	r3, [pc, #360]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d121      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0a6      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a6:	4b54      	ldr	r3, [pc, #336]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d115      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e09a      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d107      	bne.n	80051ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051be:	4b4e      	ldr	r3, [pc, #312]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e08e      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ce:	4b4a      	ldr	r3, [pc, #296]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e086      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051de:	4b46      	ldr	r3, [pc, #280]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 0203 	bic.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4943      	ldr	r1, [pc, #268]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f0:	f7fe fa76 	bl	80036e0 <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	e00a      	b.n	800520e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f8:	f7fe fa72 	bl	80036e0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e06e      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	4b3a      	ldr	r3, [pc, #232]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 020c 	and.w	r2, r3, #12
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	429a      	cmp	r2, r3
 800521e:	d1eb      	bne.n	80051f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005238:	429a      	cmp	r2, r3
 800523a:	d208      	bcs.n	800524e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b2e      	ldr	r3, [pc, #184]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	492b      	ldr	r1, [pc, #172]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524e:	4b29      	ldr	r3, [pc, #164]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d210      	bcs.n	800527e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525c:	4b25      	ldr	r3, [pc, #148]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 0207 	bic.w	r2, r3, #7
 8005264:	4923      	ldr	r1, [pc, #140]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526c:	4b21      	ldr	r3, [pc, #132]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e036      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528a:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	4918      	ldr	r1, [pc, #96]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4910      	ldr	r1, [pc, #64]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052bc:	f000 f824 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	490b      	ldr	r1, [pc, #44]	@ (80052fc <HAL_RCC_ClockConfig+0x1f4>)
 80052ce:	5ccb      	ldrb	r3, [r1, r3]
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <HAL_RCC_ClockConfig+0x1f8>)
 80052da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052dc:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <HAL_RCC_ClockConfig+0x1fc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe f9ad 	bl	8003640 <HAL_InitTick>
 80052e6:	4603      	mov	r3, r0
 80052e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80052ea:	7afb      	ldrb	r3, [r7, #11]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	08010d28 	.word	0x08010d28
 8005300:	20000064 	.word	0x20000064
 8005304:	20000078 	.word	0x20000078

08005308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	@ 0x24
 800530c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005316:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005320:	4b3b      	ldr	r3, [pc, #236]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x34>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d121      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d11e      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800533c:	4b34      	ldr	r3, [pc, #208]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005348:	4b31      	ldr	r3, [pc, #196]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e005      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005358:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005364:	4a2b      	ldr	r2, [pc, #172]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d102      	bne.n	8005386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005380:	4b25      	ldr	r3, [pc, #148]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e004      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d101      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800538c:	4b23      	ldr	r3, [pc, #140]	@ (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 800538e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d134      	bne.n	8005400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005396:	4b1e      	ldr	r3, [pc, #120]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d003      	beq.n	80053ae <HAL_RCC_GetSysClockFreq+0xa6>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d003      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0xac>
 80053ac:	e005      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 80053b0:	617b      	str	r3, [r7, #20]
      break;
 80053b2:	e005      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b4:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 80053b6:	617b      	str	r3, [r7, #20]
      break;
 80053b8:	e002      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	617b      	str	r3, [r7, #20]
      break;
 80053be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c0:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	3301      	adds	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053ce:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	fb03 f202 	mul.w	r2, r3, r2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	0e5b      	lsrs	r3, r3, #25
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	3301      	adds	r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005400:	69bb      	ldr	r3, [r7, #24]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3724      	adds	r7, #36	@ 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	08010d40 	.word	0x08010d40
 8005418:	00f42400 	.word	0x00f42400
 800541c:	007a1200 	.word	0x007a1200

08005420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005424:	4b03      	ldr	r3, [pc, #12]	@ (8005434 <HAL_RCC_GetHCLKFreq+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000064 	.word	0x20000064

08005438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800543c:	f7ff fff0 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	08010d38 	.word	0x08010d38

08005464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005468:	f7ff ffda 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0adb      	lsrs	r3, r3, #11
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4904      	ldr	r1, [pc, #16]	@ (800548c <HAL_RCC_GetPCLK2Freq+0x28>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	08010d38 	.word	0x08010d38

08005490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800549c:	4b2a      	ldr	r3, [pc, #168]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054a8:	f7ff f922 	bl	80046f0 <HAL_PWREx_GetVoltageRange>
 80054ac:	6178      	str	r0, [r7, #20]
 80054ae:	e014      	b.n	80054da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b0:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b4:	4a24      	ldr	r2, [pc, #144]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80054bc:	4b22      	ldr	r3, [pc, #136]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054c8:	f7ff f912 	bl	80046f0 <HAL_PWREx_GetVoltageRange>
 80054cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e0:	d10b      	bne.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b80      	cmp	r3, #128	@ 0x80
 80054e6:	d919      	bls.n	800551c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80054ec:	d902      	bls.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054ee:	2302      	movs	r3, #2
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e013      	b.n	800551c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054f4:	2301      	movs	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	e010      	b.n	800551c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b80      	cmp	r3, #128	@ 0x80
 80054fe:	d902      	bls.n	8005506 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005500:	2303      	movs	r3, #3
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	e00a      	b.n	800551c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b80      	cmp	r3, #128	@ 0x80
 800550a:	d102      	bne.n	8005512 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800550c:	2302      	movs	r3, #2
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e004      	b.n	800551c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b70      	cmp	r3, #112	@ 0x70
 8005516:	d101      	bne.n	800551c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005518:	2301      	movs	r3, #1
 800551a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800551c:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 0207 	bic.w	r2, r3, #7
 8005524:	4909      	ldr	r1, [pc, #36]	@ (800554c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800552c:	4b07      	ldr	r3, [pc, #28]	@ (800554c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	429a      	cmp	r2, r3
 8005538:	d001      	beq.n	800553e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000
 800554c:	40022000 	.word	0x40022000

08005550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005558:	2300      	movs	r3, #0
 800555a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800555c:	2300      	movs	r3, #0
 800555e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005568:	2b00      	cmp	r3, #0
 800556a:	d041      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005570:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005574:	d02a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005576:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800557a:	d824      	bhi.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800557c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005580:	d008      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005582:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005586:	d81e      	bhi.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800558c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005590:	d010      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005592:	e018      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005594:	4b86      	ldr	r3, [pc, #536]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a85      	ldr	r2, [pc, #532]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a0:	e015      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 facb 	bl	8005b44 <RCCEx_PLLSAI1_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b2:	e00c      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3320      	adds	r3, #32
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fbb6 	bl	8005d2c <RCCEx_PLLSAI2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055c4:	e003      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	74fb      	strb	r3, [r7, #19]
      break;
 80055ca:	e000      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055d4:	4b76      	ldr	r3, [pc, #472]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e2:	4973      	ldr	r1, [pc, #460]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055ea:	e001      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	7cfb      	ldrb	r3, [r7, #19]
 80055ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d041      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005600:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005604:	d02a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005606:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800560a:	d824      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800560c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005610:	d008      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005612:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005616:	d81e      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800561c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005620:	d010      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005622:	e018      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005624:	4b62      	ldr	r3, [pc, #392]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a61      	ldr	r2, [pc, #388]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800562e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005630:	e015      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3304      	adds	r3, #4
 8005636:	2100      	movs	r1, #0
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fa83 	bl	8005b44 <RCCEx_PLLSAI1_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005642:	e00c      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3320      	adds	r3, #32
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fb6e 	bl	8005d2c <RCCEx_PLLSAI2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	74fb      	strb	r3, [r7, #19]
      break;
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800565c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005664:	4b52      	ldr	r3, [pc, #328]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005672:	494f      	ldr	r1, [pc, #316]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800567a:	e001      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	7cfb      	ldrb	r3, [r7, #19]
 800567e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80a0 	beq.w	80057ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568e:	2300      	movs	r3, #0
 8005690:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005692:	4b47      	ldr	r3, [pc, #284]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a8:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	4a40      	ldr	r2, [pc, #256]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b4:	4b3e      	ldr	r3, [pc, #248]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c0:	2301      	movs	r3, #1
 80056c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c4:	4b3b      	ldr	r3, [pc, #236]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a3a      	ldr	r2, [pc, #232]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056d0:	f7fe f806 	bl	80036e0 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056d6:	e009      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d8:	f7fe f802 	bl	80036e0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d902      	bls.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	74fb      	strb	r3, [r7, #19]
        break;
 80056ea:	e005      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056ec:	4b31      	ldr	r3, [pc, #196]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0ef      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80056f8:	7cfb      	ldrb	r3, [r7, #19]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d15c      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056fe:	4b2c      	ldr	r3, [pc, #176]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005708:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01f      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	429a      	cmp	r2, r3
 800571a:	d019      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800571c:	4b24      	ldr	r3, [pc, #144]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005726:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005728:	4b21      	ldr	r3, [pc, #132]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572e:	4a20      	ldr	r2, [pc, #128]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005738:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573e:	4a1c      	ldr	r2, [pc, #112]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005748:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575a:	f7fd ffc1 	bl	80036e0 <HAL_GetTick>
 800575e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005760:	e00b      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005762:	f7fd ffbd 	bl	80036e0 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005770:	4293      	cmp	r3, r2
 8005772:	d902      	bls.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	74fb      	strb	r3, [r7, #19]
            break;
 8005778:	e006      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ec      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10c      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800578e:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005794:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800579e:	4904      	ldr	r1, [pc, #16]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057a6:	e009      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057bc:	7c7b      	ldrb	r3, [r7, #17]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d105      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c2:	4b9e      	ldr	r3, [pc, #632]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c6:	4a9d      	ldr	r2, [pc, #628]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057da:	4b98      	ldr	r3, [pc, #608]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e0:	f023 0203 	bic.w	r2, r3, #3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	4994      	ldr	r1, [pc, #592]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057fc:	4b8f      	ldr	r3, [pc, #572]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005802:	f023 020c 	bic.w	r2, r3, #12
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580a:	498c      	ldr	r1, [pc, #560]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800581e:	4b87      	ldr	r3, [pc, #540]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005824:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582c:	4983      	ldr	r1, [pc, #524]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005840:	4b7e      	ldr	r3, [pc, #504]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584e:	497b      	ldr	r1, [pc, #492]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005862:	4b76      	ldr	r3, [pc, #472]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005870:	4972      	ldr	r1, [pc, #456]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005884:	4b6d      	ldr	r3, [pc, #436]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005892:	496a      	ldr	r1, [pc, #424]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058a6:	4b65      	ldr	r3, [pc, #404]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b4:	4961      	ldr	r1, [pc, #388]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058c8:	4b5c      	ldr	r3, [pc, #368]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d6:	4959      	ldr	r1, [pc, #356]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ea:	4b54      	ldr	r3, [pc, #336]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f8:	4950      	ldr	r1, [pc, #320]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800590c:	4b4b      	ldr	r3, [pc, #300]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591a:	4948      	ldr	r1, [pc, #288]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800592e:	4b43      	ldr	r3, [pc, #268]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005934:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593c:	493f      	ldr	r1, [pc, #252]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d028      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005950:	4b3a      	ldr	r3, [pc, #232]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595e:	4937      	ldr	r1, [pc, #220]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800596a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596e:	d106      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005970:	4b32      	ldr	r3, [pc, #200]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a31      	ldr	r2, [pc, #196]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800597a:	60d3      	str	r3, [r2, #12]
 800597c:	e011      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005982:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005986:	d10c      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	2101      	movs	r1, #1
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f8d8 	bl	8005b44 <RCCEx_PLLSAI1_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800599e:	7cfb      	ldrb	r3, [r7, #19]
 80059a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d028      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059ae:	4b23      	ldr	r3, [pc, #140]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059bc:	491f      	ldr	r1, [pc, #124]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059cc:	d106      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ce:	4b1b      	ldr	r3, [pc, #108]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d8:	60d3      	str	r3, [r2, #12]
 80059da:	e011      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f8a9 	bl	8005b44 <RCCEx_PLLSAI1_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f6:	7cfb      	ldrb	r3, [r7, #19]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02b      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1a:	4908      	ldr	r1, [pc, #32]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a2a:	d109      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a2c:	4b03      	ldr	r3, [pc, #12]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4a02      	ldr	r2, [pc, #8]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a36:	60d3      	str	r3, [r2, #12]
 8005a38:	e014      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f877 	bl	8005b44 <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d02f      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a70:	4b2b      	ldr	r3, [pc, #172]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a7e:	4928      	ldr	r1, [pc, #160]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a8e:	d10d      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	2102      	movs	r1, #2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f854 	bl	8005b44 <RCCEx_PLLSAI1_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d014      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005aa6:	7cfb      	ldrb	r3, [r7, #19]
 8005aa8:	74bb      	strb	r3, [r7, #18]
 8005aaa:	e011      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3320      	adds	r3, #32
 8005aba:	2102      	movs	r1, #2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f935 	bl	8005d2c <RCCEx_PLLSAI2_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ac6:	7cfb      	ldrb	r3, [r7, #19]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005adc:	4b10      	ldr	r3, [pc, #64]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aea:	490d      	ldr	r1, [pc, #52]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005afe:	4b08      	ldr	r3, [pc, #32]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b0e:	4904      	ldr	r1, [pc, #16]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b16:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000

08005b24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005b28:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a04      	ldr	r2, [pc, #16]	@ (8005b40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	6013      	str	r3, [r2, #0]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000

08005b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b52:	4b75      	ldr	r3, [pc, #468]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d018      	beq.n	8005b90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b5e:	4b72      	ldr	r3, [pc, #456]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0203 	and.w	r2, r3, #3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d10d      	bne.n	8005b8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
       ||
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b76:	4b6c      	ldr	r3, [pc, #432]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
       ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d047      	beq.n	8005c1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
 8005b8e:	e044      	b.n	8005c1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d018      	beq.n	8005bca <RCCEx_PLLSAI1_Config+0x86>
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d825      	bhi.n	8005be8 <RCCEx_PLLSAI1_Config+0xa4>
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d002      	beq.n	8005ba6 <RCCEx_PLLSAI1_Config+0x62>
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d009      	beq.n	8005bb8 <RCCEx_PLLSAI1_Config+0x74>
 8005ba4:	e020      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ba6:	4b60      	ldr	r3, [pc, #384]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d11d      	bne.n	8005bee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb6:	e01a      	b.n	8005bee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d116      	bne.n	8005bf2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc8:	e013      	b.n	8005bf2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bca:	4b57      	ldr	r3, [pc, #348]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10f      	bne.n	8005bf6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bd6:	4b54      	ldr	r3, [pc, #336]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005be6:	e006      	b.n	8005bf6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
      break;
 8005bec:	e004      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e002      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10d      	bne.n	8005c1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	430b      	orrs	r3, r1
 8005c14:	4944      	ldr	r1, [pc, #272]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d17d      	bne.n	8005d1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c20:	4b41      	ldr	r3, [pc, #260]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a40      	ldr	r2, [pc, #256]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c2c:	f7fd fd58 	bl	80036e0 <HAL_GetTick>
 8005c30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c32:	e009      	b.n	8005c48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c34:	f7fd fd54 	bl	80036e0 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d902      	bls.n	8005c48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	73fb      	strb	r3, [r7, #15]
        break;
 8005c46:	e005      	b.n	8005c54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c48:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1ef      	bne.n	8005c34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d160      	bne.n	8005d1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d111      	bne.n	8005c84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c60:	4b31      	ldr	r3, [pc, #196]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6892      	ldr	r2, [r2, #8]
 8005c70:	0211      	lsls	r1, r2, #8
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	68d2      	ldr	r2, [r2, #12]
 8005c76:	0912      	lsrs	r2, r2, #4
 8005c78:	0452      	lsls	r2, r2, #17
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	492a      	ldr	r1, [pc, #168]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	610b      	str	r3, [r1, #16]
 8005c82:	e027      	b.n	8005cd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d112      	bne.n	8005cb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c8a:	4b27      	ldr	r3, [pc, #156]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c92:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6892      	ldr	r2, [r2, #8]
 8005c9a:	0211      	lsls	r1, r2, #8
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6912      	ldr	r2, [r2, #16]
 8005ca0:	0852      	lsrs	r2, r2, #1
 8005ca2:	3a01      	subs	r2, #1
 8005ca4:	0552      	lsls	r2, r2, #21
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	491f      	ldr	r1, [pc, #124]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	610b      	str	r3, [r1, #16]
 8005cae:	e011      	b.n	8005cd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005cb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6892      	ldr	r2, [r2, #8]
 8005cc0:	0211      	lsls	r1, r2, #8
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6952      	ldr	r2, [r2, #20]
 8005cc6:	0852      	lsrs	r2, r2, #1
 8005cc8:	3a01      	subs	r2, #1
 8005cca:	0652      	lsls	r2, r2, #25
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	4916      	ldr	r1, [pc, #88]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cd4:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a13      	ldr	r2, [pc, #76]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce0:	f7fd fcfe 	bl	80036e0 <HAL_GetTick>
 8005ce4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ce6:	e009      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ce8:	f7fd fcfa 	bl	80036e0 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d902      	bls.n	8005cfc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	73fb      	strb	r3, [r7, #15]
          break;
 8005cfa:	e005      	b.n	8005d08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ef      	beq.n	8005ce8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	4904      	ldr	r1, [pc, #16]	@ (8005d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40021000 	.word	0x40021000

08005d2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d46:	4b67      	ldr	r3, [pc, #412]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f003 0203 	and.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d10d      	bne.n	8005d72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
       ||
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d5e:	4b61      	ldr	r3, [pc, #388]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d047      	beq.n	8005e02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	e044      	b.n	8005e02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d018      	beq.n	8005db2 <RCCEx_PLLSAI2_Config+0x86>
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d825      	bhi.n	8005dd0 <RCCEx_PLLSAI2_Config+0xa4>
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d002      	beq.n	8005d8e <RCCEx_PLLSAI2_Config+0x62>
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d009      	beq.n	8005da0 <RCCEx_PLLSAI2_Config+0x74>
 8005d8c:	e020      	b.n	8005dd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d8e:	4b55      	ldr	r3, [pc, #340]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d11d      	bne.n	8005dd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d9e:	e01a      	b.n	8005dd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005da0:	4b50      	ldr	r3, [pc, #320]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d116      	bne.n	8005dda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005db0:	e013      	b.n	8005dda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005db2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10f      	bne.n	8005dde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dbe:	4b49      	ldr	r3, [pc, #292]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dce:	e006      	b.n	8005dde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e004      	b.n	8005de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dd6:	bf00      	nop
 8005dd8:	e002      	b.n	8005de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10d      	bne.n	8005e02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005de6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	4939      	ldr	r1, [pc, #228]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d167      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e08:	4b36      	ldr	r3, [pc, #216]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a35      	ldr	r2, [pc, #212]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e14:	f7fd fc64 	bl	80036e0 <HAL_GetTick>
 8005e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e1a:	e009      	b.n	8005e30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e1c:	f7fd fc60 	bl	80036e0 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d902      	bls.n	8005e30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e2e:	e005      	b.n	8005e3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e30:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1ef      	bne.n	8005e1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d14a      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d111      	bne.n	8005e6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e48:	4b26      	ldr	r3, [pc, #152]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6892      	ldr	r2, [r2, #8]
 8005e58:	0211      	lsls	r1, r2, #8
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68d2      	ldr	r2, [r2, #12]
 8005e5e:	0912      	lsrs	r2, r2, #4
 8005e60:	0452      	lsls	r2, r2, #17
 8005e62:	430a      	orrs	r2, r1
 8005e64:	491f      	ldr	r1, [pc, #124]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	614b      	str	r3, [r1, #20]
 8005e6a:	e011      	b.n	8005e90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6892      	ldr	r2, [r2, #8]
 8005e7c:	0211      	lsls	r1, r2, #8
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6912      	ldr	r2, [r2, #16]
 8005e82:	0852      	lsrs	r2, r2, #1
 8005e84:	3a01      	subs	r2, #1
 8005e86:	0652      	lsls	r2, r2, #25
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	4916      	ldr	r1, [pc, #88]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e90:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a13      	ldr	r2, [pc, #76]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9c:	f7fd fc20 	bl	80036e0 <HAL_GetTick>
 8005ea0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ea2:	e009      	b.n	8005eb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ea4:	f7fd fc1c 	bl	80036e0 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d902      	bls.n	8005eb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	73fb      	strb	r3, [r7, #15]
          break;
 8005eb6:	e005      	b.n	8005ec4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ef      	beq.n	8005ea4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	4904      	ldr	r1, [pc, #16]	@ (8005ee4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000

08005ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e095      	b.n	8006026 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d108      	bne.n	8005f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f0a:	d009      	beq.n	8005f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	61da      	str	r2, [r3, #28]
 8005f12:	e005      	b.n	8005f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f877 	bl	800602e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f60:	d902      	bls.n	8005f68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e002      	b.n	8005f6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f76:	d007      	beq.n	8005f88 <HAL_SPI_Init+0xa0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f80:	d002      	beq.n	8005f88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fca:	ea42 0103 	orr.w	r1, r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	f003 0204 	and.w	r2, r3, #4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006004:	ea42 0103 	orr.w	r1, r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b08a      	sub	sp, #40	@ 0x28
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006050:	2301      	movs	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006054:	f7fd fb44 	bl	80036e0 <HAL_GetTick>
 8006058:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006060:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006068:	887b      	ldrh	r3, [r7, #2]
 800606a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800606c:	887b      	ldrh	r3, [r7, #2]
 800606e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006070:	7ffb      	ldrb	r3, [r7, #31]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d00c      	beq.n	8006090 <HAL_SPI_TransmitReceive+0x4e>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800607c:	d106      	bne.n	800608c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d102      	bne.n	800608c <HAL_SPI_TransmitReceive+0x4a>
 8006086:	7ffb      	ldrb	r3, [r7, #31]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d001      	beq.n	8006090 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
 800608e:	e1f3      	b.n	8006478 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_SPI_TransmitReceive+0x60>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_SPI_TransmitReceive+0x60>
 800609c:	887b      	ldrh	r3, [r7, #2]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e1e8      	b.n	8006478 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x72>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e1e1      	b.n	8006478 <HAL_SPI_TransmitReceive+0x436>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d003      	beq.n	80060d0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2205      	movs	r2, #5
 80060cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	887a      	ldrh	r2, [r7, #2]
 80060e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	887a      	ldrh	r2, [r7, #2]
 80060e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	887a      	ldrh	r2, [r7, #2]
 80060f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	887a      	ldrh	r2, [r7, #2]
 80060fc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006112:	d802      	bhi.n	800611a <HAL_SPI_TransmitReceive+0xd8>
 8006114:	8abb      	ldrh	r3, [r7, #20]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d908      	bls.n	800612c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	e007      	b.n	800613c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006146:	2b40      	cmp	r3, #64	@ 0x40
 8006148:	d007      	beq.n	800615a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006162:	f240 8083 	bls.w	800626c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_SPI_TransmitReceive+0x132>
 800616e:	8afb      	ldrh	r3, [r7, #22]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d16f      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	881a      	ldrh	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	1c9a      	adds	r2, r3, #2
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006198:	e05c      	b.n	8006254 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d11b      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x19e>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x19e>
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d113      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061bc:	881a      	ldrh	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c8:	1c9a      	adds	r2, r3, #2
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d11c      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x1e6>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d016      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	b292      	uxth	r2, r2
 8006206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620c:	1c9a      	adds	r2, r3, #2
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006224:	2301      	movs	r3, #1
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006228:	f7fd fa5a 	bl	80036e0 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006234:	429a      	cmp	r2, r3
 8006236:	d80d      	bhi.n	8006254 <HAL_SPI_TransmitReceive+0x212>
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d009      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e111      	b.n	8006478 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d19d      	bne.n	800619a <HAL_SPI_TransmitReceive+0x158>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d197      	bne.n	800619a <HAL_SPI_TransmitReceive+0x158>
 800626a:	e0e5      	b.n	8006438 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_SPI_TransmitReceive+0x23a>
 8006274:	8afb      	ldrh	r3, [r7, #22]
 8006276:	2b01      	cmp	r3, #1
 8006278:	f040 80d1 	bne.w	800641e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d912      	bls.n	80062ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628a:	881a      	ldrh	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b02      	subs	r3, #2
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062aa:	e0b8      	b.n	800641e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062d2:	e0a4      	b.n	800641e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d134      	bne.n	800634c <HAL_SPI_TransmitReceive+0x30a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d02f      	beq.n	800634c <HAL_SPI_TransmitReceive+0x30a>
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d12c      	bne.n	800634c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d912      	bls.n	8006322 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	881a      	ldrh	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	1c9a      	adds	r2, r3, #2
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b02      	subs	r3, #2
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006320:	e012      	b.n	8006348 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	7812      	ldrb	r2, [r2, #0]
 800632e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d148      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x3aa>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d042      	beq.n	80063ec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	d923      	bls.n	80063ba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637c:	b292      	uxth	r2, r2
 800637e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006384:	1c9a      	adds	r2, r3, #2
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b02      	subs	r3, #2
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d81f      	bhi.n	80063e8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063b6:	605a      	str	r2, [r3, #4]
 80063b8:	e016      	b.n	80063e8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f103 020c 	add.w	r2, r3, #12
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063e8:	2301      	movs	r3, #1
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063ec:	f7fd f978 	bl	80036e0 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d803      	bhi.n	8006404 <HAL_SPI_TransmitReceive+0x3c2>
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <HAL_SPI_TransmitReceive+0x3c8>
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e02c      	b.n	8006478 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	f47f af55 	bne.w	80062d4 <HAL_SPI_TransmitReceive+0x292>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	f47f af4e 	bne.w	80062d4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006438:	6a3a      	ldr	r2, [r7, #32]
 800643a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f94b 	bl	80066d8 <SPI_EndRxTxTransaction>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d008      	beq.n	800645a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e00e      	b.n	8006478 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006476:	2300      	movs	r3, #0
  }
}
 8006478:	4618      	mov	r0, r3
 800647a:	3728      	adds	r7, #40	@ 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800648e:	b2db      	uxtb	r3, r3
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064ac:	f7fd f918 	bl	80036e0 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	4413      	add	r3, r2
 80064ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064bc:	f7fd f910 	bl	80036e0 <HAL_GetTick>
 80064c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064c2:	4b39      	ldr	r3, [pc, #228]	@ (80065a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	015b      	lsls	r3, r3, #5
 80064c8:	0d1b      	lsrs	r3, r3, #20
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d2:	e054      	b.n	800657e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d050      	beq.n	800657e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064dc:	f7fd f900 	bl	80036e0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d902      	bls.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d13d      	bne.n	800656e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800650a:	d111      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006514:	d004      	beq.n	8006520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651e:	d107      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800652e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006538:	d10f      	bne.n	800655a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e017      	b.n	800659e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3b01      	subs	r3, #1
 800657c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4013      	ands	r3, r2
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	429a      	cmp	r2, r3
 800659a:	d19b      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000064 	.word	0x20000064

080065ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065be:	f7fd f88f 	bl	80036e0 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	4413      	add	r3, r2
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80065ce:	f7fd f887 	bl	80036e0 <HAL_GetTick>
 80065d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065dc:	4b3d      	ldr	r3, [pc, #244]	@ (80066d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	00da      	lsls	r2, r3, #3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	0d1b      	lsrs	r3, r3, #20
 80065ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065f4:	e060      	b.n	80066b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065fc:	d107      	bne.n	800660e <SPI_WaitFifoStateUntilTimeout+0x62>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800660c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d050      	beq.n	80066b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006616:	f7fd f863 	bl	80036e0 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006622:	429a      	cmp	r2, r3
 8006624:	d902      	bls.n	800662c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d13d      	bne.n	80066a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800663a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006644:	d111      	bne.n	800666a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664e:	d004      	beq.n	800665a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006658:	d107      	bne.n	800666a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006672:	d10f      	bne.n	8006694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e010      	b.n	80066ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4013      	ands	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d196      	bne.n	80065f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3728      	adds	r7, #40	@ 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000064 	.word	0x20000064

080066d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff5b 	bl	80065ac <SPI_WaitFifoStateUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e027      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	2180      	movs	r1, #128	@ 0x80
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fec0 	bl	800649c <SPI_WaitFlagStateUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e014      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff34 	bl	80065ac <SPI_WaitFifoStateUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e000      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e040      	b.n	80067f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fc fa10 	bl	8002bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2224      	movs	r2, #36	@ 0x24
 8006790:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0201 	bic.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fb6a 	bl	8006e84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f8af 	bl	8006914 <UART_SetConfig>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e01b      	b.n	80067f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fbe9 	bl	8006fc8 <UART_CheckIdleState>
 80067f6:	4603      	mov	r3, r0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	@ 0x28
 8006804:	af02      	add	r7, sp, #8
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006814:	2b20      	cmp	r3, #32
 8006816:	d177      	bne.n	8006908 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_UART_Transmit+0x24>
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e070      	b.n	800690a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2221      	movs	r2, #33	@ 0x21
 8006834:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006836:	f7fc ff53 	bl	80036e0 <HAL_GetTick>
 800683a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	88fa      	ldrh	r2, [r7, #6]
 8006840:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	88fa      	ldrh	r2, [r7, #6]
 8006848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006854:	d108      	bne.n	8006868 <HAL_UART_Transmit+0x68>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e003      	b.n	8006870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800686c:	2300      	movs	r3, #0
 800686e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006870:	e02f      	b.n	80068d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2200      	movs	r2, #0
 800687a:	2180      	movs	r1, #128	@ 0x80
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fc4b 	bl	8007118 <UART_WaitOnFlagUntilTimeout>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e03b      	b.n	800690a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	881a      	ldrh	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068a4:	b292      	uxth	r2, r2
 80068a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	3302      	adds	r3, #2
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e007      	b.n	80068c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	3301      	adds	r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1c9      	bne.n	8006872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2140      	movs	r1, #64	@ 0x40
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fc15 	bl	8007118 <UART_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e005      	b.n	800690a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006908:	2302      	movs	r3, #2
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006918:	b08a      	sub	sp, #40	@ 0x28
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	431a      	orrs	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	4313      	orrs	r3, r2
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4ba4      	ldr	r3, [pc, #656]	@ (8006bd4 <UART_SetConfig+0x2c0>)
 8006944:	4013      	ands	r3, r2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800694c:	430b      	orrs	r3, r1
 800694e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a99      	ldr	r2, [pc, #612]	@ (8006bd8 <UART_SetConfig+0x2c4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800697c:	4313      	orrs	r3, r2
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006990:	430a      	orrs	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a90      	ldr	r2, [pc, #576]	@ (8006bdc <UART_SetConfig+0x2c8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d126      	bne.n	80069ec <UART_SetConfig+0xd8>
 800699e:	4b90      	ldr	r3, [pc, #576]	@ (8006be0 <UART_SetConfig+0x2cc>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d81b      	bhi.n	80069e4 <UART_SetConfig+0xd0>
 80069ac:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <UART_SetConfig+0xa0>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	080069d5 	.word	0x080069d5
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ca:	e116      	b.n	8006bfa <UART_SetConfig+0x2e6>
 80069cc:	2302      	movs	r3, #2
 80069ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069d2:	e112      	b.n	8006bfa <UART_SetConfig+0x2e6>
 80069d4:	2304      	movs	r3, #4
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069da:	e10e      	b.n	8006bfa <UART_SetConfig+0x2e6>
 80069dc:	2308      	movs	r3, #8
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069e2:	e10a      	b.n	8006bfa <UART_SetConfig+0x2e6>
 80069e4:	2310      	movs	r3, #16
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ea:	e106      	b.n	8006bfa <UART_SetConfig+0x2e6>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a7c      	ldr	r2, [pc, #496]	@ (8006be4 <UART_SetConfig+0x2d0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d138      	bne.n	8006a68 <UART_SetConfig+0x154>
 80069f6:	4b7a      	ldr	r3, [pc, #488]	@ (8006be0 <UART_SetConfig+0x2cc>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fc:	f003 030c 	and.w	r3, r3, #12
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d82d      	bhi.n	8006a60 <UART_SetConfig+0x14c>
 8006a04:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <UART_SetConfig+0xf8>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a61 	.word	0x08006a61
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a61 	.word	0x08006a61
 8006a28:	08006a61 	.word	0x08006a61
 8006a2c:	08006a49 	.word	0x08006a49
 8006a30:	08006a61 	.word	0x08006a61
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a46:	e0d8      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a4e:	e0d4      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a56:	e0d0      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a5e:	e0cc      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a66:	e0c8      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8006be8 <UART_SetConfig+0x2d4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d125      	bne.n	8006abe <UART_SetConfig+0x1aa>
 8006a72:	4b5b      	ldr	r3, [pc, #364]	@ (8006be0 <UART_SetConfig+0x2cc>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a7c:	2b30      	cmp	r3, #48	@ 0x30
 8006a7e:	d016      	beq.n	8006aae <UART_SetConfig+0x19a>
 8006a80:	2b30      	cmp	r3, #48	@ 0x30
 8006a82:	d818      	bhi.n	8006ab6 <UART_SetConfig+0x1a2>
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d00a      	beq.n	8006a9e <UART_SetConfig+0x18a>
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d814      	bhi.n	8006ab6 <UART_SetConfig+0x1a2>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <UART_SetConfig+0x182>
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d008      	beq.n	8006aa6 <UART_SetConfig+0x192>
 8006a94:	e00f      	b.n	8006ab6 <UART_SetConfig+0x1a2>
 8006a96:	2300      	movs	r3, #0
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a9c:	e0ad      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aa4:	e0a9      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aac:	e0a5      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006aae:	2308      	movs	r3, #8
 8006ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ab4:	e0a1      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006abc:	e09d      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8006bec <UART_SetConfig+0x2d8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d125      	bne.n	8006b14 <UART_SetConfig+0x200>
 8006ac8:	4b45      	ldr	r3, [pc, #276]	@ (8006be0 <UART_SetConfig+0x2cc>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ace:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ad4:	d016      	beq.n	8006b04 <UART_SetConfig+0x1f0>
 8006ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ad8:	d818      	bhi.n	8006b0c <UART_SetConfig+0x1f8>
 8006ada:	2b80      	cmp	r3, #128	@ 0x80
 8006adc:	d00a      	beq.n	8006af4 <UART_SetConfig+0x1e0>
 8006ade:	2b80      	cmp	r3, #128	@ 0x80
 8006ae0:	d814      	bhi.n	8006b0c <UART_SetConfig+0x1f8>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <UART_SetConfig+0x1d8>
 8006ae6:	2b40      	cmp	r3, #64	@ 0x40
 8006ae8:	d008      	beq.n	8006afc <UART_SetConfig+0x1e8>
 8006aea:	e00f      	b.n	8006b0c <UART_SetConfig+0x1f8>
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af2:	e082      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006afa:	e07e      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b02:	e07a      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b0a:	e076      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b12:	e072      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a35      	ldr	r2, [pc, #212]	@ (8006bf0 <UART_SetConfig+0x2dc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d12a      	bne.n	8006b74 <UART_SetConfig+0x260>
 8006b1e:	4b30      	ldr	r3, [pc, #192]	@ (8006be0 <UART_SetConfig+0x2cc>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2c:	d01a      	beq.n	8006b64 <UART_SetConfig+0x250>
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b32:	d81b      	bhi.n	8006b6c <UART_SetConfig+0x258>
 8006b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b38:	d00c      	beq.n	8006b54 <UART_SetConfig+0x240>
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b3e:	d815      	bhi.n	8006b6c <UART_SetConfig+0x258>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <UART_SetConfig+0x238>
 8006b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b48:	d008      	beq.n	8006b5c <UART_SetConfig+0x248>
 8006b4a:	e00f      	b.n	8006b6c <UART_SetConfig+0x258>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b52:	e052      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5a:	e04e      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b62:	e04a      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6a:	e046      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b72:	e042      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a17      	ldr	r2, [pc, #92]	@ (8006bd8 <UART_SetConfig+0x2c4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d13a      	bne.n	8006bf4 <UART_SetConfig+0x2e0>
 8006b7e:	4b18      	ldr	r3, [pc, #96]	@ (8006be0 <UART_SetConfig+0x2cc>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b8c:	d01a      	beq.n	8006bc4 <UART_SetConfig+0x2b0>
 8006b8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b92:	d81b      	bhi.n	8006bcc <UART_SetConfig+0x2b8>
 8006b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b98:	d00c      	beq.n	8006bb4 <UART_SetConfig+0x2a0>
 8006b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b9e:	d815      	bhi.n	8006bcc <UART_SetConfig+0x2b8>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <UART_SetConfig+0x298>
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba8:	d008      	beq.n	8006bbc <UART_SetConfig+0x2a8>
 8006baa:	e00f      	b.n	8006bcc <UART_SetConfig+0x2b8>
 8006bac:	2300      	movs	r3, #0
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb2:	e022      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bba:	e01e      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc2:	e01a      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bca:	e016      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bd2:	e012      	b.n	8006bfa <UART_SetConfig+0x2e6>
 8006bd4:	efff69f3 	.word	0xefff69f3
 8006bd8:	40008000 	.word	0x40008000
 8006bdc:	40013800 	.word	0x40013800
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40004800 	.word	0x40004800
 8006bec:	40004c00 	.word	0x40004c00
 8006bf0:	40005000 	.word	0x40005000
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a9f      	ldr	r2, [pc, #636]	@ (8006e7c <UART_SetConfig+0x568>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d17a      	bne.n	8006cfa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d824      	bhi.n	8006c56 <UART_SetConfig+0x342>
 8006c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <UART_SetConfig+0x300>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c57 	.word	0x08006c57
 8006c1c:	08006c41 	.word	0x08006c41
 8006c20:	08006c57 	.word	0x08006c57
 8006c24:	08006c47 	.word	0x08006c47
 8006c28:	08006c57 	.word	0x08006c57
 8006c2c:	08006c57 	.word	0x08006c57
 8006c30:	08006c57 	.word	0x08006c57
 8006c34:	08006c4f 	.word	0x08006c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c38:	f7fe fbfe 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006c3c:	61f8      	str	r0, [r7, #28]
        break;
 8006c3e:	e010      	b.n	8006c62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	4b8f      	ldr	r3, [pc, #572]	@ (8006e80 <UART_SetConfig+0x56c>)
 8006c42:	61fb      	str	r3, [r7, #28]
        break;
 8006c44:	e00d      	b.n	8006c62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c46:	f7fe fb5f 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8006c4a:	61f8      	str	r0, [r7, #28]
        break;
 8006c4c:	e009      	b.n	8006c62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c52:	61fb      	str	r3, [r7, #28]
        break;
 8006c54:	e005      	b.n	8006c62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80fb 	beq.w	8006e60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	4413      	add	r3, r2
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d305      	bcc.n	8006c86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d903      	bls.n	8006c8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c8c:	e0e8      	b.n	8006e60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2200      	movs	r2, #0
 8006c92:	461c      	mov	r4, r3
 8006c94:	4615      	mov	r5, r2
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	022b      	lsls	r3, r5, #8
 8006ca0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ca4:	0222      	lsls	r2, r4, #8
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	6849      	ldr	r1, [r1, #4]
 8006caa:	0849      	lsrs	r1, r1, #1
 8006cac:	2000      	movs	r0, #0
 8006cae:	4688      	mov	r8, r1
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	eb12 0a08 	adds.w	sl, r2, r8
 8006cb6:	eb43 0b09 	adc.w	fp, r3, r9
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	603b      	str	r3, [r7, #0]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc8:	4650      	mov	r0, sl
 8006cca:	4659      	mov	r1, fp
 8006ccc:	f7f9 ffdc 	bl	8000c88 <__aeabi_uldivmod>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cde:	d308      	bcc.n	8006cf2 <UART_SetConfig+0x3de>
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ce6:	d204      	bcs.n	8006cf2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	60da      	str	r2, [r3, #12]
 8006cf0:	e0b6      	b.n	8006e60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006cf8:	e0b2      	b.n	8006e60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d02:	d15e      	bne.n	8006dc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d828      	bhi.n	8006d5e <UART_SetConfig+0x44a>
 8006d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <UART_SetConfig+0x400>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	08006d5f 	.word	0x08006d5f
 8006d24:	08006d4f 	.word	0x08006d4f
 8006d28:	08006d5f 	.word	0x08006d5f
 8006d2c:	08006d5f 	.word	0x08006d5f
 8006d30:	08006d5f 	.word	0x08006d5f
 8006d34:	08006d57 	.word	0x08006d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d38:	f7fe fb7e 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006d3c:	61f8      	str	r0, [r7, #28]
        break;
 8006d3e:	e014      	b.n	8006d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d40:	f7fe fb90 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006d44:	61f8      	str	r0, [r7, #28]
        break;
 8006d46:	e010      	b.n	8006d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d48:	4b4d      	ldr	r3, [pc, #308]	@ (8006e80 <UART_SetConfig+0x56c>)
 8006d4a:	61fb      	str	r3, [r7, #28]
        break;
 8006d4c:	e00d      	b.n	8006d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4e:	f7fe fadb 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8006d52:	61f8      	str	r0, [r7, #28]
        break;
 8006d54:	e009      	b.n	8006d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d5a:	61fb      	str	r3, [r7, #28]
        break;
 8006d5c:	e005      	b.n	8006d6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d077      	beq.n	8006e60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	005a      	lsls	r2, r3, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	441a      	add	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b0f      	cmp	r3, #15
 8006d8a:	d916      	bls.n	8006dba <UART_SetConfig+0x4a6>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d92:	d212      	bcs.n	8006dba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f023 030f 	bic.w	r3, r3, #15
 8006d9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	8afb      	ldrh	r3, [r7, #22]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	8afa      	ldrh	r2, [r7, #22]
 8006db6:	60da      	str	r2, [r3, #12]
 8006db8:	e052      	b.n	8006e60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006dc0:	e04e      	b.n	8006e60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d827      	bhi.n	8006e1a <UART_SetConfig+0x506>
 8006dca:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd0 <UART_SetConfig+0x4bc>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006df5 	.word	0x08006df5
 8006dd4:	08006dfd 	.word	0x08006dfd
 8006dd8:	08006e05 	.word	0x08006e05
 8006ddc:	08006e1b 	.word	0x08006e1b
 8006de0:	08006e0b 	.word	0x08006e0b
 8006de4:	08006e1b 	.word	0x08006e1b
 8006de8:	08006e1b 	.word	0x08006e1b
 8006dec:	08006e1b 	.word	0x08006e1b
 8006df0:	08006e13 	.word	0x08006e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006df4:	f7fe fb20 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006df8:	61f8      	str	r0, [r7, #28]
        break;
 8006dfa:	e014      	b.n	8006e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dfc:	f7fe fb32 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006e00:	61f8      	str	r0, [r7, #28]
        break;
 8006e02:	e010      	b.n	8006e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e04:	4b1e      	ldr	r3, [pc, #120]	@ (8006e80 <UART_SetConfig+0x56c>)
 8006e06:	61fb      	str	r3, [r7, #28]
        break;
 8006e08:	e00d      	b.n	8006e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e0a:	f7fe fa7d 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8006e0e:	61f8      	str	r0, [r7, #28]
        break;
 8006e10:	e009      	b.n	8006e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e16:	61fb      	str	r3, [r7, #28]
        break;
 8006e18:	e005      	b.n	8006e26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e24:	bf00      	nop
    }

    if (pclk != 0U)
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d019      	beq.n	8006e60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	085a      	lsrs	r2, r3, #1
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	441a      	add	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b0f      	cmp	r3, #15
 8006e44:	d909      	bls.n	8006e5a <UART_SetConfig+0x546>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e4c:	d205      	bcs.n	8006e5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60da      	str	r2, [r3, #12]
 8006e58:	e002      	b.n	8006e60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3728      	adds	r7, #40	@ 0x28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40008000 	.word	0x40008000
 8006e80:	00f42400 	.word	0x00f42400

08006e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01a      	beq.n	8006f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f82:	d10a      	bne.n	8006f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b098      	sub	sp, #96	@ 0x60
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fd8:	f7fc fb82 	bl	80036e0 <HAL_GetTick>
 8006fdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d12e      	bne.n	800704a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f88c 	bl	8007118 <UART_WaitOnFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d021      	beq.n	800704a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800701a:	653b      	str	r3, [r7, #80]	@ 0x50
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007024:	647b      	str	r3, [r7, #68]	@ 0x44
 8007026:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800702a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e062      	b.n	8007110 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b04      	cmp	r3, #4
 8007056:	d149      	bne.n	80070ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007060:	2200      	movs	r2, #0
 8007062:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f856 	bl	8007118 <UART_WaitOnFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d03c      	beq.n	80070ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	623b      	str	r3, [r7, #32]
   return(result);
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007090:	633b      	str	r3, [r7, #48]	@ 0x30
 8007092:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e6      	bne.n	8007072 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3308      	adds	r3, #8
 80070aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3308      	adds	r3, #8
 80070c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070c4:	61fa      	str	r2, [r7, #28]
 80070c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	69b9      	ldr	r1, [r7, #24]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	617b      	str	r3, [r7, #20]
   return(result);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e5      	bne.n	80070a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e011      	b.n	8007110 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3758      	adds	r7, #88	@ 0x58
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007128:	e04f      	b.n	80071ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d04b      	beq.n	80071ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007132:	f7fc fad5 	bl	80036e0 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	429a      	cmp	r2, r3
 8007140:	d302      	bcc.n	8007148 <UART_WaitOnFlagUntilTimeout+0x30>
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e04e      	b.n	80071ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d037      	beq.n	80071ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b80      	cmp	r3, #128	@ 0x80
 800715e:	d034      	beq.n	80071ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b40      	cmp	r3, #64	@ 0x40
 8007164:	d031      	beq.n	80071ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b08      	cmp	r3, #8
 8007172:	d110      	bne.n	8007196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2208      	movs	r2, #8
 800717a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f838 	bl	80071f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2208      	movs	r2, #8
 8007186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e029      	b.n	80071ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071a4:	d111      	bne.n	80071ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f81e 	bl	80071f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e00f      	b.n	80071ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4013      	ands	r3, r2
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	bf0c      	ite	eq
 80071da:	2301      	moveq	r3, #1
 80071dc:	2300      	movne	r3, #0
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d0a0      	beq.n	800712a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b095      	sub	sp, #84	@ 0x54
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800720e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007218:	643b      	str	r3, [r7, #64]	@ 0x40
 800721a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800721e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e6      	bne.n	80071fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3308      	adds	r3, #8
 8007232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	61fb      	str	r3, [r7, #28]
   return(result);
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800724c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800724e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e5      	bne.n	800722c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007264:	2b01      	cmp	r3, #1
 8007266:	d118      	bne.n	800729a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	60bb      	str	r3, [r7, #8]
   return(result);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f023 0310 	bic.w	r3, r3, #16
 800727c:	647b      	str	r3, [r7, #68]	@ 0x44
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6979      	ldr	r1, [r7, #20]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	613b      	str	r3, [r7, #16]
   return(result);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80072ae:	bf00      	nop
 80072b0:	3754      	adds	r7, #84	@ 0x54
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072ba:	b084      	sub	sp, #16
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	f107 001c 	add.w	r0, r7, #28
 80072c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fa69 	bl	80077b0 <USB_CoreReset>
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80072e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80072f6:	e005      	b.n	8007304 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007310:	b004      	add	sp, #16
 8007312:	4770      	bx	lr

08007314 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f023 0201 	bic.w	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d115      	bne.n	8007384 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007364:	200a      	movs	r0, #10
 8007366:	f7fc f9c7 	bl	80036f8 <HAL_Delay>
      ms += 10U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	330a      	adds	r3, #10
 800736e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa0f 	bl	8007794 <USB_GetMode>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	d01e      	beq.n	80073ba <USB_SetCurrentMode+0x84>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007380:	d9f0      	bls.n	8007364 <USB_SetCurrentMode+0x2e>
 8007382:	e01a      	b.n	80073ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d115      	bne.n	80073b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007396:	200a      	movs	r0, #10
 8007398:	f7fc f9ae 	bl	80036f8 <HAL_Delay>
      ms += 10U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	330a      	adds	r3, #10
 80073a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f9f6 	bl	8007794 <USB_GetMode>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <USB_SetCurrentMode+0x84>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80073b2:	d9f0      	bls.n	8007396 <USB_SetCurrentMode+0x60>
 80073b4:	e001      	b.n	80073ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e005      	b.n	80073c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80073be:	d101      	bne.n	80073c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e000      	b.n	80073c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073d0:	b084      	sub	sp, #16
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073ea:	2300      	movs	r3, #0
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	e009      	b.n	8007404 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	3340      	adds	r3, #64	@ 0x40
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	3301      	adds	r3, #1
 8007402:	613b      	str	r3, [r7, #16]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b0e      	cmp	r3, #14
 8007408:	d9f2      	bls.n	80073f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800740a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800740e:	2b00      	cmp	r3, #0
 8007410:	d11c      	bne.n	800744c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007420:	f043 0302 	orr.w	r3, r3, #2
 8007424:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e005      	b.n	8007458 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800745e:	461a      	mov	r2, r3
 8007460:	2300      	movs	r3, #0
 8007462:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007464:	2103      	movs	r1, #3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f95a 	bl	8007720 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800746c:	2110      	movs	r1, #16
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8f6 	bl	8007660 <USB_FlushTxFifo>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f920 	bl	80076c4 <USB_FlushRxFifo>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007494:	461a      	mov	r2, r3
 8007496:	2300      	movs	r3, #0
 8007498:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a0:	461a      	mov	r2, r3
 80074a2:	2300      	movs	r3, #0
 80074a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ac:	461a      	mov	r2, r3
 80074ae:	2300      	movs	r3, #0
 80074b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	e043      	b.n	8007540 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ce:	d118      	bne.n	8007502 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e2:	461a      	mov	r2, r3
 80074e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	e013      	b.n	8007514 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	461a      	mov	r2, r3
 80074fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	e008      	b.n	8007514 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750e:	461a      	mov	r2, r3
 8007510:	2300      	movs	r3, #0
 8007512:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007520:	461a      	mov	r2, r3
 8007522:	2300      	movs	r3, #0
 8007524:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007532:	461a      	mov	r2, r3
 8007534:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007538:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3301      	adds	r3, #1
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007544:	461a      	mov	r2, r3
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	4293      	cmp	r3, r2
 800754a:	d3b5      	bcc.n	80074b8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	e043      	b.n	80075da <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007568:	d118      	bne.n	800759c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757c:	461a      	mov	r2, r3
 800757e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e013      	b.n	80075ae <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007592:	461a      	mov	r2, r3
 8007594:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e008      	b.n	80075ae <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a8:	461a      	mov	r2, r3
 80075aa:	2300      	movs	r3, #0
 80075ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ba:	461a      	mov	r2, r3
 80075bc:	2300      	movs	r3, #0
 80075be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075cc:	461a      	mov	r2, r3
 80075ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	3301      	adds	r3, #1
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075de:	461a      	mov	r2, r3
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d3b5      	bcc.n	8007552 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007606:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f043 0210 	orr.w	r2, r3, #16
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	4b10      	ldr	r3, [pc, #64]	@ (800765c <USB_DevInit+0x28c>)
 800761a:	4313      	orrs	r3, r2
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007620:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f043 0208 	orr.w	r2, r3, #8
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007634:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007638:	2b01      	cmp	r3, #1
 800763a:	d107      	bne.n	800764c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007644:	f043 0304 	orr.w	r3, r3, #4
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007658:	b004      	add	sp, #16
 800765a:	4770      	bx	lr
 800765c:	803c3800 	.word	0x803c3800

08007660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800767a:	d901      	bls.n	8007680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e01b      	b.n	80076b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	daf2      	bge.n	800766e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	019b      	lsls	r3, r3, #6
 8007690:	f043 0220 	orr.w	r2, r3, #32
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076a4:	d901      	bls.n	80076aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e006      	b.n	80076b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d0f0      	beq.n	8007698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3301      	adds	r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076dc:	d901      	bls.n	80076e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e018      	b.n	8007714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	daf2      	bge.n	80076d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2210      	movs	r2, #16
 80076f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007700:	d901      	bls.n	8007706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e006      	b.n	8007714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b10      	cmp	r3, #16
 8007710:	d0f0      	beq.n	80076f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007740:	4313      	orrs	r3, r2
 8007742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800776c:	f023 0303 	bic.w	r3, r3, #3
 8007770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007780:	f043 0302 	orr.w	r3, r3, #2
 8007784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	f003 0301 	and.w	r3, r3, #1
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c8:	d901      	bls.n	80077ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e01b      	b.n	8007806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	daf2      	bge.n	80077bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f043 0201 	orr.w	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3301      	adds	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077f2:	d901      	bls.n	80077f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e006      	b.n	8007806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b01      	cmp	r3, #1
 8007802:	d0f0      	beq.n	80077e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b08c      	sub	sp, #48	@ 0x30
 8007816:	af00      	add	r7, sp, #0
 8007818:	603b      	str	r3, [r7, #0]
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
 800781e:	460b      	mov	r3, r1
 8007820:	71bb      	strb	r3, [r7, #6]
 8007822:	4613      	mov	r3, r2
 8007824:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800782a:	79bb      	ldrb	r3, [r7, #6]
 800782c:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800782e:	797b      	ldrb	r3, [r7, #5]
 8007830:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007832:	f107 030c 	add.w	r3, r7, #12
 8007836:	2207      	movs	r2, #7
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f005 fa52 	bl	800cce4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007840:	f107 0318 	add.w	r3, r7, #24
 8007844:	2218      	movs	r2, #24
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f005 fa4b 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800784e:	233f      	movs	r3, #63	@ 0x3f
 8007850:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007852:	238a      	movs	r3, #138	@ 0x8a
 8007854:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8007856:	f107 0314 	add.w	r3, r7, #20
 800785a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800785c:	2303      	movs	r3, #3
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8007866:	2307      	movs	r3, #7
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800786a:	f107 0318 	add.w	r3, r7, #24
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fc0f 	bl	8008094 <hci_send_req>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	da01      	bge.n	8007880 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800787c:	23ff      	movs	r3, #255	@ 0xff
 800787e:	e014      	b.n	80078aa <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007880:	7b3b      	ldrb	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8007886:	7b3b      	ldrb	r3, [r7, #12]
 8007888:	e00f      	b.n	80078aa <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800788a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800788e:	b29a      	uxth	r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007894:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007898:	b29a      	uxth	r2, r3
 800789a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800789e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3730      	adds	r7, #48	@ 0x30
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b08e      	sub	sp, #56	@ 0x38
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80078c6:	f107 0314 	add.w	r3, r7, #20
 80078ca:	2207      	movs	r2, #7
 80078cc:	2100      	movs	r1, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f005 fa08 	bl	800cce4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80078d4:	f107 0320 	add.w	r3, r7, #32
 80078d8:	2218      	movs	r2, #24
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f005 fa01 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80078e2:	233f      	movs	r3, #63	@ 0x3f
 80078e4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80078e6:	238a      	movs	r3, #138	@ 0x8a
 80078e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 80078ea:	f107 031c 	add.w	r3, r7, #28
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80078f0:	2301      	movs	r3, #1
 80078f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80078f4:	f107 0314 	add.w	r3, r7, #20
 80078f8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80078fa:	2307      	movs	r3, #7
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80078fe:	f107 0320 	add.w	r3, r7, #32
 8007902:	2100      	movs	r1, #0
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fbc5 	bl	8008094 <hci_send_req>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	da01      	bge.n	8007914 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8007910:	23ff      	movs	r3, #255	@ 0xff
 8007912:	e014      	b.n	800793e <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8007914:	7d3b      	ldrb	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800791a:	7d3b      	ldrb	r3, [r7, #20]
 800791c:	e00f      	b.n	800793e <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800791e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8007922:	b29a      	uxth	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007928:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800792c:	b29a      	uxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007932:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8007936:	b29a      	uxth	r2, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3738      	adds	r7, #56	@ 0x38
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8007946:	b590      	push	{r4, r7, lr}
 8007948:	b091      	sub	sp, #68	@ 0x44
 800794a:	af00      	add	r7, sp, #0
 800794c:	603a      	str	r2, [r7, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	4603      	mov	r3, r0
 8007952:	71fb      	strb	r3, [r7, #7]
 8007954:	460b      	mov	r3, r1
 8007956:	71bb      	strb	r3, [r7, #6]
 8007958:	4613      	mov	r3, r2
 800795a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800795c:	79fb      	ldrb	r3, [r7, #7]
 800795e:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8007960:	79bb      	ldrb	r3, [r7, #6]
 8007962:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8007964:	79bb      	ldrb	r3, [r7, #6]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	f107 030e 	add.w	r3, r7, #14
 8007970:	6814      	ldr	r4, [r2, #0]
 8007972:	6850      	ldr	r0, [r2, #4]
 8007974:	6891      	ldr	r1, [r2, #8]
 8007976:	68d2      	ldr	r2, [r2, #12]
 8007978:	601c      	str	r4, [r3, #0]
 800797a:	6058      	str	r0, [r3, #4]
 800797c:	6099      	str	r1, [r3, #8]
 800797e:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8007980:	797b      	ldrb	r3, [r7, #5]
 8007982:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8007984:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8007988:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800798a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800798e:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8007992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007994:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8007998:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800799c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80079a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079a4:	2218      	movs	r2, #24
 80079a6:	2100      	movs	r1, #0
 80079a8:	4618      	mov	r0, r3
 80079aa:	f005 f99b 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80079ae:	233f      	movs	r3, #63	@ 0x3f
 80079b0:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80079b2:	2386      	movs	r3, #134	@ 0x86
 80079b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 80079b6:	f107 030c 	add.w	r3, r7, #12
 80079ba:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 80079bc:	231a      	movs	r3, #26
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 80079c0:	f107 030b 	add.w	r3, r7, #11
 80079c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 80079c6:	2301      	movs	r3, #1
 80079c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80079ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fb5f 	bl	8008094 <hci_send_req>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	da01      	bge.n	80079e0 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80079dc:	23ff      	movs	r3, #255	@ 0xff
 80079de:	e005      	b.n	80079ec <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <aci_gap_set_auth_requirement+0xa4>
    return status;
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	e000      	b.n	80079ec <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3744      	adds	r7, #68	@ 0x44
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd90      	pop	{r4, r7, pc}

080079f4 <aci_gap_start_general_discovery_proc>:
  return status;
}

tBleStatus aci_gap_start_general_discovery_proc(uint16_t scanInterval, uint16_t scanWindow,
						uint8_t own_address_type, uint8_t filterDuplicates)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b08d      	sub	sp, #52	@ 0x34
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	4611      	mov	r1, r2
 8007a00:	461a      	mov	r2, r3
 8007a02:	4623      	mov	r3, r4
 8007a04:	80fb      	strh	r3, [r7, #6]
 8007a06:	4603      	mov	r3, r0
 8007a08:	80bb      	strh	r3, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  gap_start_general_discovery_proc_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	823b      	strh	r3, [r7, #16]
  cp.scanWindow = htobs(scanWindow);
 8007a16:	88bb      	ldrh	r3, [r7, #4]
 8007a18:	827b      	strh	r3, [r7, #18]
  cp.own_address_type = own_address_type;
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	753b      	strb	r3, [r7, #20]
  cp.filterDuplicates = filterDuplicates;
 8007a1e:	78bb      	ldrb	r3, [r7, #2]
 8007a20:	757b      	strb	r3, [r7, #21]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a22:	f107 0318 	add.w	r3, r7, #24
 8007a26:	2218      	movs	r2, #24
 8007a28:	2100      	movs	r1, #0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f005 f95a 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007a30:	233f      	movs	r3, #63	@ 0x3f
 8007a32:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_START_GENERAL_DISCOVERY_PROC;
 8007a34:	2397      	movs	r3, #151	@ 0x97
 8007a36:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8007a38:	f107 0310 	add.w	r3, r7, #16
 8007a3c:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007a3e:	2306      	movs	r3, #6
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.event = EVT_CMD_STATUS;
 8007a42:	230f      	movs	r3, #15
 8007a44:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8007a46:	f107 030f 	add.w	r3, r7, #15
 8007a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = 1;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007a50:	f107 0318 	add.w	r3, r7, #24
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fb1c 	bl	8008094 <hci_send_req>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da01      	bge.n	8007a66 <aci_gap_start_general_discovery_proc+0x72>
    return BLE_STATUS_TIMEOUT;
 8007a62:	23ff      	movs	r3, #255	@ 0xff
 8007a64:	e000      	b.n	8007a68 <aci_gap_start_general_discovery_proc+0x74>

  return status;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3734      	adds	r7, #52	@ 0x34
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd90      	pop	{r4, r7, pc}

08007a70 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	2218      	movs	r2, #24
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f005 f930 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007a84:	233f      	movs	r3, #63	@ 0x3f
 8007a86:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8007a88:	f240 1301 	movw	r3, #257	@ 0x101
 8007a8c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a8e:	1dfb      	adds	r3, r7, #7
 8007a90:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a92:	2301      	movs	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8007a96:	f107 0308 	add.w	r3, r7, #8
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 faf9 	bl	8008094 <hci_send_req>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da01      	bge.n	8007aac <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8007aa8:	23ff      	movs	r3, #255	@ 0xff
 8007aaa:	e000      	b.n	8007aae <aci_gatt_init+0x3e>

  return status;
 8007aac:	79fb      	ldrb	r3, [r7, #7]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8007ab6:	b590      	push	{r4, r7, lr}
 8007ab8:	b0ab      	sub	sp, #172	@ 0xac
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4623      	mov	r3, r4
 8007ac6:	80fb      	strh	r3, [r7, #6]
 8007ac8:	4603      	mov	r3, r0
 8007aca:	80bb      	strh	r3, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8007ada:	78bb      	ldrb	r3, [r7, #2]
 8007adc:	2b7a      	cmp	r3, #122	@ 0x7a
 8007ade:	d901      	bls.n	8007ae4 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8007ae0:	2342      	movs	r3, #66	@ 0x42
 8007ae2:	e074      	b.n	8007bce <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8007ae8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	4413      	add	r3, r2
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007af6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007afa:	3302      	adds	r3, #2
 8007afc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8007b00:	88bb      	ldrh	r3, [r7, #4]
 8007b02:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8007b04:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b08:	f107 0208 	add.w	r2, r7, #8
 8007b0c:	4413      	add	r3, r2
 8007b0e:	88ba      	ldrh	r2, [r7, #4]
 8007b10:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8007b12:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b16:	3302      	adds	r3, #2
 8007b18:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8007b1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b20:	33a8      	adds	r3, #168	@ 0xa8
 8007b22:	443b      	add	r3, r7
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8007b2a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b2e:	3301      	adds	r3, #1
 8007b30:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8007b34:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b38:	33a8      	adds	r3, #168	@ 0xa8
 8007b3a:	443b      	add	r3, r7
 8007b3c:	78ba      	ldrb	r2, [r7, #2]
 8007b3e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8007b42:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b46:	3301      	adds	r3, #1
 8007b48:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8007b4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b50:	f107 0208 	add.w	r2, r7, #8
 8007b54:	4413      	add	r3, r2
 8007b56:	78ba      	ldrb	r2, [r7, #2]
 8007b58:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f005 f952 	bl	800ce06 <memcpy>
  indx +=  charValueLen;
 8007b62:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8007b66:	78bb      	ldrb	r3, [r7, #2]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007b6e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007b72:	2218      	movs	r2, #24
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f005 f8b4 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007b7c:	233f      	movs	r3, #63	@ 0x3f
 8007b7e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8007b82:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8007b86:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8007b8a:	f107 0308 	add.w	r3, r7, #8
 8007b8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8007b92:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8007b96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8007b9a:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8007b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8007ba8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fa70 	bl	8008094 <hci_send_req>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	da01      	bge.n	8007bbe <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8007bba:	23ff      	movs	r3, #255	@ 0xff
 8007bbc:	e007      	b.n	8007bce <aci_gatt_update_char_value+0x118>

  if (status) {
 8007bbe:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <aci_gatt_update_char_value+0x116>
    return status;
 8007bc6:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8007bca:	e000      	b.n	8007bce <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	37ac      	adds	r7, #172	@ 0xac
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd90      	pop	{r4, r7, pc}

08007bd6 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b08a      	sub	sp, #40	@ 0x28
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	4603      	mov	r3, r0
 8007bde:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8007be0:	88fb      	ldrh	r3, [r7, #6]
 8007be2:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8007be4:	f107 0310 	add.w	r3, r7, #16
 8007be8:	2218      	movs	r2, #24
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f005 f879 	bl	800cce4 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8007bf2:	233f      	movs	r3, #63	@ 0x3f
 8007bf4:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8007bf6:	f240 1327 	movw	r3, #295	@ 0x127
 8007bfa:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8007bfc:	f107 030c 	add.w	r3, r7, #12
 8007c00:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8007c02:	2302      	movs	r3, #2
 8007c04:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8007c06:	f107 030b 	add.w	r3, r7, #11
 8007c0a:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8007c10:	f107 0310 	add.w	r3, r7, #16
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fa3c 	bl	8008094 <hci_send_req>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da01      	bge.n	8007c26 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8007c22:	23ff      	movs	r3, #255	@ 0xff
 8007c24:	e000      	b.n	8007c28 <aci_gatt_allow_read+0x52>

    return status;
 8007c26:	7afb      	ldrb	r3, [r7, #11]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3728      	adds	r7, #40	@ 0x28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b0ac      	sub	sp, #176	@ 0xb0
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60ba      	str	r2, [r7, #8]
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007c48:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007c4c:	2218      	movs	r2, #24
 8007c4e:	2100      	movs	r1, #0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f005 f847 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007c56:	233f      	movs	r3, #63	@ 0x3f
 8007c58:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8007c5c:	230d      	movs	r3, #13
 8007c5e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8007c62:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8007c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8007c70:	f107 0314 	add.w	r3, r7, #20
 8007c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8007c78:	2380      	movs	r3, #128	@ 0x80
 8007c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007c7e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 fa05 	bl	8008094 <hci_send_req>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	da01      	bge.n	8007c94 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8007c90:	23ff      	movs	r3, #255	@ 0xff
 8007c92:	e01e      	b.n	8007cd2 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8007c94:	7d3b      	ldrb	r3, [r7, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <aci_hal_read_config_data+0x6e>
    return rp.status;
 8007c9a:	7d3b      	ldrb	r3, [r7, #20]
 8007c9c:	e019      	b.n	8007cd2 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8007c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	89bb      	ldrh	r3, [r7, #12]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d201      	bcs.n	8007cbc <aci_hal_read_config_data+0x8c>
 8007cb8:	89ba      	ldrh	r2, [r7, #12]
 8007cba:	e002      	b.n	8007cc2 <aci_hal_read_config_data+0x92>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f107 0314 	add.w	r3, r7, #20
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f005 f89b 	bl	800ce06 <memcpy>
  
  return 0;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	37b0      	adds	r7, #176	@ 0xb0
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b08a      	sub	sp, #40	@ 0x28
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	71fb      	strb	r3, [r7, #7]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8007cee:	79bb      	ldrb	r3, [r7, #6]
 8007cf0:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007cf2:	f107 0310 	add.w	r3, r7, #16
 8007cf6:	2218      	movs	r2, #24
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f004 fff2 	bl	800cce4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007d00:	233f      	movs	r3, #63	@ 0x3f
 8007d02:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8007d04:	230f      	movs	r3, #15
 8007d06:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8007d0e:	2302      	movs	r3, #2
 8007d10:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8007d12:	f107 030b 	add.w	r3, r7, #11
 8007d16:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8007d1c:	f107 0310 	add.w	r3, r7, #16
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 f9b6 	bl	8008094 <hci_send_req>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	da01      	bge.n	8007d32 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8007d2e:	23ff      	movs	r3, #255	@ 0xff
 8007d30:	e000      	b.n	8007d34 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8007d32:	7afb      	ldrb	r3, [r7, #11]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3728      	adds	r7, #40	@ 0x28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8007d3c:	b590      	push	{r4, r7, lr}
 8007d3e:	b089      	sub	sp, #36	@ 0x24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8007d46:	f107 0410 	add.w	r4, r7, #16
 8007d4a:	f107 0215 	add.w	r2, r7, #21
 8007d4e:	f107 0112 	add.w	r1, r7, #18
 8007d52:	f107 0016 	add.w	r0, r7, #22
 8007d56:	f107 030e 	add.w	r3, r7, #14
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	f000 f851 	bl	8007e04 <hci_le_read_local_version>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d124      	bne.n	8007db6 <getBlueNRGVersion+0x7a>
    *hwVersion = hci_revision >> 8;
 8007d6c:	8a7b      	ldrh	r3, [r7, #18]
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8007d78:	8a7b      	ldrh	r3, [r7, #18]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b21a      	sxth	r2, r3
 8007d88:	89fb      	ldrh	r3, [r7, #14]
 8007d8a:	b21b      	sxth	r3, r3
 8007d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d90:	b21b      	sxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b21b      	sxth	r3, r3
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b21a      	sxth	r2, r3
 8007da2:	89fb      	ldrh	r3, [r7, #14]
 8007da4:	b21b      	sxth	r3, r3
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	b21b      	sxth	r3, r3
 8007dac:	4313      	orrs	r3, r2
 8007dae:	b21b      	sxth	r3, r3
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd90      	pop	{r4, r7, pc}

08007dc0 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007dc6:	f107 0308 	add.w	r3, r7, #8
 8007dca:	2218      	movs	r2, #24
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f004 ff88 	bl	800cce4 <memset>
  rq.ogf = OGF_HOST_CTL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ddc:	1dfb      	adds	r3, r7, #7
 8007dde:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007de0:	2301      	movs	r3, #1
 8007de2:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 f952 	bl	8008094 <hci_send_req>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	da01      	bge.n	8007dfa <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8007df6:	23ff      	movs	r3, #255	@ 0xff
 8007df8:	e000      	b.n	8007dfc <hci_reset+0x3c>
  
  return status;  
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3720      	adds	r7, #32
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08e      	sub	sp, #56	@ 0x38
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007e12:	f107 0314 	add.w	r3, r7, #20
 8007e16:	2209      	movs	r2, #9
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f004 ff62 	bl	800cce4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007e20:	f107 0320 	add.w	r3, r7, #32
 8007e24:	2218      	movs	r2, #24
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f004 ff5b 	bl	800cce4 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8007e2e:	2304      	movs	r3, #4
 8007e30:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8007e32:	2301      	movs	r3, #1
 8007e34:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8007e3e:	f107 0314 	add.w	r3, r7, #20
 8007e42:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8007e44:	2309      	movs	r3, #9
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007e48:	f107 0320 	add.w	r3, r7, #32
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f920 	bl	8008094 <hci_send_req>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	da01      	bge.n	8007e5e <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8007e5a:	23ff      	movs	r3, #255	@ 0xff
 8007e5c:	e018      	b.n	8007e90 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8007e5e:	7d3b      	ldrb	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <hci_le_read_local_version+0x64>
    return resp.status;
 8007e64:	7d3b      	ldrb	r3, [r7, #20]
 8007e66:	e013      	b.n	8007e90 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8007e68:	7d7a      	ldrb	r2, [r7, #21]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8007e6e:	8afa      	ldrh	r2, [r7, #22]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8007e74:	7e3a      	ldrb	r2, [r7, #24]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8007e7a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8007e84:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e8c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3738      	adds	r7, #56	@ 0x38
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d001      	beq.n	8007eb2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e00c      	b.n	8007ecc <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007ec0:	3b03      	subs	r3, #3
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d001      	beq.n	8007eca <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e000      	b.n	8007ecc <verify_packet+0x34>
  
  return 0;      
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b0a6      	sub	sp, #152	@ 0x98
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	607b      	str	r3, [r7, #4]
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	81fb      	strh	r3, [r7, #14]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	81bb      	strh	r3, [r7, #12]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8007eec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef4:	b21a      	sxth	r2, r3
 8007ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007efa:	029b      	lsls	r3, r3, #10
 8007efc:	b21b      	sxth	r3, r3
 8007efe:	4313      	orrs	r3, r2
 8007f00:	b21b      	sxth	r3, r3
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8007f06:	7afb      	ldrb	r3, [r7, #11]
 8007f08:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8007f0e:	f107 0318 	add.w	r3, r7, #24
 8007f12:	3301      	adds	r3, #1
 8007f14:	461a      	mov	r2, r3
 8007f16:	f107 0314 	add.w	r3, r7, #20
 8007f1a:	8819      	ldrh	r1, [r3, #0]
 8007f1c:	789b      	ldrb	r3, [r3, #2]
 8007f1e:	8011      	strh	r1, [r2, #0]
 8007f20:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8007f22:	f107 0318 	add.w	r3, r7, #24
 8007f26:	3304      	adds	r3, #4
 8007f28:	7afa      	ldrb	r2, [r7, #11]
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f004 ff6a 	bl	800ce06 <memcpy>
  
  if (hciContext.io.Send)
 8007f32:	4b09      	ldr	r3, [pc, #36]	@ (8007f58 <send_cmd+0x80>)
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d009      	beq.n	8007f4e <send_cmd+0x76>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8007f3a:	4b07      	ldr	r3, [pc, #28]	@ (8007f58 <send_cmd+0x80>)
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	7afa      	ldrb	r2, [r7, #11]
 8007f40:	b292      	uxth	r2, r2
 8007f42:	3204      	adds	r2, #4
 8007f44:	b291      	uxth	r1, r2
 8007f46:	f107 0218 	add.w	r2, r7, #24
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4798      	blx	r3
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3798      	adds	r7, #152	@ 0x98
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20001b48 	.word	0x20001b48

08007f5c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8007f66:	e00a      	b.n	8007f7e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8007f68:	f107 030c 	add.w	r3, r7, #12
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6838      	ldr	r0, [r7, #0]
 8007f70:	f000 fae8 	bl	8008544 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa4f 	bl	800841c <list_insert_head>
  while (!list_is_empty(src_list))
 8007f7e:	6838      	ldr	r0, [r7, #0]
 8007f80:	f000 fa2a 	bl	80083d8 <list_is_empty>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0ee      	beq.n	8007f68 <move_list+0xc>
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007f9a:	e009      	b.n	8007fb0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8007f9c:	1d3b      	adds	r3, r7, #4
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4809      	ldr	r0, [pc, #36]	@ (8007fc8 <free_event_list+0x34>)
 8007fa2:	f000 faa8 	bl	80084f6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4808      	ldr	r0, [pc, #32]	@ (8007fcc <free_event_list+0x38>)
 8007fac:	f000 fa5c 	bl	8008468 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8007fb0:	4806      	ldr	r0, [pc, #24]	@ (8007fcc <free_event_list+0x38>)
 8007fb2:	f000 faee 	bl	8008592 <list_get_size>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	ddef      	ble.n	8007f9c <free_event_list+0x8>
  }
}
 8007fbc:	bf00      	nop
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20001884 	.word	0x20001884
 8007fcc:	2000187c 	.word	0x2000187c

08007fd0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8007fe0:	4a18      	ldr	r2, [pc, #96]	@ (8008044 <hci_init+0x74>)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8007fe6:	4818      	ldr	r0, [pc, #96]	@ (8008048 <hci_init+0x78>)
 8007fe8:	f000 f9e6 	bl	80083b8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8007fec:	4817      	ldr	r0, [pc, #92]	@ (800804c <hci_init+0x7c>)
 8007fee:	f000 f9e3 	bl	80083b8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8007ff2:	f7f9 fce3 	bl	80019bc <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
 8007ffa:	e00c      	b.n	8008016 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	228c      	movs	r2, #140	@ 0x8c
 8008000:	fb02 f303 	mul.w	r3, r2, r3
 8008004:	4a12      	ldr	r2, [pc, #72]	@ (8008050 <hci_init+0x80>)
 8008006:	4413      	add	r3, r2
 8008008:	4619      	mov	r1, r3
 800800a:	480f      	ldr	r0, [pc, #60]	@ (8008048 <hci_init+0x78>)
 800800c:	f000 fa2c 	bl	8008468 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	3301      	adds	r3, #1
 8008014:	73fb      	strb	r3, [r7, #15]
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	2b04      	cmp	r3, #4
 800801a:	d9ef      	bls.n	8007ffc <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800801c:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <hci_init+0x74>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <hci_init+0x5c>
 8008024:	4b07      	ldr	r3, [pc, #28]	@ (8008044 <hci_init+0x74>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2000      	movs	r0, #0
 800802a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800802c:	4b05      	ldr	r3, [pc, #20]	@ (8008044 <hci_init+0x74>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <hci_init+0x6a>
 8008034:	4b03      	ldr	r3, [pc, #12]	@ (8008044 <hci_init+0x74>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4798      	blx	r3
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001b48 	.word	0x20001b48
 8008048:	2000187c 	.word	0x2000187c
 800804c:	20001884 	.word	0x20001884
 8008050:	2000188c 	.word	0x2000188c

08008054 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a0b      	ldr	r2, [pc, #44]	@ (8008090 <hci_register_io_bus+0x3c>)
 8008062:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	4a09      	ldr	r2, [pc, #36]	@ (8008090 <hci_register_io_bus+0x3c>)
 800806a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	4a07      	ldr	r2, [pc, #28]	@ (8008090 <hci_register_io_bus+0x3c>)
 8008072:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	4a05      	ldr	r2, [pc, #20]	@ (8008090 <hci_register_io_bus+0x3c>)
 800807a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	4a03      	ldr	r2, [pc, #12]	@ (8008090 <hci_register_io_bus+0x3c>)
 8008082:	6093      	str	r3, [r2, #8]
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20001b48 	.word	0x20001b48

08008094 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08e      	sub	sp, #56	@ 0x38
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	b21b      	sxth	r3, r3
 80080a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080aa:	b21a      	sxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b21b      	sxth	r3, r3
 80080b2:	029b      	lsls	r3, r3, #10
 80080b4:	b21b      	sxth	r3, r3
 80080b6:	4313      	orrs	r3, r2
 80080b8:	b21b      	sxth	r3, r3
 80080ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80080c0:	f107 0308 	add.w	r3, r7, #8
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f977 	bl	80083b8 <list_init_head>

  free_event_list();
 80080ca:	f7ff ff63 	bl	8007f94 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	8818      	ldrh	r0, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8859      	ldrh	r1, [r3, #2]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f7ff fefa 	bl	8007ed8 <send_cmd>
  
  if (async)
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <hci_send_req+0x5a>
  {
    return 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	e0e2      	b.n	80082b4 <hci_send_req+0x220>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80080ee:	f7fb faf7 	bl	80036e0 <HAL_GetTick>
 80080f2:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80080f4:	f7fb faf4 	bl	80036e0 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008102:	f200 80b3 	bhi.w	800826c <hci_send_req+0x1d8>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008106:	486d      	ldr	r0, [pc, #436]	@ (80082bc <hci_send_req+0x228>)
 8008108:	f000 f966 	bl	80083d8 <list_is_empty>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d000      	beq.n	8008114 <hci_send_req+0x80>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008112:	e7ef      	b.n	80080f4 <hci_send_req+0x60>
      {
        break;
 8008114:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	4619      	mov	r1, r3
 800811c:	4867      	ldr	r0, [pc, #412]	@ (80082bc <hci_send_req+0x228>)
 800811e:	f000 f9ea 	bl	80084f6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	3308      	adds	r3, #8
 8008126:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b04      	cmp	r3, #4
 800812e:	d17f      	bne.n	8008230 <hci_send_req+0x19c>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008132:	3301      	adds	r3, #1
 8008134:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3308      	adds	r3, #8
 800813a:	3303      	adds	r3, #3
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008144:	3b03      	subs	r3, #3
 8008146:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b3e      	cmp	r3, #62	@ 0x3e
 800814e:	d04c      	beq.n	80081ea <hci_send_req+0x156>
 8008150:	2b3e      	cmp	r3, #62	@ 0x3e
 8008152:	dc68      	bgt.n	8008226 <hci_send_req+0x192>
 8008154:	2b10      	cmp	r3, #16
 8008156:	f000 808b 	beq.w	8008270 <hci_send_req+0x1dc>
 800815a:	2b10      	cmp	r3, #16
 800815c:	dc63      	bgt.n	8008226 <hci_send_req+0x192>
 800815e:	2b0e      	cmp	r3, #14
 8008160:	d023      	beq.n	80081aa <hci_send_req+0x116>
 8008162:	2b0f      	cmp	r3, #15
 8008164:	d15f      	bne.n	8008226 <hci_send_req+0x192>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	b29b      	uxth	r3, r3
 8008170:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008172:	429a      	cmp	r2, r3
 8008174:	d17e      	bne.n	8008274 <hci_send_req+0x1e0>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b0f      	cmp	r3, #15
 800817c:	d004      	beq.n	8008188 <hci_send_req+0xf4>
          if (cs->status) {
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d051      	beq.n	800822a <hci_send_req+0x196>
            goto failed;
 8008186:	e078      	b.n	800827a <hci_send_req+0x1e6>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695a      	ldr	r2, [r3, #20]
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	429a      	cmp	r2, r3
 8008190:	bf28      	it	cs
 8008192:	461a      	movcs	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6918      	ldr	r0, [r3, #16]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081a4:	f004 fe2f 	bl	800ce06 <memcpy>
        goto done;
 80081a8:	e078      	b.n	800829c <hci_send_req+0x208>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d15d      	bne.n	8008278 <hci_send_req+0x1e4>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	3303      	adds	r3, #3
 80081c0:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	3b03      	subs	r3, #3
 80081c6:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	bf28      	it	cs
 80081d2:	461a      	movcs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6918      	ldr	r0, [r3, #16]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081e4:	f004 fe0f 	bl	800ce06 <memcpy>
        goto done;
 80081e8:	e058      	b.n	800829c <hci_send_req+0x208>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d118      	bne.n	800822e <hci_send_req+0x19a>
          break;
      
        len -= 1;
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	3b01      	subs	r3, #1
 8008200:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	429a      	cmp	r2, r3
 800820a:	bf28      	it	cs
 800820c:	461a      	movcs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6918      	ldr	r0, [r3, #16]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	1c59      	adds	r1, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	461a      	mov	r2, r3
 8008220:	f004 fdf1 	bl	800ce06 <memcpy>
        goto done;
 8008224:	e03a      	b.n	800829c <hci_send_req+0x208>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008226:	bf00      	nop
 8008228:	e002      	b.n	8008230 <hci_send_req+0x19c>
          break;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <hci_send_req+0x19c>
          break;
 800822e:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008230:	4823      	ldr	r0, [pc, #140]	@ (80082c0 <hci_send_req+0x22c>)
 8008232:	f000 f8d1 	bl	80083d8 <list_is_empty>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00d      	beq.n	8008258 <hci_send_req+0x1c4>
 800823c:	481f      	ldr	r0, [pc, #124]	@ (80082bc <hci_send_req+0x228>)
 800823e:	f000 f8cb 	bl	80083d8 <list_is_empty>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <hci_send_req+0x1c4>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	4619      	mov	r1, r3
 800824c:	481c      	ldr	r0, [pc, #112]	@ (80082c0 <hci_send_req+0x22c>)
 800824e:	f000 f90b 	bl	8008468 <list_insert_tail>
      hciReadPacket=NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	e008      	b.n	800826a <hci_send_req+0x1d6>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	f107 0308 	add.w	r3, r7, #8
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f000 f901 	bl	8008468 <list_insert_tail>
      hciReadPacket=NULL;
 8008266:	2300      	movs	r3, #0
 8008268:	613b      	str	r3, [r7, #16]
  {
 800826a:	e740      	b.n	80080ee <hci_send_req+0x5a>
        goto failed;
 800826c:	bf00      	nop
 800826e:	e004      	b.n	800827a <hci_send_req+0x1e6>
        goto failed;
 8008270:	bf00      	nop
 8008272:	e002      	b.n	800827a <hci_send_req+0x1e6>
          goto failed;
 8008274:	bf00      	nop
 8008276:	e000      	b.n	800827a <hci_send_req+0x1e6>
          goto failed;
 8008278:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d004      	beq.n	800828a <hci_send_req+0x1f6>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	4619      	mov	r1, r3
 8008284:	480e      	ldr	r0, [pc, #56]	@ (80082c0 <hci_send_req+0x22c>)
 8008286:	f000 f8c9 	bl	800841c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	4619      	mov	r1, r3
 8008290:	480a      	ldr	r0, [pc, #40]	@ (80082bc <hci_send_req+0x228>)
 8008292:	f7ff fe63 	bl	8007f5c <move_list>

  return -1;
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	e00b      	b.n	80082b4 <hci_send_req+0x220>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	4619      	mov	r1, r3
 80082a0:	4807      	ldr	r0, [pc, #28]	@ (80082c0 <hci_send_req+0x22c>)
 80082a2:	f000 f8bb 	bl	800841c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80082a6:	f107 0308 	add.w	r3, r7, #8
 80082aa:	4619      	mov	r1, r3
 80082ac:	4803      	ldr	r0, [pc, #12]	@ (80082bc <hci_send_req+0x228>)
 80082ae:	f7ff fe55 	bl	8007f5c <move_list>

  return 0;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3738      	adds	r7, #56	@ 0x38
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20001884 	.word	0x20001884
 80082c0:	2000187c 	.word	0x2000187c

080082c4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80082ce:	e013      	b.n	80082f8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80082d0:	1d3b      	adds	r3, r7, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	480e      	ldr	r0, [pc, #56]	@ (8008310 <hci_user_evt_proc+0x4c>)
 80082d6:	f000 f90e 	bl	80084f6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80082da:	4b0e      	ldr	r3, [pc, #56]	@ (8008314 <hci_user_evt_proc+0x50>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <hci_user_evt_proc+0x50>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	3208      	adds	r2, #8
 80082ea:	4610      	mov	r0, r2
 80082ec:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4619      	mov	r1, r3
 80082f2:	4809      	ldr	r0, [pc, #36]	@ (8008318 <hci_user_evt_proc+0x54>)
 80082f4:	f000 f8b8 	bl	8008468 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80082f8:	4805      	ldr	r0, [pc, #20]	@ (8008310 <hci_user_evt_proc+0x4c>)
 80082fa:	f000 f86d 	bl	80083d8 <list_is_empty>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0e5      	beq.n	80082d0 <hci_user_evt_proc+0xc>
  }
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20001884 	.word	0x20001884
 8008314:	20001b48 	.word	0x20001b48
 8008318:	2000187c 	.word	0x2000187c

0800831c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800832c:	481f      	ldr	r0, [pc, #124]	@ (80083ac <hci_notify_asynch_evt+0x90>)
 800832e:	f000 f853 	bl	80083d8 <list_is_empty>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d132      	bne.n	800839e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4619      	mov	r1, r3
 800833e:	481b      	ldr	r0, [pc, #108]	@ (80083ac <hci_notify_asynch_evt+0x90>)
 8008340:	f000 f8d9 	bl	80084f6 <list_remove_head>
    
    if (hciContext.io.Receive)
 8008344:	4b1a      	ldr	r3, [pc, #104]	@ (80083b0 <hci_notify_asynch_evt+0x94>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02a      	beq.n	80083a2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800834c:	4b18      	ldr	r3, [pc, #96]	@ (80083b0 <hci_notify_asynch_evt+0x94>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	3208      	adds	r2, #8
 8008354:	2180      	movs	r1, #128	@ 0x80
 8008356:	4610      	mov	r0, r2
 8008358:	4798      	blx	r3
 800835a:	4603      	mov	r3, r0
 800835c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800835e:	7cfb      	ldrb	r3, [r7, #19]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d016      	beq.n	8008392 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	7cfa      	ldrb	r2, [r7, #19]
 8008368:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff fd92 	bl	8007e98 <verify_packet>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4619      	mov	r1, r3
 800837e:	480d      	ldr	r0, [pc, #52]	@ (80083b4 <hci_notify_asynch_evt+0x98>)
 8008380:	f000 f872 	bl	8008468 <list_insert_tail>
 8008384:	e00d      	b.n	80083a2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4619      	mov	r1, r3
 800838a:	4808      	ldr	r0, [pc, #32]	@ (80083ac <hci_notify_asynch_evt+0x90>)
 800838c:	f000 f846 	bl	800841c <list_insert_head>
 8008390:	e007      	b.n	80083a2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4619      	mov	r1, r3
 8008396:	4805      	ldr	r0, [pc, #20]	@ (80083ac <hci_notify_asynch_evt+0x90>)
 8008398:	f000 f840 	bl	800841c <list_insert_head>
 800839c:	e001      	b.n	80083a2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80083a2:	697b      	ldr	r3, [r7, #20]

}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	2000187c 	.word	0x2000187c
 80083b0:	20001b48 	.word	0x20001b48
 80083b4:	20001884 	.word	0x20001884

080083b8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	605a      	str	r2, [r3, #4]
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e0:	f3ef 8310 	mrs	r3, PRIMASK
 80083e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80083e6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80083e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80083ea:	b672      	cpsid	i
}
 80083ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d102      	bne.n	80083fe <list_is_empty+0x26>
  {
    return_value = 1;
 80083f8:	2301      	movs	r3, #1
 80083fa:	75fb      	strb	r3, [r7, #23]
 80083fc:	e001      	b.n	8008402 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	75fb      	strb	r3, [r7, #23]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f383 8810 	msr	PRIMASK, r3
}
 800840c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008410:	4618      	mov	r0, r3
 8008412:	371c      	adds	r7, #28
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008426:	f3ef 8310 	mrs	r3, PRIMASK
 800842a:	60fb      	str	r3, [r7, #12]
  return(result);
 800842c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800842e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008430:	b672      	cpsid	i
}
 8008432:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	605a      	str	r2, [r3, #4]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f383 8810 	msr	PRIMASK, r3
}
 800845a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800845c:	bf00      	nop
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008472:	f3ef 8310 	mrs	r3, PRIMASK
 8008476:	60fb      	str	r3, [r7, #12]
  return(result);
 8008478:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800847a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800847c:	b672      	cpsid	i
}
 800847e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f383 8810 	msr	PRIMASK, r3
}
 80084a6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084bc:	f3ef 8310 	mrs	r3, PRIMASK
 80084c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80084c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80084c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80084c6:	b672      	cpsid	i
}
 80084c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6852      	ldr	r2, [r2, #4]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f383 8810 	msr	PRIMASK, r3
}
 80084e8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b086      	sub	sp, #24
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008500:	f3ef 8310 	mrs	r3, PRIMASK
 8008504:	60fb      	str	r3, [r7, #12]
  return(result);
 8008506:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800850a:	b672      	cpsid	i
}
 800850c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff ffca 	bl	80084b4 <list_remove_node>
  (*node)->next = NULL;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2200      	movs	r2, #0
 800852e:	605a      	str	r2, [r3, #4]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f383 8810 	msr	PRIMASK, r3
}
 800853a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800854e:	f3ef 8310 	mrs	r3, PRIMASK
 8008552:	60fb      	str	r3, [r7, #12]
  return(result);
 8008554:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008558:	b672      	cpsid	i
}
 800855a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff ffa3 	bl	80084b4 <list_remove_node>
  (*node)->next = NULL;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2200      	movs	r2, #0
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f383 8810 	msr	PRIMASK, r3
}
 8008588:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800858a:	bf00      	nop
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8008592:	b480      	push	{r7}
 8008594:	b089      	sub	sp, #36	@ 0x24
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  int size = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859e:	f3ef 8310 	mrs	r3, PRIMASK
 80085a2:	613b      	str	r3, [r7, #16]
  return(result);
 80085a4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085a8:	b672      	cpsid	i
}
 80085aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80085b2:	e005      	b.n	80085c0 <list_get_size+0x2e>
  {
    size++;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	3301      	adds	r3, #1
 80085b8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d1f5      	bne.n	80085b4 <list_get_size+0x22>
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f383 8810 	msr	PRIMASK, r3
}
 80085d2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80085d4:	69fb      	ldr	r3, [r7, #28]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3724      	adds	r7, #36	@ 0x24
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <__NVIC_SetPriority>:
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	6039      	str	r1, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	db0a      	blt.n	800860e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	490c      	ldr	r1, [pc, #48]	@ (8008630 <__NVIC_SetPriority+0x4c>)
 80085fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008602:	0112      	lsls	r2, r2, #4
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	440b      	add	r3, r1
 8008608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800860c:	e00a      	b.n	8008624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	b2da      	uxtb	r2, r3
 8008612:	4908      	ldr	r1, [pc, #32]	@ (8008634 <__NVIC_SetPriority+0x50>)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	3b04      	subs	r3, #4
 800861c:	0112      	lsls	r2, r2, #4
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	440b      	add	r3, r1
 8008622:	761a      	strb	r2, [r3, #24]
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	e000e100 	.word	0xe000e100
 8008634:	e000ed00 	.word	0xe000ed00

08008638 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800863c:	2100      	movs	r1, #0
 800863e:	f06f 0004 	mvn.w	r0, #4
 8008642:	f7ff ffcf 	bl	80085e4 <__NVIC_SetPriority>
#endif
}
 8008646:	bf00      	nop
 8008648:	bd80      	pop	{r7, pc}
	...

0800864c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008652:	f3ef 8305 	mrs	r3, IPSR
 8008656:	603b      	str	r3, [r7, #0]
  return(result);
 8008658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800865e:	f06f 0305 	mvn.w	r3, #5
 8008662:	607b      	str	r3, [r7, #4]
 8008664:	e00c      	b.n	8008680 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008666:	4b0a      	ldr	r3, [pc, #40]	@ (8008690 <osKernelInitialize+0x44>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d105      	bne.n	800867a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800866e:	4b08      	ldr	r3, [pc, #32]	@ (8008690 <osKernelInitialize+0x44>)
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008674:	2300      	movs	r3, #0
 8008676:	607b      	str	r3, [r7, #4]
 8008678:	e002      	b.n	8008680 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800867a:	f04f 33ff 	mov.w	r3, #4294967295
 800867e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008680:	687b      	ldr	r3, [r7, #4]
}
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20001b68 	.word	0x20001b68

08008694 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800869a:	f3ef 8305 	mrs	r3, IPSR
 800869e:	603b      	str	r3, [r7, #0]
  return(result);
 80086a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80086a6:	f06f 0305 	mvn.w	r3, #5
 80086aa:	607b      	str	r3, [r7, #4]
 80086ac:	e010      	b.n	80086d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086ae:	4b0b      	ldr	r3, [pc, #44]	@ (80086dc <osKernelStart+0x48>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d109      	bne.n	80086ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086b6:	f7ff ffbf 	bl	8008638 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086ba:	4b08      	ldr	r3, [pc, #32]	@ (80086dc <osKernelStart+0x48>)
 80086bc:	2202      	movs	r2, #2
 80086be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086c0:	f001 fc7a 	bl	8009fb8 <vTaskStartScheduler>
      stat = osOK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	607b      	str	r3, [r7, #4]
 80086c8:	e002      	b.n	80086d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80086ca:	f04f 33ff 	mov.w	r3, #4294967295
 80086ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086d0:	687b      	ldr	r3, [r7, #4]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20001b68 	.word	0x20001b68

080086e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08e      	sub	sp, #56	@ 0x38
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086f0:	f3ef 8305 	mrs	r3, IPSR
 80086f4:	617b      	str	r3, [r7, #20]
  return(result);
 80086f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d17e      	bne.n	80087fa <osThreadNew+0x11a>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d07b      	beq.n	80087fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008702:	2380      	movs	r3, #128	@ 0x80
 8008704:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008706:	2318      	movs	r3, #24
 8008708:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800870e:	f04f 33ff 	mov.w	r3, #4294967295
 8008712:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d045      	beq.n	80087a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <osThreadNew+0x48>
        name = attr->name;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <osThreadNew+0x6e>
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b38      	cmp	r3, #56	@ 0x38
 8008740:	d805      	bhi.n	800874e <osThreadNew+0x6e>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <osThreadNew+0x72>
        return (NULL);
 800874e:	2300      	movs	r3, #0
 8008750:	e054      	b.n	80087fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00e      	beq.n	8008788 <osThreadNew+0xa8>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008770:	d90a      	bls.n	8008788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <osThreadNew+0xa8>
        mem = 1;
 8008782:	2301      	movs	r3, #1
 8008784:	61bb      	str	r3, [r7, #24]
 8008786:	e010      	b.n	80087aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10c      	bne.n	80087aa <osThreadNew+0xca>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d108      	bne.n	80087aa <osThreadNew+0xca>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <osThreadNew+0xca>
          mem = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	e001      	b.n	80087aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d110      	bne.n	80087d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087b8:	9202      	str	r2, [sp, #8]
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6a3a      	ldr	r2, [r7, #32]
 80087c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f001 fa50 	bl	8009c6c <xTaskCreateStatic>
 80087cc:	4603      	mov	r3, r0
 80087ce:	613b      	str	r3, [r7, #16]
 80087d0:	e013      	b.n	80087fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d110      	bne.n	80087fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	f107 0310 	add.w	r3, r7, #16
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f001 fa9e 	bl	8009d2c <xTaskCreate>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d001      	beq.n	80087fa <osThreadNew+0x11a>
            hTask = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80087fa:	693b      	ldr	r3, [r7, #16]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3728      	adds	r7, #40	@ 0x28
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	@ 0x28
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008814:	f3ef 8305 	mrs	r3, IPSR
 8008818:	613b      	str	r3, [r7, #16]
  return(result);
 800881a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800881c:	2b00      	cmp	r3, #0
 800881e:	d175      	bne.n	800890c <osSemaphoreNew+0x108>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d072      	beq.n	800890c <osSemaphoreNew+0x108>
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	429a      	cmp	r2, r3
 800882c:	d86e      	bhi.n	800890c <osSemaphoreNew+0x108>
    mem = -1;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
 8008832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d015      	beq.n	8008866 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d006      	beq.n	8008850 <osSemaphoreNew+0x4c>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	2b4f      	cmp	r3, #79	@ 0x4f
 8008848:	d902      	bls.n	8008850 <osSemaphoreNew+0x4c>
        mem = 1;
 800884a:	2301      	movs	r3, #1
 800884c:	61bb      	str	r3, [r7, #24]
 800884e:	e00c      	b.n	800886a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d108      	bne.n	800886a <osSemaphoreNew+0x66>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <osSemaphoreNew+0x66>
          mem = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	61bb      	str	r3, [r7, #24]
 8008864:	e001      	b.n	800886a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d04c      	beq.n	800890c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d128      	bne.n	80088ca <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d10a      	bne.n	8008894 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2203      	movs	r2, #3
 8008884:	9200      	str	r2, [sp, #0]
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	2001      	movs	r0, #1
 800888c:	f000 fa2c 	bl	8008ce8 <xQueueGenericCreateStatic>
 8008890:	61f8      	str	r0, [r7, #28]
 8008892:	e005      	b.n	80088a0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008894:	2203      	movs	r2, #3
 8008896:	2100      	movs	r1, #0
 8008898:	2001      	movs	r0, #1
 800889a:	f000 faa2 	bl	8008de2 <xQueueGenericCreate>
 800889e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d022      	beq.n	80088ec <osSemaphoreNew+0xe8>
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d01f      	beq.n	80088ec <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80088ac:	2300      	movs	r3, #0
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	69f8      	ldr	r0, [r7, #28]
 80088b4:	f000 fb62 	bl	8008f7c <xQueueGenericSend>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d016      	beq.n	80088ec <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80088be:	69f8      	ldr	r0, [r7, #28]
 80088c0:	f001 f800 	bl	80098c4 <vQueueDelete>
            hSemaphore = NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	e010      	b.n	80088ec <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d108      	bne.n	80088e2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	461a      	mov	r2, r3
 80088d6:	68b9      	ldr	r1, [r7, #8]
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fae0 	bl	8008e9e <xQueueCreateCountingSemaphoreStatic>
 80088de:	61f8      	str	r0, [r7, #28]
 80088e0:	e004      	b.n	80088ec <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fb13 	bl	8008f10 <xQueueCreateCountingSemaphore>
 80088ea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <osSemaphoreNew+0xfc>
          name = attr->name;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	e001      	b.n	8008904 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008904:	6979      	ldr	r1, [r7, #20]
 8008906:	69f8      	ldr	r0, [r7, #28]
 8008908:	f001 f928 	bl	8009b5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800890c:	69fb      	ldr	r3, [r7, #28]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3720      	adds	r7, #32
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d103      	bne.n	8008938 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008930:	f06f 0303 	mvn.w	r3, #3
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	e039      	b.n	80089ac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008938:	f3ef 8305 	mrs	r3, IPSR
 800893c:	60fb      	str	r3, [r7, #12]
  return(result);
 800893e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008940:	2b00      	cmp	r3, #0
 8008942:	d022      	beq.n	800898a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800894a:	f06f 0303 	mvn.w	r3, #3
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	e02c      	b.n	80089ac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008956:	f107 0308 	add.w	r3, r7, #8
 800895a:	461a      	mov	r2, r3
 800895c:	2100      	movs	r1, #0
 800895e:	6938      	ldr	r0, [r7, #16]
 8008960:	f000 ff2e 	bl	80097c0 <xQueueReceiveFromISR>
 8008964:	4603      	mov	r3, r0
 8008966:	2b01      	cmp	r3, #1
 8008968:	d003      	beq.n	8008972 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800896a:	f06f 0302 	mvn.w	r3, #2
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e01c      	b.n	80089ac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d019      	beq.n	80089ac <osSemaphoreAcquire+0x94>
 8008978:	4b0f      	ldr	r3, [pc, #60]	@ (80089b8 <osSemaphoreAcquire+0xa0>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	e010      	b.n	80089ac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6938      	ldr	r0, [r7, #16]
 800898e:	f000 fe07 	bl	80095a0 <xQueueSemaphoreTake>
 8008992:	4603      	mov	r3, r0
 8008994:	2b01      	cmp	r3, #1
 8008996:	d009      	beq.n	80089ac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800899e:	f06f 0301 	mvn.w	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e002      	b.n	80089ac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80089a6:	f06f 0302 	mvn.w	r3, #2
 80089aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80089ac:	697b      	ldr	r3, [r7, #20]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80089d2:	f06f 0303 	mvn.w	r3, #3
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	e02c      	b.n	8008a34 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089da:	f3ef 8305 	mrs	r3, IPSR
 80089de:	60fb      	str	r3, [r7, #12]
  return(result);
 80089e0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01a      	beq.n	8008a1c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	4619      	mov	r1, r3
 80089f0:	6938      	ldr	r0, [r7, #16]
 80089f2:	f000 fc63 	bl	80092bc <xQueueGiveFromISR>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d003      	beq.n	8008a04 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80089fc:	f06f 0302 	mvn.w	r3, #2
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e017      	b.n	8008a34 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d014      	beq.n	8008a34 <osSemaphoreRelease+0x78>
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a40 <osSemaphoreRelease+0x84>)
 8008a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	e00b      	b.n	8008a34 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	6938      	ldr	r0, [r7, #16]
 8008a24:	f000 faaa 	bl	8008f7c <xQueueGenericSend>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d002      	beq.n	8008a34 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008a2e:	f06f 0302 	mvn.w	r3, #2
 8008a32:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008a34:	697b      	ldr	r3, [r7, #20]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a07      	ldr	r2, [pc, #28]	@ (8008a70 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4a06      	ldr	r2, [pc, #24]	@ (8008a74 <vApplicationGetIdleTaskMemory+0x30>)
 8008a5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2280      	movs	r2, #128	@ 0x80
 8008a60:	601a      	str	r2, [r3, #0]
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20001b6c 	.word	0x20001b6c
 8008a74:	20001bc8 	.word	0x20001bc8

08008a78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4a07      	ldr	r2, [pc, #28]	@ (8008aa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	4a06      	ldr	r2, [pc, #24]	@ (8008aa8 <vApplicationGetTimerTaskMemory+0x30>)
 8008a8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a96:	601a      	str	r2, [r3, #0]
}
 8008a98:	bf00      	nop
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	20001dc8 	.word	0x20001dc8
 8008aa8:	20001e24 	.word	0x20001e24

08008aac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f103 0208 	add.w	r2, r3, #8
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f103 0208 	add.w	r2, r3, #8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f103 0208 	add.w	r2, r3, #8
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008afa:	bf00      	nop
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	601a      	str	r2, [r3, #0]
}
 8008b42:	bf00      	nop
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b64:	d103      	bne.n	8008b6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	e00c      	b.n	8008b88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3308      	adds	r3, #8
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e002      	b.n	8008b7c <vListInsert+0x2e>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d2f6      	bcs.n	8008b76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	6892      	ldr	r2, [r2, #8]
 8008bd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6852      	ldr	r2, [r2, #4]
 8008be0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d103      	bne.n	8008bf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	1e5a      	subs	r2, r3, #1
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10b      	bne.n	8008c40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c3a:	bf00      	nop
 8008c3c:	bf00      	nop
 8008c3e:	e7fd      	b.n	8008c3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c40:	f002 fc72 	bl	800b528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c4c:	68f9      	ldr	r1, [r7, #12]
 8008c4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	441a      	add	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c70:	3b01      	subs	r3, #1
 8008c72:	68f9      	ldr	r1, [r7, #12]
 8008c74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008c76:	fb01 f303 	mul.w	r3, r1, r3
 8008c7a:	441a      	add	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	22ff      	movs	r2, #255	@ 0xff
 8008c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	22ff      	movs	r2, #255	@ 0xff
 8008c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d114      	bne.n	8008cc0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d01a      	beq.n	8008cd4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3310      	adds	r3, #16
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 fc16 	bl	800a4d4 <xTaskRemoveFromEventList>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d012      	beq.n	8008cd4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008cae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce4 <xQueueGenericReset+0xd0>)
 8008cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	e009      	b.n	8008cd4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3310      	adds	r3, #16
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff fef1 	bl	8008aac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3324      	adds	r3, #36	@ 0x24
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff feec 	bl	8008aac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008cd4:	f002 fc5a 	bl	800b58c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008cd8:	2301      	movs	r3, #1
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	e000ed04 	.word	0xe000ed04

08008ce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08e      	sub	sp, #56	@ 0x38
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	e7fd      	b.n	8008d10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10b      	bne.n	8008d32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <xQueueGenericCreateStatic+0x56>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <xQueueGenericCreateStatic+0x5a>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <xQueueGenericCreateStatic+0x5c>
 8008d42:	2300      	movs	r3, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	623b      	str	r3, [r7, #32]
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	e7fd      	b.n	8008d5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d102      	bne.n	8008d6c <xQueueGenericCreateStatic+0x84>
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <xQueueGenericCreateStatic+0x88>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e000      	b.n	8008d72 <xQueueGenericCreateStatic+0x8a>
 8008d70:	2300      	movs	r3, #0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10b      	bne.n	8008d8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	61fb      	str	r3, [r7, #28]
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	e7fd      	b.n	8008d8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d8e:	2350      	movs	r3, #80	@ 0x50
 8008d90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b50      	cmp	r3, #80	@ 0x50
 8008d96:	d00b      	beq.n	8008db0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	61bb      	str	r3, [r7, #24]
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008db0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00d      	beq.n	8008dd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008dc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f840 	bl	8008e58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3730      	adds	r7, #48	@ 0x30
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b08a      	sub	sp, #40	@ 0x28
 8008de6:	af02      	add	r7, sp, #8
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	4613      	mov	r3, r2
 8008dee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	613b      	str	r3, [r7, #16]
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	fb02 f303 	mul.w	r3, r2, r3
 8008e16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	3350      	adds	r3, #80	@ 0x50
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 fca5 	bl	800b76c <pvPortMalloc>
 8008e22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d011      	beq.n	8008e4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	3350      	adds	r3, #80	@ 0x50
 8008e32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e3c:	79fa      	ldrb	r2, [r7, #7]
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	4613      	mov	r3, r2
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f805 	bl	8008e58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d103      	bne.n	8008e74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e002      	b.n	8008e7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e86:	2101      	movs	r1, #1
 8008e88:	69b8      	ldr	r0, [r7, #24]
 8008e8a:	f7ff fec3 	bl	8008c14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b08a      	sub	sp, #40	@ 0x28
 8008ea2:	af02      	add	r7, sp, #8
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10b      	bne.n	8008ec8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	61bb      	str	r3, [r7, #24]
}
 8008ec2:	bf00      	nop
 8008ec4:	bf00      	nop
 8008ec6:	e7fd      	b.n	8008ec4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d90b      	bls.n	8008ee8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	617b      	str	r3, [r7, #20]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ee8:	2302      	movs	r3, #2
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fef8 	bl	8008ce8 <xQueueGenericCreateStatic>
 8008ef8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f06:	69fb      	ldr	r3, [r7, #28]
	}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10b      	bne.n	8008f38 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	613b      	str	r3, [r7, #16]
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	e7fd      	b.n	8008f34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d90b      	bls.n	8008f58 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	60fb      	str	r3, [r7, #12]
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f58:	2202      	movs	r2, #2
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff ff40 	bl	8008de2 <xQueueGenericCreate>
 8008f62:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f70:	697b      	ldr	r3, [r7, #20]
	}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
	...

08008f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08e      	sub	sp, #56	@ 0x38
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10b      	bne.n	8008fb0 <xQueueGenericSend+0x34>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	e7fd      	b.n	8008fac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d103      	bne.n	8008fbe <xQueueGenericSend+0x42>
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <xQueueGenericSend+0x46>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e000      	b.n	8008fc4 <xQueueGenericSend+0x48>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10b      	bne.n	8008fe0 <xQueueGenericSend+0x64>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fda:	bf00      	nop
 8008fdc:	bf00      	nop
 8008fde:	e7fd      	b.n	8008fdc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d103      	bne.n	8008fee <xQueueGenericSend+0x72>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <xQueueGenericSend+0x76>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <xQueueGenericSend+0x78>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10b      	bne.n	8009010 <xQueueGenericSend+0x94>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	623b      	str	r3, [r7, #32]
}
 800900a:	bf00      	nop
 800900c:	bf00      	nop
 800900e:	e7fd      	b.n	800900c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009010:	f001 fc20 	bl	800a854 <xTaskGetSchedulerState>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d102      	bne.n	8009020 <xQueueGenericSend+0xa4>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <xQueueGenericSend+0xa8>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <xQueueGenericSend+0xaa>
 8009024:	2300      	movs	r3, #0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10b      	bne.n	8009042 <xQueueGenericSend+0xc6>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	61fb      	str	r3, [r7, #28]
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	e7fd      	b.n	800903e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009042:	f002 fa71 	bl	800b528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800904e:	429a      	cmp	r2, r3
 8009050:	d302      	bcc.n	8009058 <xQueueGenericSend+0xdc>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d129      	bne.n	80090ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800905e:	f000 fc6d 	bl	800993c <prvCopyDataToQueue>
 8009062:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009068:	2b00      	cmp	r3, #0
 800906a:	d010      	beq.n	800908e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800906c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906e:	3324      	adds	r3, #36	@ 0x24
 8009070:	4618      	mov	r0, r3
 8009072:	f001 fa2f 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d013      	beq.n	80090a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800907c:	4b3f      	ldr	r3, [pc, #252]	@ (800917c <xQueueGenericSend+0x200>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	e00a      	b.n	80090a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800908e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d007      	beq.n	80090a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009094:	4b39      	ldr	r3, [pc, #228]	@ (800917c <xQueueGenericSend+0x200>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090a4:	f002 fa72 	bl	800b58c <vPortExitCritical>
				return pdPASS;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e063      	b.n	8009174 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090b2:	f002 fa6b 	bl	800b58c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e05c      	b.n	8009174 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d106      	bne.n	80090ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 fa69 	bl	800a59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090ca:	2301      	movs	r3, #1
 80090cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090ce:	f002 fa5d 	bl	800b58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090d2:	f000 ffd9 	bl	800a088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090d6:	f002 fa27 	bl	800b528 <vPortEnterCritical>
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090e0:	b25b      	sxtb	r3, r3
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d103      	bne.n	80090f0 <xQueueGenericSend+0x174>
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fc:	d103      	bne.n	8009106 <xQueueGenericSend+0x18a>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009106:	f002 fa41 	bl	800b58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800910a:	1d3a      	adds	r2, r7, #4
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	4611      	mov	r1, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f001 fa58 	bl	800a5c8 <xTaskCheckForTimeOut>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d124      	bne.n	8009168 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800911e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009120:	f000 fd04 	bl	8009b2c <prvIsQueueFull>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d018      	beq.n	800915c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	3310      	adds	r3, #16
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f001 f97c 	bl	800a430 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800913a:	f000 fc8f 	bl	8009a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800913e:	f000 ffb1 	bl	800a0a4 <xTaskResumeAll>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	f47f af7c 	bne.w	8009042 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800914a:	4b0c      	ldr	r3, [pc, #48]	@ (800917c <xQueueGenericSend+0x200>)
 800914c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	e772      	b.n	8009042 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800915c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800915e:	f000 fc7d 	bl	8009a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009162:	f000 ff9f 	bl	800a0a4 <xTaskResumeAll>
 8009166:	e76c      	b.n	8009042 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800916a:	f000 fc77 	bl	8009a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800916e:	f000 ff99 	bl	800a0a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009172:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009174:	4618      	mov	r0, r3
 8009176:	3738      	adds	r7, #56	@ 0x38
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b090      	sub	sp, #64	@ 0x40
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10b      	bne.n	80091b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091aa:	bf00      	nop
 80091ac:	bf00      	nop
 80091ae:	e7fd      	b.n	80091ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d103      	bne.n	80091be <xQueueGenericSendFromISR+0x3e>
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <xQueueGenericSendFromISR+0x42>
 80091be:	2301      	movs	r3, #1
 80091c0:	e000      	b.n	80091c4 <xQueueGenericSendFromISR+0x44>
 80091c2:	2300      	movs	r3, #0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10b      	bne.n	80091e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091da:	bf00      	nop
 80091dc:	bf00      	nop
 80091de:	e7fd      	b.n	80091dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d103      	bne.n	80091ee <xQueueGenericSendFromISR+0x6e>
 80091e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d101      	bne.n	80091f2 <xQueueGenericSendFromISR+0x72>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <xQueueGenericSendFromISR+0x74>
 80091f2:	2300      	movs	r3, #0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10b      	bne.n	8009210 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	623b      	str	r3, [r7, #32]
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	e7fd      	b.n	800920c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009210:	f002 fa6a 	bl	800b6e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009214:	f3ef 8211 	mrs	r2, BASEPRI
 8009218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	61fa      	str	r2, [r7, #28]
 800922a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800922c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009238:	429a      	cmp	r2, r3
 800923a:	d302      	bcc.n	8009242 <xQueueGenericSendFromISR+0xc2>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d12f      	bne.n	80092a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009248:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009258:	f000 fb70 	bl	800993c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800925c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009264:	d112      	bne.n	800928c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d016      	beq.n	800929c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	3324      	adds	r3, #36	@ 0x24
 8009272:	4618      	mov	r0, r3
 8009274:	f001 f92e 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00e      	beq.n	800929c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	e007      	b.n	800929c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800928c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009290:	3301      	adds	r3, #1
 8009292:	b2db      	uxtb	r3, r3
 8009294:	b25a      	sxtb	r2, r3
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800929c:	2301      	movs	r3, #1
 800929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80092a0:	e001      	b.n	80092a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3740      	adds	r7, #64	@ 0x40
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08e      	sub	sp, #56	@ 0x38
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80092ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10b      	bne.n	80092e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	623b      	str	r3, [r7, #32]
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	e7fd      	b.n	80092e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	61fb      	str	r3, [r7, #28]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d103      	bne.n	8009318 <xQueueGiveFromISR+0x5c>
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d101      	bne.n	800931c <xQueueGiveFromISR+0x60>
 8009318:	2301      	movs	r3, #1
 800931a:	e000      	b.n	800931e <xQueueGiveFromISR+0x62>
 800931c:	2300      	movs	r3, #0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	61bb      	str	r3, [r7, #24]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800933a:	f002 f9d5 	bl	800b6e8 <vPortValidateInterruptPriority>
	__asm volatile
 800933e:	f3ef 8211 	mrs	r2, BASEPRI
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	617a      	str	r2, [r7, #20]
 8009354:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009356:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009358:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009366:	429a      	cmp	r2, r3
 8009368:	d22b      	bcs.n	80093c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800937c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d112      	bne.n	80093ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938a:	2b00      	cmp	r3, #0
 800938c:	d016      	beq.n	80093bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800938e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009390:	3324      	adds	r3, #36	@ 0x24
 8009392:	4618      	mov	r0, r3
 8009394:	f001 f89e 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00e      	beq.n	80093bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00b      	beq.n	80093bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	e007      	b.n	80093bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093b0:	3301      	adds	r3, #1
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	b25a      	sxtb	r2, r3
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80093bc:	2301      	movs	r3, #1
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	e001      	b.n	80093c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f383 8811 	msr	BASEPRI, r3
}
 80093d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3738      	adds	r7, #56	@ 0x38
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08c      	sub	sp, #48	@ 0x30
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093e8:	2300      	movs	r3, #0
 80093ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <xQueueReceive+0x32>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	623b      	str	r3, [r7, #32]
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <xQueueReceive+0x40>
 8009414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <xQueueReceive+0x44>
 800941c:	2301      	movs	r3, #1
 800941e:	e000      	b.n	8009422 <xQueueReceive+0x46>
 8009420:	2300      	movs	r3, #0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <xQueueReceive+0x62>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	61fb      	str	r3, [r7, #28]
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	e7fd      	b.n	800943a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800943e:	f001 fa09 	bl	800a854 <xTaskGetSchedulerState>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <xQueueReceive+0x72>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <xQueueReceive+0x76>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <xQueueReceive+0x78>
 8009452:	2300      	movs	r3, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <xQueueReceive+0x94>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	61bb      	str	r3, [r7, #24]
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	e7fd      	b.n	800946c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009470:	f002 f85a 	bl	800b528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01f      	beq.n	80094c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009484:	f000 fac4 	bl	8009a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	1e5a      	subs	r2, r3, #1
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00f      	beq.n	80094b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	3310      	adds	r3, #16
 800949c:	4618      	mov	r0, r3
 800949e:	f001 f819 	bl	800a4d4 <xTaskRemoveFromEventList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094a8:	4b3c      	ldr	r3, [pc, #240]	@ (800959c <xQueueReceive+0x1c0>)
 80094aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094b8:	f002 f868 	bl	800b58c <vPortExitCritical>
				return pdPASS;
 80094bc:	2301      	movs	r3, #1
 80094be:	e069      	b.n	8009594 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094c6:	f002 f861 	bl	800b58c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e062      	b.n	8009594 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094d4:	f107 0310 	add.w	r3, r7, #16
 80094d8:	4618      	mov	r0, r3
 80094da:	f001 f85f 	bl	800a59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094de:	2301      	movs	r3, #1
 80094e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094e2:	f002 f853 	bl	800b58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094e6:	f000 fdcf 	bl	800a088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ea:	f002 f81d 	bl	800b528 <vPortEnterCritical>
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094f4:	b25b      	sxtb	r3, r3
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d103      	bne.n	8009504 <xQueueReceive+0x128>
 80094fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800950a:	b25b      	sxtb	r3, r3
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d103      	bne.n	800951a <xQueueReceive+0x13e>
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800951a:	f002 f837 	bl	800b58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800951e:	1d3a      	adds	r2, r7, #4
 8009520:	f107 0310 	add.w	r3, r7, #16
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f001 f84e 	bl	800a5c8 <xTaskCheckForTimeOut>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d123      	bne.n	800957a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009534:	f000 fae4 	bl	8009b00 <prvIsQueueEmpty>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d017      	beq.n	800956e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	3324      	adds	r3, #36	@ 0x24
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f000 ff72 	bl	800a430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800954c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800954e:	f000 fa85 	bl	8009a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009552:	f000 fda7 	bl	800a0a4 <xTaskResumeAll>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d189      	bne.n	8009470 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800955c:	4b0f      	ldr	r3, [pc, #60]	@ (800959c <xQueueReceive+0x1c0>)
 800955e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	e780      	b.n	8009470 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800956e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009570:	f000 fa74 	bl	8009a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009574:	f000 fd96 	bl	800a0a4 <xTaskResumeAll>
 8009578:	e77a      	b.n	8009470 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800957a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800957c:	f000 fa6e 	bl	8009a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009580:	f000 fd90 	bl	800a0a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009586:	f000 fabb 	bl	8009b00 <prvIsQueueEmpty>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	f43f af6f 	beq.w	8009470 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009592:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009594:	4618      	mov	r0, r3
 8009596:	3730      	adds	r7, #48	@ 0x30
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	e000ed04 	.word	0xe000ed04

080095a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08e      	sub	sp, #56	@ 0x38
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10b      	bne.n	80095d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	623b      	str	r3, [r7, #32]
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	e7fd      	b.n	80095d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	61fb      	str	r3, [r7, #28]
}
 80095ee:	bf00      	nop
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095f4:	f001 f92e 	bl	800a854 <xTaskGetSchedulerState>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d102      	bne.n	8009604 <xQueueSemaphoreTake+0x64>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <xQueueSemaphoreTake+0x68>
 8009604:	2301      	movs	r3, #1
 8009606:	e000      	b.n	800960a <xQueueSemaphoreTake+0x6a>
 8009608:	2300      	movs	r3, #0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10b      	bne.n	8009626 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	61bb      	str	r3, [r7, #24]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009626:	f001 ff7f 	bl	800b528 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009632:	2b00      	cmp	r3, #0
 8009634:	d024      	beq.n	8009680 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009638:	1e5a      	subs	r2, r3, #1
 800963a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800963e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009646:	f001 fa7f 	bl	800ab48 <pvTaskIncrementMutexHeldCount>
 800964a:	4602      	mov	r2, r0
 800964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800964e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00f      	beq.n	8009678 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965a:	3310      	adds	r3, #16
 800965c:	4618      	mov	r0, r3
 800965e:	f000 ff39 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009668:	4b54      	ldr	r3, [pc, #336]	@ (80097bc <xQueueSemaphoreTake+0x21c>)
 800966a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009678:	f001 ff88 	bl	800b58c <vPortExitCritical>
				return pdPASS;
 800967c:	2301      	movs	r3, #1
 800967e:	e098      	b.n	80097b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d112      	bne.n	80096ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	617b      	str	r3, [r7, #20]
}
 800969e:	bf00      	nop
 80096a0:	bf00      	nop
 80096a2:	e7fd      	b.n	80096a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80096a4:	f001 ff72 	bl	800b58c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096a8:	2300      	movs	r3, #0
 80096aa:	e082      	b.n	80097b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096b2:	f107 030c 	add.w	r3, r7, #12
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 ff70 	bl	800a59c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096c0:	f001 ff64 	bl	800b58c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096c4:	f000 fce0 	bl	800a088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096c8:	f001 ff2e 	bl	800b528 <vPortEnterCritical>
 80096cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096d2:	b25b      	sxtb	r3, r3
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d103      	bne.n	80096e2 <xQueueSemaphoreTake+0x142>
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096e8:	b25b      	sxtb	r3, r3
 80096ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ee:	d103      	bne.n	80096f8 <xQueueSemaphoreTake+0x158>
 80096f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096f8:	f001 ff48 	bl	800b58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096fc:	463a      	mov	r2, r7
 80096fe:	f107 030c 	add.w	r3, r7, #12
 8009702:	4611      	mov	r1, r2
 8009704:	4618      	mov	r0, r3
 8009706:	f000 ff5f 	bl	800a5c8 <xTaskCheckForTimeOut>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d132      	bne.n	8009776 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009712:	f000 f9f5 	bl	8009b00 <prvIsQueueEmpty>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d026      	beq.n	800976a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800971c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d109      	bne.n	8009738 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009724:	f001 ff00 	bl	800b528 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	4618      	mov	r0, r3
 800972e:	f001 f8af 	bl	800a890 <xTaskPriorityInherit>
 8009732:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009734:	f001 ff2a 	bl	800b58c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	3324      	adds	r3, #36	@ 0x24
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	4611      	mov	r1, r2
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fe75 	bl	800a430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009748:	f000 f988 	bl	8009a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800974c:	f000 fcaa 	bl	800a0a4 <xTaskResumeAll>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	f47f af67 	bne.w	8009626 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009758:	4b18      	ldr	r3, [pc, #96]	@ (80097bc <xQueueSemaphoreTake+0x21c>)
 800975a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	e75d      	b.n	8009626 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800976a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800976c:	f000 f976 	bl	8009a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009770:	f000 fc98 	bl	800a0a4 <xTaskResumeAll>
 8009774:	e757      	b.n	8009626 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009776:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009778:	f000 f970 	bl	8009a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800977c:	f000 fc92 	bl	800a0a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009780:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009782:	f000 f9bd 	bl	8009b00 <prvIsQueueEmpty>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	f43f af4c 	beq.w	8009626 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00d      	beq.n	80097b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009794:	f001 fec8 	bl	800b528 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800979a:	f000 f8b7 	bl	800990c <prvGetDisinheritPriorityAfterTimeout>
 800979e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 f94a 	bl	800aa40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80097ac:	f001 feee 	bl	800b58c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3738      	adds	r7, #56	@ 0x38
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	e000ed04 	.word	0xe000ed04

080097c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	@ 0x38
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	623b      	str	r3, [r7, #32]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d103      	bne.n	80097fc <xQueueReceiveFromISR+0x3c>
 80097f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <xQueueReceiveFromISR+0x40>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <xQueueReceiveFromISR+0x42>
 8009800:	2300      	movs	r3, #0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10b      	bne.n	800981e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	61fb      	str	r3, [r7, #28]
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	e7fd      	b.n	800981a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800981e:	f001 ff63 	bl	800b6e8 <vPortValidateInterruptPriority>
	__asm volatile
 8009822:	f3ef 8211 	mrs	r2, BASEPRI
 8009826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	61ba      	str	r2, [r7, #24]
 8009838:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800983a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800983c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d02f      	beq.n	80098aa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009858:	f000 f8da 	bl	8009a10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800985c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985e:	1e5a      	subs	r2, r3, #1
 8009860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009862:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009864:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986c:	d112      	bne.n	8009894 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d016      	beq.n	80098a4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009878:	3310      	adds	r3, #16
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fe2a 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00e      	beq.n	80098a4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e007      	b.n	80098a4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009898:	3301      	adds	r3, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	b25a      	sxtb	r2, r3
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80098a4:	2301      	movs	r3, #1
 80098a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a8:	e001      	b.n	80098ae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f383 8811 	msr	BASEPRI, r3
}
 80098b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3738      	adds	r7, #56	@ 0x38
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10b      	bne.n	80098ee <vQueueDelete+0x2a>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	60bb      	str	r3, [r7, #8]
}
 80098e8:	bf00      	nop
 80098ea:	bf00      	nop
 80098ec:	e7fd      	b.n	80098ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f95e 	bl	8009bb0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d102      	bne.n	8009904 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f002 f802 	bl	800b908 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009904:	bf00      	nop
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	d006      	beq.n	800992a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	e001      	b.n	800992e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800992e:	68fb      	ldr	r3, [r7, #12]
	}
 8009930:	4618      	mov	r0, r3
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10d      	bne.n	8009976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d14d      	bne.n	80099fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	4618      	mov	r0, r3
 8009968:	f000 fffa 	bl	800a960 <xTaskPriorityDisinherit>
 800996c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	609a      	str	r2, [r3, #8]
 8009974:	e043      	b.n	80099fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d119      	bne.n	80099b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6858      	ldr	r0, [r3, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009984:	461a      	mov	r2, r3
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	f003 fa3d 	bl	800ce06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009994:	441a      	add	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d32b      	bcc.n	80099fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	605a      	str	r2, [r3, #4]
 80099ae:	e026      	b.n	80099fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	68d8      	ldr	r0, [r3, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b8:	461a      	mov	r2, r3
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	f003 fa23 	bl	800ce06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c8:	425b      	negs	r3, r3
 80099ca:	441a      	add	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d207      	bcs.n	80099ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	425b      	negs	r3, r3
 80099e6:	441a      	add	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d105      	bne.n	80099fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009a06:	697b      	ldr	r3, [r7, #20]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d018      	beq.n	8009a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68da      	ldr	r2, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a2a:	441a      	add	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d303      	bcc.n	8009a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68d9      	ldr	r1, [r3, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6838      	ldr	r0, [r7, #0]
 8009a50:	f003 f9d9 	bl	800ce06 <memcpy>
	}
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a64:	f001 fd60 	bl	800b528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a70:	e011      	b.n	8009a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d012      	beq.n	8009aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3324      	adds	r3, #36	@ 0x24
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fd28 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a8a:	f000 fe01 	bl	800a690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	dce9      	bgt.n	8009a72 <prvUnlockQueue+0x16>
 8009a9e:	e000      	b.n	8009aa2 <prvUnlockQueue+0x46>
					break;
 8009aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	22ff      	movs	r2, #255	@ 0xff
 8009aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009aaa:	f001 fd6f 	bl	800b58c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009aae:	f001 fd3b 	bl	800b528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009aba:	e011      	b.n	8009ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d012      	beq.n	8009aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3310      	adds	r3, #16
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fd03 	bl	800a4d4 <xTaskRemoveFromEventList>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ad4:	f000 fddc 	bl	800a690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dce9      	bgt.n	8009abc <prvUnlockQueue+0x60>
 8009ae8:	e000      	b.n	8009aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	22ff      	movs	r2, #255	@ 0xff
 8009af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009af4:	f001 fd4a 	bl	800b58c <vPortExitCritical>
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b08:	f001 fd0e 	bl	800b528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d102      	bne.n	8009b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b14:	2301      	movs	r3, #1
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	e001      	b.n	8009b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b1e:	f001 fd35 	bl	800b58c <vPortExitCritical>

	return xReturn;
 8009b22:	68fb      	ldr	r3, [r7, #12]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b34:	f001 fcf8 	bl	800b528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d102      	bne.n	8009b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b44:	2301      	movs	r3, #1
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e001      	b.n	8009b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b4e:	f001 fd1d 	bl	800b58c <vPortExitCritical>

	return xReturn;
 8009b52:	68fb      	ldr	r3, [r7, #12]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	e014      	b.n	8009b96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8009bac <vQueueAddToRegistry+0x50>)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10b      	bne.n	8009b90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b78:	490c      	ldr	r1, [pc, #48]	@ (8009bac <vQueueAddToRegistry+0x50>)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b82:	4a0a      	ldr	r2, [pc, #40]	@ (8009bac <vQueueAddToRegistry+0x50>)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	4413      	add	r3, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b8e:	e006      	b.n	8009b9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3301      	adds	r3, #1
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b07      	cmp	r3, #7
 8009b9a:	d9e7      	bls.n	8009b6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20002224 	.word	0x20002224

08009bb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e016      	b.n	8009bec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009bbe:	4a10      	ldr	r2, [pc, #64]	@ (8009c00 <vQueueUnregisterQueue+0x50>)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d10b      	bne.n	8009be6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009bce:	4a0c      	ldr	r2, [pc, #48]	@ (8009c00 <vQueueUnregisterQueue+0x50>)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009bd8:	4a09      	ldr	r2, [pc, #36]	@ (8009c00 <vQueueUnregisterQueue+0x50>)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	00db      	lsls	r3, r3, #3
 8009bde:	4413      	add	r3, r2
 8009be0:	2200      	movs	r2, #0
 8009be2:	605a      	str	r2, [r3, #4]
				break;
 8009be4:	e006      	b.n	8009bf4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3301      	adds	r3, #1
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b07      	cmp	r3, #7
 8009bf0:	d9e5      	bls.n	8009bbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20002224 	.word	0x20002224

08009c04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c14:	f001 fc88 	bl	800b528 <vPortEnterCritical>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c24:	d103      	bne.n	8009c2e <vQueueWaitForMessageRestricted+0x2a>
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c34:	b25b      	sxtb	r3, r3
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3a:	d103      	bne.n	8009c44 <vQueueWaitForMessageRestricted+0x40>
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c44:	f001 fca2 	bl	800b58c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	3324      	adds	r3, #36	@ 0x24
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fc0f 	bl	800a47c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c5e:	6978      	ldr	r0, [r7, #20]
 8009c60:	f7ff fefc 	bl	8009a5c <prvUnlockQueue>
	}
 8009c64:	bf00      	nop
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08e      	sub	sp, #56	@ 0x38
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10b      	bne.n	8009c98 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	623b      	str	r3, [r7, #32]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10b      	bne.n	8009cb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	61fb      	str	r3, [r7, #28]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cb6:	235c      	movs	r3, #92	@ 0x5c
 8009cb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8009cbe:	d00b      	beq.n	8009cd8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	61bb      	str	r3, [r7, #24]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01e      	beq.n	8009d1e <xTaskCreateStatic+0xb2>
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01b      	beq.n	8009d1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9303      	str	r3, [sp, #12]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	9302      	str	r3, [sp, #8]
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f850 	bl	8009db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d18:	f000 f8de 	bl	8009ed8 <prvAddNewTaskToReadyList>
 8009d1c:	e001      	b.n	8009d22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d22:	697b      	ldr	r3, [r7, #20]
	}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3728      	adds	r7, #40	@ 0x28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08c      	sub	sp, #48	@ 0x30
 8009d30:	af04      	add	r7, sp, #16
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 fd13 	bl	800b76c <pvPortMalloc>
 8009d46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d4e:	205c      	movs	r0, #92	@ 0x5c
 8009d50:	f001 fd0c 	bl	800b76c <pvPortMalloc>
 8009d54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d62:	e005      	b.n	8009d70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d64:	6978      	ldr	r0, [r7, #20]
 8009d66:	f001 fdcf 	bl	800b908 <vPortFree>
 8009d6a:	e001      	b.n	8009d70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d017      	beq.n	8009da6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d7e:	88fa      	ldrh	r2, [r7, #6]
 8009d80:	2300      	movs	r3, #0
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	9302      	str	r3, [sp, #8]
 8009d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f80e 	bl	8009db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d9a:	69f8      	ldr	r0, [r7, #28]
 8009d9c:	f000 f89c 	bl	8009ed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009da0:	2301      	movs	r3, #1
 8009da2:	61bb      	str	r3, [r7, #24]
 8009da4:	e002      	b.n	8009dac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295
 8009daa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dac:	69bb      	ldr	r3, [r7, #24]
	}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b088      	sub	sp, #32
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	461a      	mov	r2, r3
 8009dce:	21a5      	movs	r1, #165	@ 0xa5
 8009dd0:	f002 ff88 	bl	800cce4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009dde:	3b01      	subs	r3, #1
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f023 0307 	bic.w	r3, r3, #7
 8009dec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	f003 0307 	and.w	r3, r3, #7
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	617b      	str	r3, [r7, #20]
}
 8009e0a:	bf00      	nop
 8009e0c:	bf00      	nop
 8009e0e:	e7fd      	b.n	8009e0c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01f      	beq.n	8009e56 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e16:	2300      	movs	r3, #0
 8009e18:	61fb      	str	r3, [r7, #28]
 8009e1a:	e012      	b.n	8009e42 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	4413      	add	r3, r2
 8009e22:	7819      	ldrb	r1, [r3, #0]
 8009e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	4413      	add	r3, r2
 8009e2a:	3334      	adds	r3, #52	@ 0x34
 8009e2c:	460a      	mov	r2, r1
 8009e2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	4413      	add	r3, r2
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d006      	beq.n	8009e4a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	2b0f      	cmp	r3, #15
 8009e46:	d9e9      	bls.n	8009e1c <prvInitialiseNewTask+0x66>
 8009e48:	e000      	b.n	8009e4c <prvInitialiseNewTask+0x96>
			{
				break;
 8009e4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e54:	e003      	b.n	8009e5e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e60:	2b37      	cmp	r3, #55	@ 0x37
 8009e62:	d901      	bls.n	8009e68 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e64:	2337      	movs	r3, #55	@ 0x37
 8009e66:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e72:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e76:	2200      	movs	r2, #0
 8009e78:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fe34 	bl	8008aec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e86:	3318      	adds	r3, #24
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe fe2f 	bl	8008aec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	68f9      	ldr	r1, [r7, #12]
 8009eb6:	69b8      	ldr	r0, [r7, #24]
 8009eb8:	f001 fa08 	bl	800b2cc <pxPortInitialiseStack>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ecc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ece:	bf00      	nop
 8009ed0:	3720      	adds	r7, #32
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ee0:	f001 fb22 	bl	800b528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8009f9c <prvAddNewTaskToReadyList+0xc4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	4a2c      	ldr	r2, [pc, #176]	@ (8009f9c <prvAddNewTaskToReadyList+0xc4>)
 8009eec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eee:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa0 <prvAddNewTaskToReadyList+0xc8>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d109      	bne.n	8009f0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8009fa0 <prvAddNewTaskToReadyList+0xc8>)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009efc:	4b27      	ldr	r3, [pc, #156]	@ (8009f9c <prvAddNewTaskToReadyList+0xc4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d110      	bne.n	8009f26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f04:	f000 fbe8 	bl	800a6d8 <prvInitialiseTaskLists>
 8009f08:	e00d      	b.n	8009f26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f0a:	4b26      	ldr	r3, [pc, #152]	@ (8009fa4 <prvAddNewTaskToReadyList+0xcc>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f12:	4b23      	ldr	r3, [pc, #140]	@ (8009fa0 <prvAddNewTaskToReadyList+0xc8>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d802      	bhi.n	8009f26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f20:	4a1f      	ldr	r2, [pc, #124]	@ (8009fa0 <prvAddNewTaskToReadyList+0xc8>)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f26:	4b20      	ldr	r3, [pc, #128]	@ (8009fa8 <prvAddNewTaskToReadyList+0xd0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8009fa8 <prvAddNewTaskToReadyList+0xd0>)
 8009f2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f30:	4b1d      	ldr	r3, [pc, #116]	@ (8009fa8 <prvAddNewTaskToReadyList+0xd0>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8009fac <prvAddNewTaskToReadyList+0xd4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d903      	bls.n	8009f4c <prvAddNewTaskToReadyList+0x74>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f48:	4a18      	ldr	r2, [pc, #96]	@ (8009fac <prvAddNewTaskToReadyList+0xd4>)
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f50:	4613      	mov	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4a15      	ldr	r2, [pc, #84]	@ (8009fb0 <prvAddNewTaskToReadyList+0xd8>)
 8009f5a:	441a      	add	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7fe fdcf 	bl	8008b06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f68:	f001 fb10 	bl	800b58c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <prvAddNewTaskToReadyList+0xcc>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00e      	beq.n	8009f92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f74:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa0 <prvAddNewTaskToReadyList+0xc8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d207      	bcs.n	8009f92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f82:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb4 <prvAddNewTaskToReadyList+0xdc>)
 8009f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20002738 	.word	0x20002738
 8009fa0:	20002264 	.word	0x20002264
 8009fa4:	20002744 	.word	0x20002744
 8009fa8:	20002754 	.word	0x20002754
 8009fac:	20002740 	.word	0x20002740
 8009fb0:	20002268 	.word	0x20002268
 8009fb4:	e000ed04 	.word	0xe000ed04

08009fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	@ 0x28
 8009fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009fc6:	463a      	mov	r2, r7
 8009fc8:	1d39      	adds	r1, r7, #4
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe fd38 	bl	8008a44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	9202      	str	r2, [sp, #8]
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	460a      	mov	r2, r1
 8009fe6:	4922      	ldr	r1, [pc, #136]	@ (800a070 <vTaskStartScheduler+0xb8>)
 8009fe8:	4822      	ldr	r0, [pc, #136]	@ (800a074 <vTaskStartScheduler+0xbc>)
 8009fea:	f7ff fe3f 	bl	8009c6c <xTaskCreateStatic>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	4a21      	ldr	r2, [pc, #132]	@ (800a078 <vTaskStartScheduler+0xc0>)
 8009ff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ff4:	4b20      	ldr	r3, [pc, #128]	@ (800a078 <vTaskStartScheduler+0xc0>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	e001      	b.n	800a006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d102      	bne.n	800a012 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a00c:	f000 fe04 	bl	800ac18 <xTimerCreateTimerTask>
 800a010:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d116      	bne.n	800a046 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	613b      	str	r3, [r7, #16]
}
 800a02a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a02c:	4b13      	ldr	r3, [pc, #76]	@ (800a07c <vTaskStartScheduler+0xc4>)
 800a02e:	f04f 32ff 	mov.w	r2, #4294967295
 800a032:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a034:	4b12      	ldr	r3, [pc, #72]	@ (800a080 <vTaskStartScheduler+0xc8>)
 800a036:	2201      	movs	r2, #1
 800a038:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a03a:	4b12      	ldr	r3, [pc, #72]	@ (800a084 <vTaskStartScheduler+0xcc>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a040:	f001 f9ce 	bl	800b3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a044:	e00f      	b.n	800a066 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04c:	d10b      	bne.n	800a066 <vTaskStartScheduler+0xae>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60fb      	str	r3, [r7, #12]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <vTaskStartScheduler+0xaa>
}
 800a066:	bf00      	nop
 800a068:	3718      	adds	r7, #24
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	08010ca8 	.word	0x08010ca8
 800a074:	0800a6a9 	.word	0x0800a6a9
 800a078:	2000275c 	.word	0x2000275c
 800a07c:	20002758 	.word	0x20002758
 800a080:	20002744 	.word	0x20002744
 800a084:	2000273c 	.word	0x2000273c

0800a088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a08c:	4b04      	ldr	r3, [pc, #16]	@ (800a0a0 <vTaskSuspendAll+0x18>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3301      	adds	r3, #1
 800a092:	4a03      	ldr	r2, [pc, #12]	@ (800a0a0 <vTaskSuspendAll+0x18>)
 800a094:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a096:	bf00      	nop
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	20002760 	.word	0x20002760

0800a0a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0b2:	4b42      	ldr	r3, [pc, #264]	@ (800a1bc <xTaskResumeAll+0x118>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10b      	bne.n	800a0d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	603b      	str	r3, [r7, #0]
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	e7fd      	b.n	800a0ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0d2:	f001 fa29 	bl	800b528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0d6:	4b39      	ldr	r3, [pc, #228]	@ (800a1bc <xTaskResumeAll+0x118>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	4a37      	ldr	r2, [pc, #220]	@ (800a1bc <xTaskResumeAll+0x118>)
 800a0de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0e0:	4b36      	ldr	r3, [pc, #216]	@ (800a1bc <xTaskResumeAll+0x118>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d162      	bne.n	800a1ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0e8:	4b35      	ldr	r3, [pc, #212]	@ (800a1c0 <xTaskResumeAll+0x11c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d05e      	beq.n	800a1ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0f0:	e02f      	b.n	800a152 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f2:	4b34      	ldr	r3, [pc, #208]	@ (800a1c4 <xTaskResumeAll+0x120>)
 800a0f4:	68db      	ldr	r3, [r3, #12]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3318      	adds	r3, #24
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe fd5e 	bl	8008bc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3304      	adds	r3, #4
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fd59 	bl	8008bc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a112:	4b2d      	ldr	r3, [pc, #180]	@ (800a1c8 <xTaskResumeAll+0x124>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d903      	bls.n	800a122 <xTaskResumeAll+0x7e>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11e:	4a2a      	ldr	r2, [pc, #168]	@ (800a1c8 <xTaskResumeAll+0x124>)
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4a27      	ldr	r2, [pc, #156]	@ (800a1cc <xTaskResumeAll+0x128>)
 800a130:	441a      	add	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3304      	adds	r3, #4
 800a136:	4619      	mov	r1, r3
 800a138:	4610      	mov	r0, r2
 800a13a:	f7fe fce4 	bl	8008b06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a142:	4b23      	ldr	r3, [pc, #140]	@ (800a1d0 <xTaskResumeAll+0x12c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a148:	429a      	cmp	r2, r3
 800a14a:	d302      	bcc.n	800a152 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a14c:	4b21      	ldr	r3, [pc, #132]	@ (800a1d4 <xTaskResumeAll+0x130>)
 800a14e:	2201      	movs	r2, #1
 800a150:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a152:	4b1c      	ldr	r3, [pc, #112]	@ (800a1c4 <xTaskResumeAll+0x120>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1cb      	bne.n	800a0f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a160:	f000 fb58 	bl	800a814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a164:	4b1c      	ldr	r3, [pc, #112]	@ (800a1d8 <xTaskResumeAll+0x134>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d010      	beq.n	800a192 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a170:	f000 f846 	bl	800a200 <xTaskIncrementTick>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a17a:	4b16      	ldr	r3, [pc, #88]	@ (800a1d4 <xTaskResumeAll+0x130>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	3b01      	subs	r3, #1
 800a184:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f1      	bne.n	800a170 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a18c:	4b12      	ldr	r3, [pc, #72]	@ (800a1d8 <xTaskResumeAll+0x134>)
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a192:	4b10      	ldr	r3, [pc, #64]	@ (800a1d4 <xTaskResumeAll+0x130>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a19a:	2301      	movs	r3, #1
 800a19c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a19e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1dc <xTaskResumeAll+0x138>)
 800a1a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1ae:	f001 f9ed 	bl	800b58c <vPortExitCritical>

	return xAlreadyYielded;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20002760 	.word	0x20002760
 800a1c0:	20002738 	.word	0x20002738
 800a1c4:	200026f8 	.word	0x200026f8
 800a1c8:	20002740 	.word	0x20002740
 800a1cc:	20002268 	.word	0x20002268
 800a1d0:	20002264 	.word	0x20002264
 800a1d4:	2000274c 	.word	0x2000274c
 800a1d8:	20002748 	.word	0x20002748
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a1e6:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <xTaskGetTickCount+0x1c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a1ec:	687b      	ldr	r3, [r7, #4]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	2000273c 	.word	0x2000273c

0800a200 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a206:	2300      	movs	r3, #0
 800a208:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a20a:	4b4f      	ldr	r3, [pc, #316]	@ (800a348 <xTaskIncrementTick+0x148>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f040 8090 	bne.w	800a334 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a214:	4b4d      	ldr	r3, [pc, #308]	@ (800a34c <xTaskIncrementTick+0x14c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3301      	adds	r3, #1
 800a21a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a21c:	4a4b      	ldr	r2, [pc, #300]	@ (800a34c <xTaskIncrementTick+0x14c>)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d121      	bne.n	800a26c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a228:	4b49      	ldr	r3, [pc, #292]	@ (800a350 <xTaskIncrementTick+0x150>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00b      	beq.n	800a24a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	603b      	str	r3, [r7, #0]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <xTaskIncrementTick+0x46>
 800a24a:	4b41      	ldr	r3, [pc, #260]	@ (800a350 <xTaskIncrementTick+0x150>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	4b40      	ldr	r3, [pc, #256]	@ (800a354 <xTaskIncrementTick+0x154>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a3e      	ldr	r2, [pc, #248]	@ (800a350 <xTaskIncrementTick+0x150>)
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	4a3e      	ldr	r2, [pc, #248]	@ (800a354 <xTaskIncrementTick+0x154>)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	4b3e      	ldr	r3, [pc, #248]	@ (800a358 <xTaskIncrementTick+0x158>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a3c      	ldr	r2, [pc, #240]	@ (800a358 <xTaskIncrementTick+0x158>)
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	f000 fad4 	bl	800a814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a26c:	4b3b      	ldr	r3, [pc, #236]	@ (800a35c <xTaskIncrementTick+0x15c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	429a      	cmp	r2, r3
 800a274:	d349      	bcc.n	800a30a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a276:	4b36      	ldr	r3, [pc, #216]	@ (800a350 <xTaskIncrementTick+0x150>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d104      	bne.n	800a28a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a280:	4b36      	ldr	r3, [pc, #216]	@ (800a35c <xTaskIncrementTick+0x15c>)
 800a282:	f04f 32ff 	mov.w	r2, #4294967295
 800a286:	601a      	str	r2, [r3, #0]
					break;
 800a288:	e03f      	b.n	800a30a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28a:	4b31      	ldr	r3, [pc, #196]	@ (800a350 <xTaskIncrementTick+0x150>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d203      	bcs.n	800a2aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2a2:	4a2e      	ldr	r2, [pc, #184]	@ (800a35c <xTaskIncrementTick+0x15c>)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2a8:	e02f      	b.n	800a30a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe fc86 	bl	8008bc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d004      	beq.n	800a2c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	3318      	adds	r3, #24
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe fc7d 	bl	8008bc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ca:	4b25      	ldr	r3, [pc, #148]	@ (800a360 <xTaskIncrementTick+0x160>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d903      	bls.n	800a2da <xTaskIncrementTick+0xda>
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d6:	4a22      	ldr	r2, [pc, #136]	@ (800a360 <xTaskIncrementTick+0x160>)
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2de:	4613      	mov	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4a1f      	ldr	r2, [pc, #124]	@ (800a364 <xTaskIncrementTick+0x164>)
 800a2e8:	441a      	add	r2, r3
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f7fe fc08 	bl	8008b06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a368 <xTaskIncrementTick+0x168>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a300:	429a      	cmp	r2, r3
 800a302:	d3b8      	bcc.n	800a276 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a308:	e7b5      	b.n	800a276 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a30a:	4b17      	ldr	r3, [pc, #92]	@ (800a368 <xTaskIncrementTick+0x168>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a310:	4914      	ldr	r1, [pc, #80]	@ (800a364 <xTaskIncrementTick+0x164>)
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	440b      	add	r3, r1
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d901      	bls.n	800a326 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a322:	2301      	movs	r3, #1
 800a324:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a326:	4b11      	ldr	r3, [pc, #68]	@ (800a36c <xTaskIncrementTick+0x16c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d007      	beq.n	800a33e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a32e:	2301      	movs	r3, #1
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	e004      	b.n	800a33e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a334:	4b0e      	ldr	r3, [pc, #56]	@ (800a370 <xTaskIncrementTick+0x170>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3301      	adds	r3, #1
 800a33a:	4a0d      	ldr	r2, [pc, #52]	@ (800a370 <xTaskIncrementTick+0x170>)
 800a33c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a33e:	697b      	ldr	r3, [r7, #20]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	20002760 	.word	0x20002760
 800a34c:	2000273c 	.word	0x2000273c
 800a350:	200026f0 	.word	0x200026f0
 800a354:	200026f4 	.word	0x200026f4
 800a358:	20002750 	.word	0x20002750
 800a35c:	20002758 	.word	0x20002758
 800a360:	20002740 	.word	0x20002740
 800a364:	20002268 	.word	0x20002268
 800a368:	20002264 	.word	0x20002264
 800a36c:	2000274c 	.word	0x2000274c
 800a370:	20002748 	.word	0x20002748

0800a374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a37a:	4b28      	ldr	r3, [pc, #160]	@ (800a41c <vTaskSwitchContext+0xa8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a382:	4b27      	ldr	r3, [pc, #156]	@ (800a420 <vTaskSwitchContext+0xac>)
 800a384:	2201      	movs	r2, #1
 800a386:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a388:	e042      	b.n	800a410 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a38a:	4b25      	ldr	r3, [pc, #148]	@ (800a420 <vTaskSwitchContext+0xac>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a390:	4b24      	ldr	r3, [pc, #144]	@ (800a424 <vTaskSwitchContext+0xb0>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	e011      	b.n	800a3bc <vTaskSwitchContext+0x48>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10b      	bne.n	800a3b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	607b      	str	r3, [r7, #4]
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	e7fd      	b.n	800a3b2 <vTaskSwitchContext+0x3e>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	491a      	ldr	r1, [pc, #104]	@ (800a428 <vTaskSwitchContext+0xb4>)
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	440b      	add	r3, r1
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0e3      	beq.n	800a398 <vTaskSwitchContext+0x24>
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4a13      	ldr	r2, [pc, #76]	@ (800a428 <vTaskSwitchContext+0xb4>)
 800a3dc:	4413      	add	r3, r2
 800a3de:	60bb      	str	r3, [r7, #8]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	605a      	str	r2, [r3, #4]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d104      	bne.n	800a400 <vTaskSwitchContext+0x8c>
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	605a      	str	r2, [r3, #4]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	4a09      	ldr	r2, [pc, #36]	@ (800a42c <vTaskSwitchContext+0xb8>)
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	4a06      	ldr	r2, [pc, #24]	@ (800a424 <vTaskSwitchContext+0xb0>)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6013      	str	r3, [r2, #0]
}
 800a410:	bf00      	nop
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	20002760 	.word	0x20002760
 800a420:	2000274c 	.word	0x2000274c
 800a424:	20002740 	.word	0x20002740
 800a428:	20002268 	.word	0x20002268
 800a42c:	20002264 	.word	0x20002264

0800a430 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10b      	bne.n	800a458 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	60fb      	str	r3, [r7, #12]
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a458:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <vTaskPlaceOnEventList+0x48>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3318      	adds	r3, #24
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7fe fb74 	bl	8008b4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a466:	2101      	movs	r1, #1
 800a468:	6838      	ldr	r0, [r7, #0]
 800a46a:	f000 fb81 	bl	800ab70 <prvAddCurrentTaskToDelayedList>
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20002264 	.word	0x20002264

0800a47c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10b      	bne.n	800a4a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	617b      	str	r3, [r7, #20]
}
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
 800a4a4:	e7fd      	b.n	800a4a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3318      	adds	r3, #24
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7fe fb29 	bl	8008b06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a4be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	68b8      	ldr	r0, [r7, #8]
 800a4c4:	f000 fb54 	bl	800ab70 <prvAddCurrentTaskToDelayedList>
	}
 800a4c8:	bf00      	nop
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20002264 	.word	0x20002264

0800a4d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10b      	bne.n	800a502 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	60fb      	str	r3, [r7, #12]
}
 800a4fc:	bf00      	nop
 800a4fe:	bf00      	nop
 800a500:	e7fd      	b.n	800a4fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	3318      	adds	r3, #24
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fb5a 	bl	8008bc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a50c:	4b1d      	ldr	r3, [pc, #116]	@ (800a584 <xTaskRemoveFromEventList+0xb0>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d11d      	bne.n	800a550 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	3304      	adds	r3, #4
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fb51 	bl	8008bc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a522:	4b19      	ldr	r3, [pc, #100]	@ (800a588 <xTaskRemoveFromEventList+0xb4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d903      	bls.n	800a532 <xTaskRemoveFromEventList+0x5e>
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52e:	4a16      	ldr	r2, [pc, #88]	@ (800a588 <xTaskRemoveFromEventList+0xb4>)
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a536:	4613      	mov	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4a13      	ldr	r2, [pc, #76]	@ (800a58c <xTaskRemoveFromEventList+0xb8>)
 800a540:	441a      	add	r2, r3
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	3304      	adds	r3, #4
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7fe fadc 	bl	8008b06 <vListInsertEnd>
 800a54e:	e005      	b.n	800a55c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	3318      	adds	r3, #24
 800a554:	4619      	mov	r1, r3
 800a556:	480e      	ldr	r0, [pc, #56]	@ (800a590 <xTaskRemoveFromEventList+0xbc>)
 800a558:	f7fe fad5 	bl	8008b06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a560:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <xTaskRemoveFromEventList+0xc0>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a566:	429a      	cmp	r2, r3
 800a568:	d905      	bls.n	800a576 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a56a:	2301      	movs	r3, #1
 800a56c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a56e:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <xTaskRemoveFromEventList+0xc4>)
 800a570:	2201      	movs	r2, #1
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	e001      	b.n	800a57a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a57a:	697b      	ldr	r3, [r7, #20]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20002760 	.word	0x20002760
 800a588:	20002740 	.word	0x20002740
 800a58c:	20002268 	.word	0x20002268
 800a590:	200026f8 	.word	0x200026f8
 800a594:	20002264 	.word	0x20002264
 800a598:	2000274c 	.word	0x2000274c

0800a59c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5a4:	4b06      	ldr	r3, [pc, #24]	@ (800a5c0 <vTaskInternalSetTimeOutState+0x24>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a5ac:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <vTaskInternalSetTimeOutState+0x28>)
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	605a      	str	r2, [r3, #4]
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	20002750 	.word	0x20002750
 800a5c4:	2000273c 	.word	0x2000273c

0800a5c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10b      	bne.n	800a5f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	613b      	str	r3, [r7, #16]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10b      	bne.n	800a60e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	60fb      	str	r3, [r7, #12]
}
 800a608:	bf00      	nop
 800a60a:	bf00      	nop
 800a60c:	e7fd      	b.n	800a60a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a60e:	f000 ff8b 	bl	800b528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a612:	4b1d      	ldr	r3, [pc, #116]	@ (800a688 <xTaskCheckForTimeOut+0xc0>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62a:	d102      	bne.n	800a632 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a62c:	2300      	movs	r3, #0
 800a62e:	61fb      	str	r3, [r7, #28]
 800a630:	e023      	b.n	800a67a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4b15      	ldr	r3, [pc, #84]	@ (800a68c <xTaskCheckForTimeOut+0xc4>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d007      	beq.n	800a64e <xTaskCheckForTimeOut+0x86>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	429a      	cmp	r2, r3
 800a646:	d302      	bcc.n	800a64e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a648:	2301      	movs	r3, #1
 800a64a:	61fb      	str	r3, [r7, #28]
 800a64c:	e015      	b.n	800a67a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	429a      	cmp	r2, r3
 800a656:	d20b      	bcs.n	800a670 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7ff ff99 	bl	800a59c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a66a:	2300      	movs	r3, #0
 800a66c:	61fb      	str	r3, [r7, #28]
 800a66e:	e004      	b.n	800a67a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a676:	2301      	movs	r3, #1
 800a678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a67a:	f000 ff87 	bl	800b58c <vPortExitCritical>

	return xReturn;
 800a67e:	69fb      	ldr	r3, [r7, #28]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	2000273c 	.word	0x2000273c
 800a68c:	20002750 	.word	0x20002750

0800a690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a690:	b480      	push	{r7}
 800a692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a694:	4b03      	ldr	r3, [pc, #12]	@ (800a6a4 <vTaskMissedYield+0x14>)
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]
}
 800a69a:	bf00      	nop
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	2000274c 	.word	0x2000274c

0800a6a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6b0:	f000 f852 	bl	800a758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6b4:	4b06      	ldr	r3, [pc, #24]	@ (800a6d0 <prvIdleTask+0x28>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d9f9      	bls.n	800a6b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a6bc:	4b05      	ldr	r3, [pc, #20]	@ (800a6d4 <prvIdleTask+0x2c>)
 800a6be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6cc:	e7f0      	b.n	800a6b0 <prvIdleTask+0x8>
 800a6ce:	bf00      	nop
 800a6d0:	20002268 	.word	0x20002268
 800a6d4:	e000ed04 	.word	0xe000ed04

0800a6d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6de:	2300      	movs	r3, #0
 800a6e0:	607b      	str	r3, [r7, #4]
 800a6e2:	e00c      	b.n	800a6fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4a12      	ldr	r2, [pc, #72]	@ (800a738 <prvInitialiseTaskLists+0x60>)
 800a6f0:	4413      	add	r3, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe f9da 	bl	8008aac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	607b      	str	r3, [r7, #4]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b37      	cmp	r3, #55	@ 0x37
 800a702:	d9ef      	bls.n	800a6e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a704:	480d      	ldr	r0, [pc, #52]	@ (800a73c <prvInitialiseTaskLists+0x64>)
 800a706:	f7fe f9d1 	bl	8008aac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a70a:	480d      	ldr	r0, [pc, #52]	@ (800a740 <prvInitialiseTaskLists+0x68>)
 800a70c:	f7fe f9ce 	bl	8008aac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a710:	480c      	ldr	r0, [pc, #48]	@ (800a744 <prvInitialiseTaskLists+0x6c>)
 800a712:	f7fe f9cb 	bl	8008aac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a716:	480c      	ldr	r0, [pc, #48]	@ (800a748 <prvInitialiseTaskLists+0x70>)
 800a718:	f7fe f9c8 	bl	8008aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a71c:	480b      	ldr	r0, [pc, #44]	@ (800a74c <prvInitialiseTaskLists+0x74>)
 800a71e:	f7fe f9c5 	bl	8008aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a722:	4b0b      	ldr	r3, [pc, #44]	@ (800a750 <prvInitialiseTaskLists+0x78>)
 800a724:	4a05      	ldr	r2, [pc, #20]	@ (800a73c <prvInitialiseTaskLists+0x64>)
 800a726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a728:	4b0a      	ldr	r3, [pc, #40]	@ (800a754 <prvInitialiseTaskLists+0x7c>)
 800a72a:	4a05      	ldr	r2, [pc, #20]	@ (800a740 <prvInitialiseTaskLists+0x68>)
 800a72c:	601a      	str	r2, [r3, #0]
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20002268 	.word	0x20002268
 800a73c:	200026c8 	.word	0x200026c8
 800a740:	200026dc 	.word	0x200026dc
 800a744:	200026f8 	.word	0x200026f8
 800a748:	2000270c 	.word	0x2000270c
 800a74c:	20002724 	.word	0x20002724
 800a750:	200026f0 	.word	0x200026f0
 800a754:	200026f4 	.word	0x200026f4

0800a758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a75e:	e019      	b.n	800a794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a760:	f000 fee2 	bl	800b528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a764:	4b10      	ldr	r3, [pc, #64]	@ (800a7a8 <prvCheckTasksWaitingTermination+0x50>)
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe fa25 	bl	8008bc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a776:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ac <prvCheckTasksWaitingTermination+0x54>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3b01      	subs	r3, #1
 800a77c:	4a0b      	ldr	r2, [pc, #44]	@ (800a7ac <prvCheckTasksWaitingTermination+0x54>)
 800a77e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a780:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b0 <prvCheckTasksWaitingTermination+0x58>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3b01      	subs	r3, #1
 800a786:	4a0a      	ldr	r2, [pc, #40]	@ (800a7b0 <prvCheckTasksWaitingTermination+0x58>)
 800a788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a78a:	f000 feff 	bl	800b58c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f810 	bl	800a7b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a794:	4b06      	ldr	r3, [pc, #24]	@ (800a7b0 <prvCheckTasksWaitingTermination+0x58>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e1      	bne.n	800a760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	2000270c 	.word	0x2000270c
 800a7ac:	20002738 	.word	0x20002738
 800a7b0:	20002720 	.word	0x20002720

0800a7b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d108      	bne.n	800a7d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f001 f89c 	bl	800b908 <vPortFree>
				vPortFree( pxTCB );
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 f899 	bl	800b908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7d6:	e019      	b.n	800a80c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d103      	bne.n	800a7ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 f890 	bl	800b908 <vPortFree>
	}
 800a7e8:	e010      	b.n	800a80c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d00b      	beq.n	800a80c <prvDeleteTCB+0x58>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	60fb      	str	r3, [r7, #12]
}
 800a806:	bf00      	nop
 800a808:	bf00      	nop
 800a80a:	e7fd      	b.n	800a808 <prvDeleteTCB+0x54>
	}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a81a:	4b0c      	ldr	r3, [pc, #48]	@ (800a84c <prvResetNextTaskUnblockTime+0x38>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a824:	4b0a      	ldr	r3, [pc, #40]	@ (800a850 <prvResetNextTaskUnblockTime+0x3c>)
 800a826:	f04f 32ff 	mov.w	r2, #4294967295
 800a82a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a82c:	e008      	b.n	800a840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a82e:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <prvResetNextTaskUnblockTime+0x38>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	4a04      	ldr	r2, [pc, #16]	@ (800a850 <prvResetNextTaskUnblockTime+0x3c>)
 800a83e:	6013      	str	r3, [r2, #0]
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	200026f0 	.word	0x200026f0
 800a850:	20002758 	.word	0x20002758

0800a854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a85a:	4b0b      	ldr	r3, [pc, #44]	@ (800a888 <xTaskGetSchedulerState+0x34>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d102      	bne.n	800a868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a862:	2301      	movs	r3, #1
 800a864:	607b      	str	r3, [r7, #4]
 800a866:	e008      	b.n	800a87a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a868:	4b08      	ldr	r3, [pc, #32]	@ (800a88c <xTaskGetSchedulerState+0x38>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d102      	bne.n	800a876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a870:	2302      	movs	r3, #2
 800a872:	607b      	str	r3, [r7, #4]
 800a874:	e001      	b.n	800a87a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a876:	2300      	movs	r3, #0
 800a878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a87a:	687b      	ldr	r3, [r7, #4]
	}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	20002744 	.word	0x20002744
 800a88c:	20002760 	.word	0x20002760

0800a890 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d051      	beq.n	800a94a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a954 <xTaskPriorityInherit+0xc4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d241      	bcs.n	800a938 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	db06      	blt.n	800a8ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8bc:	4b25      	ldr	r3, [pc, #148]	@ (800a954 <xTaskPriorityInherit+0xc4>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	6959      	ldr	r1, [r3, #20]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4a1f      	ldr	r2, [pc, #124]	@ (800a958 <xTaskPriorityInherit+0xc8>)
 800a8dc:	4413      	add	r3, r2
 800a8de:	4299      	cmp	r1, r3
 800a8e0:	d122      	bne.n	800a928 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe f96a 	bl	8008bc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8ec:	4b19      	ldr	r3, [pc, #100]	@ (800a954 <xTaskPriorityInherit+0xc4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8fa:	4b18      	ldr	r3, [pc, #96]	@ (800a95c <xTaskPriorityInherit+0xcc>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d903      	bls.n	800a90a <xTaskPriorityInherit+0x7a>
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a906:	4a15      	ldr	r2, [pc, #84]	@ (800a95c <xTaskPriorityInherit+0xcc>)
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4a10      	ldr	r2, [pc, #64]	@ (800a958 <xTaskPriorityInherit+0xc8>)
 800a918:	441a      	add	r2, r3
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4619      	mov	r1, r3
 800a920:	4610      	mov	r0, r2
 800a922:	f7fe f8f0 	bl	8008b06 <vListInsertEnd>
 800a926:	e004      	b.n	800a932 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a928:	4b0a      	ldr	r3, [pc, #40]	@ (800a954 <xTaskPriorityInherit+0xc4>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a932:	2301      	movs	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
 800a936:	e008      	b.n	800a94a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a93c:	4b05      	ldr	r3, [pc, #20]	@ (800a954 <xTaskPriorityInherit+0xc4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a942:	429a      	cmp	r2, r3
 800a944:	d201      	bcs.n	800a94a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a946:	2301      	movs	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a94a:	68fb      	ldr	r3, [r7, #12]
	}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20002264 	.word	0x20002264
 800a958:	20002268 	.word	0x20002268
 800a95c:	20002740 	.word	0x20002740

0800a960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a96c:	2300      	movs	r3, #0
 800a96e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d058      	beq.n	800aa28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a976:	4b2f      	ldr	r3, [pc, #188]	@ (800aa34 <xTaskPriorityDisinherit+0xd4>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d00b      	beq.n	800a998 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	60fb      	str	r3, [r7, #12]
}
 800a992:	bf00      	nop
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10b      	bne.n	800a9b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	60bb      	str	r3, [r7, #8]
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	e7fd      	b.n	800a9b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9bc:	1e5a      	subs	r2, r3, #1
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d02c      	beq.n	800aa28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d128      	bne.n	800aa28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe f8f0 	bl	8008bc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	@ (800aa38 <xTaskPriorityDisinherit+0xd8>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d903      	bls.n	800aa08 <xTaskPriorityDisinherit+0xa8>
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa04:	4a0c      	ldr	r2, [pc, #48]	@ (800aa38 <xTaskPriorityDisinherit+0xd8>)
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4a09      	ldr	r2, [pc, #36]	@ (800aa3c <xTaskPriorityDisinherit+0xdc>)
 800aa16:	441a      	add	r2, r3
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f7fe f871 	bl	8008b06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa24:	2301      	movs	r3, #1
 800aa26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa28:	697b      	ldr	r3, [r7, #20]
	}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20002264 	.word	0x20002264
 800aa38:	20002740 	.word	0x20002740
 800aa3c:	20002268 	.word	0x20002268

0800aa40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b088      	sub	sp, #32
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d06c      	beq.n	800ab32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10b      	bne.n	800aa78 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
}
 800aa72:	bf00      	nop
 800aa74:	bf00      	nop
 800aa76:	e7fd      	b.n	800aa74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d902      	bls.n	800aa88 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	61fb      	str	r3, [r7, #28]
 800aa86:	e002      	b.n	800aa8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa92:	69fa      	ldr	r2, [r7, #28]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d04c      	beq.n	800ab32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d147      	bne.n	800ab32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aaa2:	4b26      	ldr	r3, [pc, #152]	@ (800ab3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69ba      	ldr	r2, [r7, #24]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d10b      	bne.n	800aac4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	60bb      	str	r3, [r7, #8]
}
 800aabe:	bf00      	nop
 800aac0:	bf00      	nop
 800aac2:	e7fd      	b.n	800aac0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	db04      	blt.n	800aae2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	6959      	ldr	r1, [r3, #20]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4a13      	ldr	r2, [pc, #76]	@ (800ab40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aaf2:	4413      	add	r3, r2
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	d11c      	bne.n	800ab32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	3304      	adds	r3, #4
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe f85f 	bl	8008bc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab06:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d903      	bls.n	800ab16 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab12:	4a0c      	ldr	r2, [pc, #48]	@ (800ab44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4a07      	ldr	r2, [pc, #28]	@ (800ab40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ab24:	441a      	add	r2, r3
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	f7fd ffea 	bl	8008b06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab32:	bf00      	nop
 800ab34:	3720      	adds	r7, #32
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20002264 	.word	0x20002264
 800ab40:	20002268 	.word	0x20002268
 800ab44:	20002740 	.word	0x20002740

0800ab48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab4c:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d004      	beq.n	800ab5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab54:	4b05      	ldr	r3, [pc, #20]	@ (800ab6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ab5e:	4b03      	ldr	r3, [pc, #12]	@ (800ab6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab60:	681b      	ldr	r3, [r3, #0]
	}
 800ab62:	4618      	mov	r0, r3
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	20002264 	.word	0x20002264

0800ab70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab7a:	4b21      	ldr	r3, [pc, #132]	@ (800ac00 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab80:	4b20      	ldr	r3, [pc, #128]	@ (800ac04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3304      	adds	r3, #4
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe f81a 	bl	8008bc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab92:	d10a      	bne.n	800abaa <prvAddCurrentTaskToDelayedList+0x3a>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d007      	beq.n	800abaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ac04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	4619      	mov	r1, r3
 800aba2:	4819      	ldr	r0, [pc, #100]	@ (800ac08 <prvAddCurrentTaskToDelayedList+0x98>)
 800aba4:	f7fd ffaf 	bl	8008b06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aba8:	e026      	b.n	800abf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4413      	add	r3, r2
 800abb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abb2:	4b14      	ldr	r3, [pc, #80]	@ (800ac04 <prvAddCurrentTaskToDelayedList+0x94>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d209      	bcs.n	800abd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abc2:	4b12      	ldr	r3, [pc, #72]	@ (800ac0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ac04 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3304      	adds	r3, #4
 800abcc:	4619      	mov	r1, r3
 800abce:	4610      	mov	r0, r2
 800abd0:	f7fd ffbd 	bl	8008b4e <vListInsert>
}
 800abd4:	e010      	b.n	800abf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abd6:	4b0e      	ldr	r3, [pc, #56]	@ (800ac10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	4b0a      	ldr	r3, [pc, #40]	@ (800ac04 <prvAddCurrentTaskToDelayedList+0x94>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3304      	adds	r3, #4
 800abe0:	4619      	mov	r1, r3
 800abe2:	4610      	mov	r0, r2
 800abe4:	f7fd ffb3 	bl	8008b4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abe8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d202      	bcs.n	800abf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800abf2:	4a08      	ldr	r2, [pc, #32]	@ (800ac14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	6013      	str	r3, [r2, #0]
}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	2000273c 	.word	0x2000273c
 800ac04:	20002264 	.word	0x20002264
 800ac08:	20002724 	.word	0x20002724
 800ac0c:	200026f4 	.word	0x200026f4
 800ac10:	200026f0 	.word	0x200026f0
 800ac14:	20002758 	.word	0x20002758

0800ac18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08a      	sub	sp, #40	@ 0x28
 800ac1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac22:	f000 fb13 	bl	800b24c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac26:	4b1d      	ldr	r3, [pc, #116]	@ (800ac9c <xTimerCreateTimerTask+0x84>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d021      	beq.n	800ac72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac36:	1d3a      	adds	r2, r7, #4
 800ac38:	f107 0108 	add.w	r1, r7, #8
 800ac3c:	f107 030c 	add.w	r3, r7, #12
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fd ff19 	bl	8008a78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	9202      	str	r2, [sp, #8]
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	2302      	movs	r3, #2
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	2300      	movs	r3, #0
 800ac56:	460a      	mov	r2, r1
 800ac58:	4911      	ldr	r1, [pc, #68]	@ (800aca0 <xTimerCreateTimerTask+0x88>)
 800ac5a:	4812      	ldr	r0, [pc, #72]	@ (800aca4 <xTimerCreateTimerTask+0x8c>)
 800ac5c:	f7ff f806 	bl	8009c6c <xTaskCreateStatic>
 800ac60:	4603      	mov	r3, r0
 800ac62:	4a11      	ldr	r2, [pc, #68]	@ (800aca8 <xTimerCreateTimerTask+0x90>)
 800ac64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac66:	4b10      	ldr	r3, [pc, #64]	@ (800aca8 <xTimerCreateTimerTask+0x90>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10b      	bne.n	800ac90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	613b      	str	r3, [r7, #16]
}
 800ac8a:	bf00      	nop
 800ac8c:	bf00      	nop
 800ac8e:	e7fd      	b.n	800ac8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac90:	697b      	ldr	r3, [r7, #20]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20002794 	.word	0x20002794
 800aca0:	08010cb0 	.word	0x08010cb0
 800aca4:	0800ade5 	.word	0x0800ade5
 800aca8:	20002798 	.word	0x20002798

0800acac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08a      	sub	sp, #40	@ 0x28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acba:	2300      	movs	r3, #0
 800acbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10b      	bne.n	800acdc <xTimerGenericCommand+0x30>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	623b      	str	r3, [r7, #32]
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	e7fd      	b.n	800acd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acdc:	4b19      	ldr	r3, [pc, #100]	@ (800ad44 <xTimerGenericCommand+0x98>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d02a      	beq.n	800ad3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	dc18      	bgt.n	800ad28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800acf6:	f7ff fdad 	bl	800a854 <xTaskGetSchedulerState>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d109      	bne.n	800ad14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad00:	4b10      	ldr	r3, [pc, #64]	@ (800ad44 <xTimerGenericCommand+0x98>)
 800ad02:	6818      	ldr	r0, [r3, #0]
 800ad04:	f107 0110 	add.w	r1, r7, #16
 800ad08:	2300      	movs	r3, #0
 800ad0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad0c:	f7fe f936 	bl	8008f7c <xQueueGenericSend>
 800ad10:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad12:	e012      	b.n	800ad3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad14:	4b0b      	ldr	r3, [pc, #44]	@ (800ad44 <xTimerGenericCommand+0x98>)
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	f107 0110 	add.w	r1, r7, #16
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f7fe f92c 	bl	8008f7c <xQueueGenericSend>
 800ad24:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad26:	e008      	b.n	800ad3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad28:	4b06      	ldr	r3, [pc, #24]	@ (800ad44 <xTimerGenericCommand+0x98>)
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	f107 0110 	add.w	r1, r7, #16
 800ad30:	2300      	movs	r3, #0
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	f7fe fa24 	bl	8009180 <xQueueGenericSendFromISR>
 800ad38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3728      	adds	r7, #40	@ 0x28
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20002794 	.word	0x20002794

0800ad48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af02      	add	r7, sp, #8
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad52:	4b23      	ldr	r3, [pc, #140]	@ (800ade0 <prvProcessExpiredTimer+0x98>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fd ff2d 	bl	8008bc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d023      	beq.n	800adbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	699a      	ldr	r2, [r3, #24]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	18d1      	adds	r1, r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	6978      	ldr	r0, [r7, #20]
 800ad82:	f000 f8d5 	bl	800af30 <prvInsertTimerInActiveList>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d020      	beq.n	800adce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	2300      	movs	r3, #0
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	2100      	movs	r1, #0
 800ad96:	6978      	ldr	r0, [r7, #20]
 800ad98:	f7ff ff88 	bl	800acac <xTimerGenericCommand>
 800ad9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d114      	bne.n	800adce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	60fb      	str	r3, [r7, #12]
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	e7fd      	b.n	800adb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adc2:	f023 0301 	bic.w	r3, r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	6978      	ldr	r0, [r7, #20]
 800add4:	4798      	blx	r3
}
 800add6:	bf00      	nop
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	2000278c 	.word	0x2000278c

0800ade4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adec:	f107 0308 	add.w	r3, r7, #8
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 f859 	bl	800aea8 <prvGetNextExpireTime>
 800adf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	4619      	mov	r1, r3
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f805 	bl	800ae0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae02:	f000 f8d7 	bl	800afb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae06:	bf00      	nop
 800ae08:	e7f0      	b.n	800adec <prvTimerTask+0x8>
	...

0800ae0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae16:	f7ff f937 	bl	800a088 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae1a:	f107 0308 	add.w	r3, r7, #8
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f866 	bl	800aef0 <prvSampleTimeNow>
 800ae24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d130      	bne.n	800ae8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10a      	bne.n	800ae48 <prvProcessTimerOrBlockTask+0x3c>
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d806      	bhi.n	800ae48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae3a:	f7ff f933 	bl	800a0a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae3e:	68f9      	ldr	r1, [r7, #12]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff ff81 	bl	800ad48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae46:	e024      	b.n	800ae92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d008      	beq.n	800ae60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae4e:	4b13      	ldr	r3, [pc, #76]	@ (800ae9c <prvProcessTimerOrBlockTask+0x90>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <prvProcessTimerOrBlockTask+0x50>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e000      	b.n	800ae5e <prvProcessTimerOrBlockTask+0x52>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae60:	4b0f      	ldr	r3, [pc, #60]	@ (800aea0 <prvProcessTimerOrBlockTask+0x94>)
 800ae62:	6818      	ldr	r0, [r3, #0]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f7fe fec9 	bl	8009c04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae72:	f7ff f917 	bl	800a0a4 <xTaskResumeAll>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae7c:	4b09      	ldr	r3, [pc, #36]	@ (800aea4 <prvProcessTimerOrBlockTask+0x98>)
 800ae7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	f3bf 8f6f 	isb	sy
}
 800ae8c:	e001      	b.n	800ae92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae8e:	f7ff f909 	bl	800a0a4 <xTaskResumeAll>
}
 800ae92:	bf00      	nop
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20002790 	.word	0x20002790
 800aea0:	20002794 	.word	0x20002794
 800aea4:	e000ed04 	.word	0xe000ed04

0800aea8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aeb0:	4b0e      	ldr	r3, [pc, #56]	@ (800aeec <prvGetNextExpireTime+0x44>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <prvGetNextExpireTime+0x16>
 800aeba:	2201      	movs	r2, #1
 800aebc:	e000      	b.n	800aec0 <prvGetNextExpireTime+0x18>
 800aebe:	2200      	movs	r2, #0
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d105      	bne.n	800aed8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aecc:	4b07      	ldr	r3, [pc, #28]	@ (800aeec <prvGetNextExpireTime+0x44>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	e001      	b.n	800aedc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aedc:	68fb      	ldr	r3, [r7, #12]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	2000278c 	.word	0x2000278c

0800aef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aef8:	f7ff f972 	bl	800a1e0 <xTaskGetTickCount>
 800aefc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aefe:	4b0b      	ldr	r3, [pc, #44]	@ (800af2c <prvSampleTimeNow+0x3c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	429a      	cmp	r2, r3
 800af06:	d205      	bcs.n	800af14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af08:	f000 f93a 	bl	800b180 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e002      	b.n	800af1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af1a:	4a04      	ldr	r2, [pc, #16]	@ (800af2c <prvSampleTimeNow+0x3c>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af20:	68fb      	ldr	r3, [r7, #12]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	2000279c 	.word	0x2000279c

0800af30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	429a      	cmp	r2, r3
 800af54:	d812      	bhi.n	800af7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	1ad2      	subs	r2, r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	429a      	cmp	r2, r3
 800af62:	d302      	bcc.n	800af6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af64:	2301      	movs	r3, #1
 800af66:	617b      	str	r3, [r7, #20]
 800af68:	e01b      	b.n	800afa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af6a:	4b10      	ldr	r3, [pc, #64]	@ (800afac <prvInsertTimerInActiveList+0x7c>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3304      	adds	r3, #4
 800af72:	4619      	mov	r1, r3
 800af74:	4610      	mov	r0, r2
 800af76:	f7fd fdea 	bl	8008b4e <vListInsert>
 800af7a:	e012      	b.n	800afa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d206      	bcs.n	800af92 <prvInsertTimerInActiveList+0x62>
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d302      	bcc.n	800af92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af8c:	2301      	movs	r3, #1
 800af8e:	617b      	str	r3, [r7, #20]
 800af90:	e007      	b.n	800afa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af92:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <prvInsertTimerInActiveList+0x80>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3304      	adds	r3, #4
 800af9a:	4619      	mov	r1, r3
 800af9c:	4610      	mov	r0, r2
 800af9e:	f7fd fdd6 	bl	8008b4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afa2:	697b      	ldr	r3, [r7, #20]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3718      	adds	r7, #24
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20002790 	.word	0x20002790
 800afb0:	2000278c 	.word	0x2000278c

0800afb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08e      	sub	sp, #56	@ 0x38
 800afb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afba:	e0ce      	b.n	800b15a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	da19      	bge.n	800aff6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afc2:	1d3b      	adds	r3, r7, #4
 800afc4:	3304      	adds	r3, #4
 800afc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10b      	bne.n	800afe6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	61fb      	str	r3, [r7, #28]
}
 800afe0:	bf00      	nop
 800afe2:	bf00      	nop
 800afe4:	e7fd      	b.n	800afe2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800afe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afec:	6850      	ldr	r0, [r2, #4]
 800afee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aff0:	6892      	ldr	r2, [r2, #8]
 800aff2:	4611      	mov	r1, r2
 800aff4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f2c0 80ae 	blt.w	800b15a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	3304      	adds	r3, #4
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fdd6 	bl	8008bc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b014:	463b      	mov	r3, r7
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff ff6a 	bl	800aef0 <prvSampleTimeNow>
 800b01c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b09      	cmp	r3, #9
 800b022:	f200 8097 	bhi.w	800b154 <prvProcessReceivedCommands+0x1a0>
 800b026:	a201      	add	r2, pc, #4	@ (adr r2, 800b02c <prvProcessReceivedCommands+0x78>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b055 	.word	0x0800b055
 800b030:	0800b055 	.word	0x0800b055
 800b034:	0800b055 	.word	0x0800b055
 800b038:	0800b0cb 	.word	0x0800b0cb
 800b03c:	0800b0df 	.word	0x0800b0df
 800b040:	0800b12b 	.word	0x0800b12b
 800b044:	0800b055 	.word	0x0800b055
 800b048:	0800b055 	.word	0x0800b055
 800b04c:	0800b0cb 	.word	0x0800b0cb
 800b050:	0800b0df 	.word	0x0800b0df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	18d1      	adds	r1, r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b074:	f7ff ff5c 	bl	800af30 <prvInsertTimerInActiveList>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d06c      	beq.n	800b158 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b084:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b08c:	f003 0304 	and.w	r3, r3, #4
 800b090:	2b00      	cmp	r3, #0
 800b092:	d061      	beq.n	800b158 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	441a      	add	r2, r3
 800b09c:	2300      	movs	r3, #0
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0a6:	f7ff fe01 	bl	800acac <xTimerGenericCommand>
 800b0aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d152      	bne.n	800b158 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	61bb      	str	r3, [r7, #24]
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop
 800b0c8:	e7fd      	b.n	800b0c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0d0:	f023 0301 	bic.w	r3, r3, #1
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b0dc:	e03d      	b.n	800b15a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10b      	bne.n	800b116 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	617b      	str	r3, [r7, #20]
}
 800b110:	bf00      	nop
 800b112:	bf00      	nop
 800b114:	e7fd      	b.n	800b112 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b118:	699a      	ldr	r2, [r3, #24]
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	18d1      	adds	r1, r2, r3
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b124:	f7ff ff04 	bl	800af30 <prvInsertTimerInActiveList>
					break;
 800b128:	e017      	b.n	800b15a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d103      	bne.n	800b140 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b13a:	f000 fbe5 	bl	800b908 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b13e:	e00c      	b.n	800b15a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b146:	f023 0301 	bic.w	r3, r3, #1
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b152:	e002      	b.n	800b15a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b154:	bf00      	nop
 800b156:	e000      	b.n	800b15a <prvProcessReceivedCommands+0x1a6>
					break;
 800b158:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b15a:	4b08      	ldr	r3, [pc, #32]	@ (800b17c <prvProcessReceivedCommands+0x1c8>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	1d39      	adds	r1, r7, #4
 800b160:	2200      	movs	r2, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe f93a 	bl	80093dc <xQueueReceive>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f47f af26 	bne.w	800afbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	3730      	adds	r7, #48	@ 0x30
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20002794 	.word	0x20002794

0800b180 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b186:	e049      	b.n	800b21c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b188:	4b2e      	ldr	r3, [pc, #184]	@ (800b244 <prvSwitchTimerLists+0xc4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b192:	4b2c      	ldr	r3, [pc, #176]	@ (800b244 <prvSwitchTimerLists+0xc4>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fd fd0d 	bl	8008bc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1b4:	f003 0304 	and.w	r3, r3, #4
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d02f      	beq.n	800b21c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d90e      	bls.n	800b1ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1da:	4b1a      	ldr	r3, [pc, #104]	@ (800b244 <prvSwitchTimerLists+0xc4>)
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	f7fd fcb2 	bl	8008b4e <vListInsert>
 800b1ea:	e017      	b.n	800b21c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff fd58 	bl	800acac <xTimerGenericCommand>
 800b1fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10b      	bne.n	800b21c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	603b      	str	r3, [r7, #0]
}
 800b216:	bf00      	nop
 800b218:	bf00      	nop
 800b21a:	e7fd      	b.n	800b218 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b21c:	4b09      	ldr	r3, [pc, #36]	@ (800b244 <prvSwitchTimerLists+0xc4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1b0      	bne.n	800b188 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b226:	4b07      	ldr	r3, [pc, #28]	@ (800b244 <prvSwitchTimerLists+0xc4>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b22c:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <prvSwitchTimerLists+0xc8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a04      	ldr	r2, [pc, #16]	@ (800b244 <prvSwitchTimerLists+0xc4>)
 800b232:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b234:	4a04      	ldr	r2, [pc, #16]	@ (800b248 <prvSwitchTimerLists+0xc8>)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	6013      	str	r3, [r2, #0]
}
 800b23a:	bf00      	nop
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	2000278c 	.word	0x2000278c
 800b248:	20002790 	.word	0x20002790

0800b24c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b252:	f000 f969 	bl	800b528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b256:	4b15      	ldr	r3, [pc, #84]	@ (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d120      	bne.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b25e:	4814      	ldr	r0, [pc, #80]	@ (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b260:	f7fd fc24 	bl	8008aac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b264:	4813      	ldr	r0, [pc, #76]	@ (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b266:	f7fd fc21 	bl	8008aac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b26a:	4b13      	ldr	r3, [pc, #76]	@ (800b2b8 <prvCheckForValidListAndQueue+0x6c>)
 800b26c:	4a10      	ldr	r2, [pc, #64]	@ (800b2b0 <prvCheckForValidListAndQueue+0x64>)
 800b26e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b270:	4b12      	ldr	r3, [pc, #72]	@ (800b2bc <prvCheckForValidListAndQueue+0x70>)
 800b272:	4a10      	ldr	r2, [pc, #64]	@ (800b2b4 <prvCheckForValidListAndQueue+0x68>)
 800b274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b276:	2300      	movs	r3, #0
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4b11      	ldr	r3, [pc, #68]	@ (800b2c0 <prvCheckForValidListAndQueue+0x74>)
 800b27c:	4a11      	ldr	r2, [pc, #68]	@ (800b2c4 <prvCheckForValidListAndQueue+0x78>)
 800b27e:	2110      	movs	r1, #16
 800b280:	200a      	movs	r0, #10
 800b282:	f7fd fd31 	bl	8008ce8 <xQueueGenericCreateStatic>
 800b286:	4603      	mov	r3, r0
 800b288:	4a08      	ldr	r2, [pc, #32]	@ (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b28c:	4b07      	ldr	r3, [pc, #28]	@ (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b294:	4b05      	ldr	r3, [pc, #20]	@ (800b2ac <prvCheckForValidListAndQueue+0x60>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	490b      	ldr	r1, [pc, #44]	@ (800b2c8 <prvCheckForValidListAndQueue+0x7c>)
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fc5e 	bl	8009b5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2a0:	f000 f974 	bl	800b58c <vPortExitCritical>
}
 800b2a4:	bf00      	nop
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20002794 	.word	0x20002794
 800b2b0:	20002764 	.word	0x20002764
 800b2b4:	20002778 	.word	0x20002778
 800b2b8:	2000278c 	.word	0x2000278c
 800b2bc:	20002790 	.word	0x20002790
 800b2c0:	20002840 	.word	0x20002840
 800b2c4:	200027a0 	.word	0x200027a0
 800b2c8:	08010cb8 	.word	0x08010cb8

0800b2cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3b04      	subs	r3, #4
 800b2dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b2e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f023 0201 	bic.w	r2, r3, #1
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3b04      	subs	r3, #4
 800b2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b330 <pxPortInitialiseStack+0x64>)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3b14      	subs	r3, #20
 800b306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3b04      	subs	r3, #4
 800b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f06f 0202 	mvn.w	r2, #2
 800b31a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3b20      	subs	r3, #32
 800b320:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b322:	68fb      	ldr	r3, [r7, #12]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	0800b335 	.word	0x0800b335

0800b334 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b33e:	4b13      	ldr	r3, [pc, #76]	@ (800b38c <prvTaskExitError+0x58>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b346:	d00b      	beq.n	800b360 <prvTaskExitError+0x2c>
	__asm volatile
 800b348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	60fb      	str	r3, [r7, #12]
}
 800b35a:	bf00      	nop
 800b35c:	bf00      	nop
 800b35e:	e7fd      	b.n	800b35c <prvTaskExitError+0x28>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	60bb      	str	r3, [r7, #8]
}
 800b372:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b374:	bf00      	nop
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0fc      	beq.n	800b376 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b37c:	bf00      	nop
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	20000080 	.word	0x20000080

0800b390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b390:	4b07      	ldr	r3, [pc, #28]	@ (800b3b0 <pxCurrentTCBConst2>)
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	6808      	ldr	r0, [r1, #0]
 800b396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39a:	f380 8809 	msr	PSP, r0
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f04f 0000 	mov.w	r0, #0
 800b3a6:	f380 8811 	msr	BASEPRI, r0
 800b3aa:	4770      	bx	lr
 800b3ac:	f3af 8000 	nop.w

0800b3b0 <pxCurrentTCBConst2>:
 800b3b0:	20002264 	.word	0x20002264
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop

0800b3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3b8:	4808      	ldr	r0, [pc, #32]	@ (800b3dc <prvPortStartFirstTask+0x24>)
 800b3ba:	6800      	ldr	r0, [r0, #0]
 800b3bc:	6800      	ldr	r0, [r0, #0]
 800b3be:	f380 8808 	msr	MSP, r0
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8814 	msr	CONTROL, r0
 800b3ca:	b662      	cpsie	i
 800b3cc:	b661      	cpsie	f
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	df00      	svc	0
 800b3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3da:	bf00      	nop
 800b3dc:	e000ed08 	.word	0xe000ed08

0800b3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3e6:	4b47      	ldr	r3, [pc, #284]	@ (800b504 <xPortStartScheduler+0x124>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a47      	ldr	r2, [pc, #284]	@ (800b508 <xPortStartScheduler+0x128>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d10b      	bne.n	800b408 <xPortStartScheduler+0x28>
	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	60fb      	str	r3, [r7, #12]
}
 800b402:	bf00      	nop
 800b404:	bf00      	nop
 800b406:	e7fd      	b.n	800b404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b408:	4b3e      	ldr	r3, [pc, #248]	@ (800b504 <xPortStartScheduler+0x124>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a3f      	ldr	r2, [pc, #252]	@ (800b50c <xPortStartScheduler+0x12c>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d10b      	bne.n	800b42a <xPortStartScheduler+0x4a>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	613b      	str	r3, [r7, #16]
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop
 800b428:	e7fd      	b.n	800b426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b42a:	4b39      	ldr	r3, [pc, #228]	@ (800b510 <xPortStartScheduler+0x130>)
 800b42c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	22ff      	movs	r2, #255	@ 0xff
 800b43a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	b2db      	uxtb	r3, r3
 800b442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b444:	78fb      	ldrb	r3, [r7, #3]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	4b31      	ldr	r3, [pc, #196]	@ (800b514 <xPortStartScheduler+0x134>)
 800b450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b452:	4b31      	ldr	r3, [pc, #196]	@ (800b518 <xPortStartScheduler+0x138>)
 800b454:	2207      	movs	r2, #7
 800b456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b458:	e009      	b.n	800b46e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b45a:	4b2f      	ldr	r3, [pc, #188]	@ (800b518 <xPortStartScheduler+0x138>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3b01      	subs	r3, #1
 800b460:	4a2d      	ldr	r2, [pc, #180]	@ (800b518 <xPortStartScheduler+0x138>)
 800b462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	b2db      	uxtb	r3, r3
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	b2db      	uxtb	r3, r3
 800b472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b476:	2b80      	cmp	r3, #128	@ 0x80
 800b478:	d0ef      	beq.n	800b45a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b47a:	4b27      	ldr	r3, [pc, #156]	@ (800b518 <xPortStartScheduler+0x138>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f1c3 0307 	rsb	r3, r3, #7
 800b482:	2b04      	cmp	r3, #4
 800b484:	d00b      	beq.n	800b49e <xPortStartScheduler+0xbe>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	60bb      	str	r3, [r7, #8]
}
 800b498:	bf00      	nop
 800b49a:	bf00      	nop
 800b49c:	e7fd      	b.n	800b49a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b49e:	4b1e      	ldr	r3, [pc, #120]	@ (800b518 <xPortStartScheduler+0x138>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	021b      	lsls	r3, r3, #8
 800b4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b518 <xPortStartScheduler+0x138>)
 800b4a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b518 <xPortStartScheduler+0x138>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4b0:	4a19      	ldr	r2, [pc, #100]	@ (800b518 <xPortStartScheduler+0x138>)
 800b4b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4bc:	4b17      	ldr	r3, [pc, #92]	@ (800b51c <xPortStartScheduler+0x13c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a16      	ldr	r2, [pc, #88]	@ (800b51c <xPortStartScheduler+0x13c>)
 800b4c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b4c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4c8:	4b14      	ldr	r3, [pc, #80]	@ (800b51c <xPortStartScheduler+0x13c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a13      	ldr	r2, [pc, #76]	@ (800b51c <xPortStartScheduler+0x13c>)
 800b4ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b4d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4d4:	f000 f8da 	bl	800b68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4d8:	4b11      	ldr	r3, [pc, #68]	@ (800b520 <xPortStartScheduler+0x140>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4de:	f000 f8f9 	bl	800b6d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4e2:	4b10      	ldr	r3, [pc, #64]	@ (800b524 <xPortStartScheduler+0x144>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a0f      	ldr	r2, [pc, #60]	@ (800b524 <xPortStartScheduler+0x144>)
 800b4e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b4ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4ee:	f7ff ff63 	bl	800b3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4f2:	f7fe ff3f 	bl	800a374 <vTaskSwitchContext>
	prvTaskExitError();
 800b4f6:	f7ff ff1d 	bl	800b334 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	e000ed00 	.word	0xe000ed00
 800b508:	410fc271 	.word	0x410fc271
 800b50c:	410fc270 	.word	0x410fc270
 800b510:	e000e400 	.word	0xe000e400
 800b514:	20002890 	.word	0x20002890
 800b518:	20002894 	.word	0x20002894
 800b51c:	e000ed20 	.word	0xe000ed20
 800b520:	20000080 	.word	0x20000080
 800b524:	e000ef34 	.word	0xe000ef34

0800b528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	607b      	str	r3, [r7, #4]
}
 800b540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b542:	4b10      	ldr	r3, [pc, #64]	@ (800b584 <vPortEnterCritical+0x5c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	4a0e      	ldr	r2, [pc, #56]	@ (800b584 <vPortEnterCritical+0x5c>)
 800b54a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b54c:	4b0d      	ldr	r3, [pc, #52]	@ (800b584 <vPortEnterCritical+0x5c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d110      	bne.n	800b576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b554:	4b0c      	ldr	r3, [pc, #48]	@ (800b588 <vPortEnterCritical+0x60>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00b      	beq.n	800b576 <vPortEnterCritical+0x4e>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	603b      	str	r3, [r7, #0]
}
 800b570:	bf00      	nop
 800b572:	bf00      	nop
 800b574:	e7fd      	b.n	800b572 <vPortEnterCritical+0x4a>
	}
}
 800b576:	bf00      	nop
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	20000080 	.word	0x20000080
 800b588:	e000ed04 	.word	0xe000ed04

0800b58c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b592:	4b12      	ldr	r3, [pc, #72]	@ (800b5dc <vPortExitCritical+0x50>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10b      	bne.n	800b5b2 <vPortExitCritical+0x26>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	607b      	str	r3, [r7, #4]
}
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
 800b5b0:	e7fd      	b.n	800b5ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <vPortExitCritical+0x50>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	4a08      	ldr	r2, [pc, #32]	@ (800b5dc <vPortExitCritical+0x50>)
 800b5ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5bc:	4b07      	ldr	r3, [pc, #28]	@ (800b5dc <vPortExitCritical+0x50>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d105      	bne.n	800b5d0 <vPortExitCritical+0x44>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f383 8811 	msr	BASEPRI, r3
}
 800b5ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	20000080 	.word	0x20000080

0800b5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5e0:	f3ef 8009 	mrs	r0, PSP
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	4b15      	ldr	r3, [pc, #84]	@ (800b640 <pxCurrentTCBConst>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	f01e 0f10 	tst.w	lr, #16
 800b5f0:	bf08      	it	eq
 800b5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	6010      	str	r0, [r2, #0]
 800b5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b604:	f380 8811 	msr	BASEPRI, r0
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f7fe feb0 	bl	800a374 <vTaskSwitchContext>
 800b614:	f04f 0000 	mov.w	r0, #0
 800b618:	f380 8811 	msr	BASEPRI, r0
 800b61c:	bc09      	pop	{r0, r3}
 800b61e:	6819      	ldr	r1, [r3, #0]
 800b620:	6808      	ldr	r0, [r1, #0]
 800b622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b626:	f01e 0f10 	tst.w	lr, #16
 800b62a:	bf08      	it	eq
 800b62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b630:	f380 8809 	msr	PSP, r0
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w

0800b640 <pxCurrentTCBConst>:
 800b640:	20002264 	.word	0x20002264
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop

0800b648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	607b      	str	r3, [r7, #4]
}
 800b660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b662:	f7fe fdcd 	bl	800a200 <xTaskIncrementTick>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b66c:	4b06      	ldr	r3, [pc, #24]	@ (800b688 <xPortSysTickHandler+0x40>)
 800b66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	f383 8811 	msr	BASEPRI, r3
}
 800b67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b690:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c0 <vPortSetupTimerInterrupt+0x34>)
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b696:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c4 <vPortSetupTimerInterrupt+0x38>)
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b69c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c8 <vPortSetupTimerInterrupt+0x3c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b6cc <vPortSetupTimerInterrupt+0x40>)
 800b6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a6:	099b      	lsrs	r3, r3, #6
 800b6a8:	4a09      	ldr	r2, [pc, #36]	@ (800b6d0 <vPortSetupTimerInterrupt+0x44>)
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6ae:	4b04      	ldr	r3, [pc, #16]	@ (800b6c0 <vPortSetupTimerInterrupt+0x34>)
 800b6b0:	2207      	movs	r2, #7
 800b6b2:	601a      	str	r2, [r3, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	e000e010 	.word	0xe000e010
 800b6c4:	e000e018 	.word	0xe000e018
 800b6c8:	20000064 	.word	0x20000064
 800b6cc:	10624dd3 	.word	0x10624dd3
 800b6d0:	e000e014 	.word	0xe000e014

0800b6d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b6e4 <vPortEnableVFP+0x10>
 800b6d8:	6801      	ldr	r1, [r0, #0]
 800b6da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b6de:	6001      	str	r1, [r0, #0]
 800b6e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6e2:	bf00      	nop
 800b6e4:	e000ed88 	.word	0xe000ed88

0800b6e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6ee:	f3ef 8305 	mrs	r3, IPSR
 800b6f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b0f      	cmp	r3, #15
 800b6f8:	d915      	bls.n	800b726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6fa:	4a18      	ldr	r2, [pc, #96]	@ (800b75c <vPortValidateInterruptPriority+0x74>)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b704:	4b16      	ldr	r3, [pc, #88]	@ (800b760 <vPortValidateInterruptPriority+0x78>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	7afa      	ldrb	r2, [r7, #11]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d20b      	bcs.n	800b726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b712:	f383 8811 	msr	BASEPRI, r3
 800b716:	f3bf 8f6f 	isb	sy
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	607b      	str	r3, [r7, #4]
}
 800b720:	bf00      	nop
 800b722:	bf00      	nop
 800b724:	e7fd      	b.n	800b722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b726:	4b0f      	ldr	r3, [pc, #60]	@ (800b764 <vPortValidateInterruptPriority+0x7c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b72e:	4b0e      	ldr	r3, [pc, #56]	@ (800b768 <vPortValidateInterruptPriority+0x80>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d90b      	bls.n	800b74e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	603b      	str	r3, [r7, #0]
}
 800b748:	bf00      	nop
 800b74a:	bf00      	nop
 800b74c:	e7fd      	b.n	800b74a <vPortValidateInterruptPriority+0x62>
	}
 800b74e:	bf00      	nop
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	e000e3f0 	.word	0xe000e3f0
 800b760:	20002890 	.word	0x20002890
 800b764:	e000ed0c 	.word	0xe000ed0c
 800b768:	20002894 	.word	0x20002894

0800b76c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08a      	sub	sp, #40	@ 0x28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b774:	2300      	movs	r3, #0
 800b776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b778:	f7fe fc86 	bl	800a088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b77c:	4b5c      	ldr	r3, [pc, #368]	@ (800b8f0 <pvPortMalloc+0x184>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b784:	f000 f924 	bl	800b9d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b788:	4b5a      	ldr	r3, [pc, #360]	@ (800b8f4 <pvPortMalloc+0x188>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4013      	ands	r3, r2
 800b790:	2b00      	cmp	r3, #0
 800b792:	f040 8095 	bne.w	800b8c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d01e      	beq.n	800b7da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b79c:	2208      	movs	r2, #8
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d015      	beq.n	800b7da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f023 0307 	bic.w	r3, r3, #7
 800b7b4:	3308      	adds	r3, #8
 800b7b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f003 0307 	and.w	r3, r3, #7
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00b      	beq.n	800b7da <pvPortMalloc+0x6e>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	617b      	str	r3, [r7, #20]
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	e7fd      	b.n	800b7d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d06f      	beq.n	800b8c0 <pvPortMalloc+0x154>
 800b7e0:	4b45      	ldr	r3, [pc, #276]	@ (800b8f8 <pvPortMalloc+0x18c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d86a      	bhi.n	800b8c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7ea:	4b44      	ldr	r3, [pc, #272]	@ (800b8fc <pvPortMalloc+0x190>)
 800b7ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7ee:	4b43      	ldr	r3, [pc, #268]	@ (800b8fc <pvPortMalloc+0x190>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7f4:	e004      	b.n	800b800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	429a      	cmp	r2, r3
 800b808:	d903      	bls.n	800b812 <pvPortMalloc+0xa6>
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f1      	bne.n	800b7f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b812:	4b37      	ldr	r3, [pc, #220]	@ (800b8f0 <pvPortMalloc+0x184>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b818:	429a      	cmp	r2, r3
 800b81a:	d051      	beq.n	800b8c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b81c:	6a3b      	ldr	r3, [r7, #32]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2208      	movs	r2, #8
 800b822:	4413      	add	r3, r2
 800b824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	1ad2      	subs	r2, r2, r3
 800b836:	2308      	movs	r3, #8
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d920      	bls.n	800b880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4413      	add	r3, r2
 800b844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	f003 0307 	and.w	r3, r3, #7
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <pvPortMalloc+0xfc>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	613b      	str	r3, [r7, #16]
}
 800b862:	bf00      	nop
 800b864:	bf00      	nop
 800b866:	e7fd      	b.n	800b864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b87a:	69b8      	ldr	r0, [r7, #24]
 800b87c:	f000 f90a 	bl	800ba94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b880:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f8 <pvPortMalloc+0x18c>)
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	4a1b      	ldr	r2, [pc, #108]	@ (800b8f8 <pvPortMalloc+0x18c>)
 800b88c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b88e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f8 <pvPortMalloc+0x18c>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	4b1b      	ldr	r3, [pc, #108]	@ (800b900 <pvPortMalloc+0x194>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	429a      	cmp	r2, r3
 800b898:	d203      	bcs.n	800b8a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b89a:	4b17      	ldr	r3, [pc, #92]	@ (800b8f8 <pvPortMalloc+0x18c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a18      	ldr	r2, [pc, #96]	@ (800b900 <pvPortMalloc+0x194>)
 800b8a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	685a      	ldr	r2, [r3, #4]
 800b8a6:	4b13      	ldr	r3, [pc, #76]	@ (800b8f4 <pvPortMalloc+0x188>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8b6:	4b13      	ldr	r3, [pc, #76]	@ (800b904 <pvPortMalloc+0x198>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	4a11      	ldr	r2, [pc, #68]	@ (800b904 <pvPortMalloc+0x198>)
 800b8be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8c0:	f7fe fbf0 	bl	800a0a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	f003 0307 	and.w	r3, r3, #7
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <pvPortMalloc+0x17a>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	60fb      	str	r3, [r7, #12]
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop
 800b8e4:	e7fd      	b.n	800b8e2 <pvPortMalloc+0x176>
	return pvReturn;
 800b8e6:	69fb      	ldr	r3, [r7, #28]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3728      	adds	r7, #40	@ 0x28
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20003458 	.word	0x20003458
 800b8f4:	2000346c 	.word	0x2000346c
 800b8f8:	2000345c 	.word	0x2000345c
 800b8fc:	20003450 	.word	0x20003450
 800b900:	20003460 	.word	0x20003460
 800b904:	20003464 	.word	0x20003464

0800b908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d04f      	beq.n	800b9ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b91a:	2308      	movs	r3, #8
 800b91c:	425b      	negs	r3, r3
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	4413      	add	r3, r2
 800b922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	4b25      	ldr	r3, [pc, #148]	@ (800b9c4 <vPortFree+0xbc>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4013      	ands	r3, r2
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10b      	bne.n	800b94e <vPortFree+0x46>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	60fb      	str	r3, [r7, #12]
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	e7fd      	b.n	800b94a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00b      	beq.n	800b96e <vPortFree+0x66>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	60bb      	str	r3, [r7, #8]
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	e7fd      	b.n	800b96a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	4b14      	ldr	r3, [pc, #80]	@ (800b9c4 <vPortFree+0xbc>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4013      	ands	r3, r2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d01e      	beq.n	800b9ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d11a      	bne.n	800b9ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	4b0e      	ldr	r3, [pc, #56]	@ (800b9c4 <vPortFree+0xbc>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	43db      	mvns	r3, r3
 800b98e:	401a      	ands	r2, r3
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b994:	f7fe fb78 	bl	800a088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c8 <vPortFree+0xc0>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	4a09      	ldr	r2, [pc, #36]	@ (800b9c8 <vPortFree+0xc0>)
 800b9a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9a6:	6938      	ldr	r0, [r7, #16]
 800b9a8:	f000 f874 	bl	800ba94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9ac:	4b07      	ldr	r3, [pc, #28]	@ (800b9cc <vPortFree+0xc4>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	4a06      	ldr	r2, [pc, #24]	@ (800b9cc <vPortFree+0xc4>)
 800b9b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9b6:	f7fe fb75 	bl	800a0a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9ba:	bf00      	nop
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2000346c 	.word	0x2000346c
 800b9c8:	2000345c 	.word	0x2000345c
 800b9cc:	20003468 	.word	0x20003468

0800b9d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b9da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9dc:	4b27      	ldr	r3, [pc, #156]	@ (800ba7c <prvHeapInit+0xac>)
 800b9de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	3307      	adds	r3, #7
 800b9ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f023 0307 	bic.w	r3, r3, #7
 800b9f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	4a1f      	ldr	r2, [pc, #124]	@ (800ba7c <prvHeapInit+0xac>)
 800ba00:	4413      	add	r3, r2
 800ba02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba08:	4a1d      	ldr	r2, [pc, #116]	@ (800ba80 <prvHeapInit+0xb0>)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ba80 <prvHeapInit+0xb0>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	4413      	add	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	1a9b      	subs	r3, r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f023 0307 	bic.w	r3, r3, #7
 800ba2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4a15      	ldr	r2, [pc, #84]	@ (800ba84 <prvHeapInit+0xb4>)
 800ba30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba32:	4b14      	ldr	r3, [pc, #80]	@ (800ba84 <prvHeapInit+0xb4>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2200      	movs	r2, #0
 800ba38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba3a:	4b12      	ldr	r3, [pc, #72]	@ (800ba84 <prvHeapInit+0xb4>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	1ad2      	subs	r2, r2, r3
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba50:	4b0c      	ldr	r3, [pc, #48]	@ (800ba84 <prvHeapInit+0xb4>)
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ba88 <prvHeapInit+0xb8>)
 800ba5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	4a09      	ldr	r2, [pc, #36]	@ (800ba8c <prvHeapInit+0xbc>)
 800ba66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba68:	4b09      	ldr	r3, [pc, #36]	@ (800ba90 <prvHeapInit+0xc0>)
 800ba6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba6e:	601a      	str	r2, [r3, #0]
}
 800ba70:	bf00      	nop
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20002898 	.word	0x20002898
 800ba80:	20003450 	.word	0x20003450
 800ba84:	20003458 	.word	0x20003458
 800ba88:	20003460 	.word	0x20003460
 800ba8c:	2000345c 	.word	0x2000345c
 800ba90:	2000346c 	.word	0x2000346c

0800ba94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba9c:	4b28      	ldr	r3, [pc, #160]	@ (800bb40 <prvInsertBlockIntoFreeList+0xac>)
 800ba9e:	60fb      	str	r3, [r7, #12]
 800baa0:	e002      	b.n	800baa8 <prvInsertBlockIntoFreeList+0x14>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	60fb      	str	r3, [r7, #12]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d8f7      	bhi.n	800baa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	4413      	add	r3, r2
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d108      	bne.n	800bad6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	441a      	add	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	441a      	add	r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d118      	bne.n	800bb1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	4b15      	ldr	r3, [pc, #84]	@ (800bb44 <prvInsertBlockIntoFreeList+0xb0>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d00d      	beq.n	800bb12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	441a      	add	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	e008      	b.n	800bb24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb12:	4b0c      	ldr	r3, [pc, #48]	@ (800bb44 <prvInsertBlockIntoFreeList+0xb0>)
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	e003      	b.n	800bb24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d002      	beq.n	800bb32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb32:	bf00      	nop
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	20003450 	.word	0x20003450
 800bb44:	20003458 	.word	0x20003458

0800bb48 <rand>:
 800bb48:	4b16      	ldr	r3, [pc, #88]	@ (800bba4 <rand+0x5c>)
 800bb4a:	b510      	push	{r4, lr}
 800bb4c:	681c      	ldr	r4, [r3, #0]
 800bb4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bb50:	b9b3      	cbnz	r3, 800bb80 <rand+0x38>
 800bb52:	2018      	movs	r0, #24
 800bb54:	f002 f82e 	bl	800dbb4 <malloc>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	6320      	str	r0, [r4, #48]	@ 0x30
 800bb5c:	b920      	cbnz	r0, 800bb68 <rand+0x20>
 800bb5e:	4b12      	ldr	r3, [pc, #72]	@ (800bba8 <rand+0x60>)
 800bb60:	4812      	ldr	r0, [pc, #72]	@ (800bbac <rand+0x64>)
 800bb62:	2152      	movs	r1, #82	@ 0x52
 800bb64:	f001 f964 	bl	800ce30 <__assert_func>
 800bb68:	4911      	ldr	r1, [pc, #68]	@ (800bbb0 <rand+0x68>)
 800bb6a:	4b12      	ldr	r3, [pc, #72]	@ (800bbb4 <rand+0x6c>)
 800bb6c:	e9c0 1300 	strd	r1, r3, [r0]
 800bb70:	4b11      	ldr	r3, [pc, #68]	@ (800bbb8 <rand+0x70>)
 800bb72:	6083      	str	r3, [r0, #8]
 800bb74:	230b      	movs	r3, #11
 800bb76:	8183      	strh	r3, [r0, #12]
 800bb78:	2100      	movs	r1, #0
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bb80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bb82:	480e      	ldr	r0, [pc, #56]	@ (800bbbc <rand+0x74>)
 800bb84:	690b      	ldr	r3, [r1, #16]
 800bb86:	694c      	ldr	r4, [r1, #20]
 800bb88:	4a0d      	ldr	r2, [pc, #52]	@ (800bbc0 <rand+0x78>)
 800bb8a:	4358      	muls	r0, r3
 800bb8c:	fb02 0004 	mla	r0, r2, r4, r0
 800bb90:	fba3 3202 	umull	r3, r2, r3, r2
 800bb94:	3301      	adds	r3, #1
 800bb96:	eb40 0002 	adc.w	r0, r0, r2
 800bb9a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bb9e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bba2:	bd10      	pop	{r4, pc}
 800bba4:	20000090 	.word	0x20000090
 800bba8:	08010d84 	.word	0x08010d84
 800bbac:	08010d9b 	.word	0x08010d9b
 800bbb0:	abcd330e 	.word	0xabcd330e
 800bbb4:	e66d1234 	.word	0xe66d1234
 800bbb8:	0005deec 	.word	0x0005deec
 800bbbc:	5851f42d 	.word	0x5851f42d
 800bbc0:	4c957f2d 	.word	0x4c957f2d

0800bbc4 <__cvt>:
 800bbc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	ec57 6b10 	vmov	r6, r7, d0
 800bbcc:	2f00      	cmp	r7, #0
 800bbce:	460c      	mov	r4, r1
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	463b      	mov	r3, r7
 800bbd4:	bfbb      	ittet	lt
 800bbd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bbda:	461f      	movlt	r7, r3
 800bbdc:	2300      	movge	r3, #0
 800bbde:	232d      	movlt	r3, #45	@ 0x2d
 800bbe0:	700b      	strb	r3, [r1, #0]
 800bbe2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbe4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bbe8:	4691      	mov	r9, r2
 800bbea:	f023 0820 	bic.w	r8, r3, #32
 800bbee:	bfbc      	itt	lt
 800bbf0:	4632      	movlt	r2, r6
 800bbf2:	4616      	movlt	r6, r2
 800bbf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bbf8:	d005      	beq.n	800bc06 <__cvt+0x42>
 800bbfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bbfe:	d100      	bne.n	800bc02 <__cvt+0x3e>
 800bc00:	3401      	adds	r4, #1
 800bc02:	2102      	movs	r1, #2
 800bc04:	e000      	b.n	800bc08 <__cvt+0x44>
 800bc06:	2103      	movs	r1, #3
 800bc08:	ab03      	add	r3, sp, #12
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	ab02      	add	r3, sp, #8
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	ec47 6b10 	vmov	d0, r6, r7
 800bc14:	4653      	mov	r3, sl
 800bc16:	4622      	mov	r2, r4
 800bc18:	f001 f9b2 	bl	800cf80 <_dtoa_r>
 800bc1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bc20:	4605      	mov	r5, r0
 800bc22:	d119      	bne.n	800bc58 <__cvt+0x94>
 800bc24:	f019 0f01 	tst.w	r9, #1
 800bc28:	d00e      	beq.n	800bc48 <__cvt+0x84>
 800bc2a:	eb00 0904 	add.w	r9, r0, r4
 800bc2e:	2200      	movs	r2, #0
 800bc30:	2300      	movs	r3, #0
 800bc32:	4630      	mov	r0, r6
 800bc34:	4639      	mov	r1, r7
 800bc36:	f7f4 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc3a:	b108      	cbz	r0, 800bc40 <__cvt+0x7c>
 800bc3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc40:	2230      	movs	r2, #48	@ 0x30
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	454b      	cmp	r3, r9
 800bc46:	d31e      	bcc.n	800bc86 <__cvt+0xc2>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc4c:	1b5b      	subs	r3, r3, r5
 800bc4e:	4628      	mov	r0, r5
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	b004      	add	sp, #16
 800bc54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc5c:	eb00 0904 	add.w	r9, r0, r4
 800bc60:	d1e5      	bne.n	800bc2e <__cvt+0x6a>
 800bc62:	7803      	ldrb	r3, [r0, #0]
 800bc64:	2b30      	cmp	r3, #48	@ 0x30
 800bc66:	d10a      	bne.n	800bc7e <__cvt+0xba>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	4639      	mov	r1, r7
 800bc70:	f7f4 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc74:	b918      	cbnz	r0, 800bc7e <__cvt+0xba>
 800bc76:	f1c4 0401 	rsb	r4, r4, #1
 800bc7a:	f8ca 4000 	str.w	r4, [sl]
 800bc7e:	f8da 3000 	ldr.w	r3, [sl]
 800bc82:	4499      	add	r9, r3
 800bc84:	e7d3      	b.n	800bc2e <__cvt+0x6a>
 800bc86:	1c59      	adds	r1, r3, #1
 800bc88:	9103      	str	r1, [sp, #12]
 800bc8a:	701a      	strb	r2, [r3, #0]
 800bc8c:	e7d9      	b.n	800bc42 <__cvt+0x7e>

0800bc8e <__exponent>:
 800bc8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc90:	2900      	cmp	r1, #0
 800bc92:	bfba      	itte	lt
 800bc94:	4249      	neglt	r1, r1
 800bc96:	232d      	movlt	r3, #45	@ 0x2d
 800bc98:	232b      	movge	r3, #43	@ 0x2b
 800bc9a:	2909      	cmp	r1, #9
 800bc9c:	7002      	strb	r2, [r0, #0]
 800bc9e:	7043      	strb	r3, [r0, #1]
 800bca0:	dd29      	ble.n	800bcf6 <__exponent+0x68>
 800bca2:	f10d 0307 	add.w	r3, sp, #7
 800bca6:	461d      	mov	r5, r3
 800bca8:	270a      	movs	r7, #10
 800bcaa:	461a      	mov	r2, r3
 800bcac:	fbb1 f6f7 	udiv	r6, r1, r7
 800bcb0:	fb07 1416 	mls	r4, r7, r6, r1
 800bcb4:	3430      	adds	r4, #48	@ 0x30
 800bcb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bcba:	460c      	mov	r4, r1
 800bcbc:	2c63      	cmp	r4, #99	@ 0x63
 800bcbe:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	dcf1      	bgt.n	800bcaa <__exponent+0x1c>
 800bcc6:	3130      	adds	r1, #48	@ 0x30
 800bcc8:	1e94      	subs	r4, r2, #2
 800bcca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bcce:	1c41      	adds	r1, r0, #1
 800bcd0:	4623      	mov	r3, r4
 800bcd2:	42ab      	cmp	r3, r5
 800bcd4:	d30a      	bcc.n	800bcec <__exponent+0x5e>
 800bcd6:	f10d 0309 	add.w	r3, sp, #9
 800bcda:	1a9b      	subs	r3, r3, r2
 800bcdc:	42ac      	cmp	r4, r5
 800bcde:	bf88      	it	hi
 800bce0:	2300      	movhi	r3, #0
 800bce2:	3302      	adds	r3, #2
 800bce4:	4403      	add	r3, r0
 800bce6:	1a18      	subs	r0, r3, r0
 800bce8:	b003      	add	sp, #12
 800bcea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bcf0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bcf4:	e7ed      	b.n	800bcd2 <__exponent+0x44>
 800bcf6:	2330      	movs	r3, #48	@ 0x30
 800bcf8:	3130      	adds	r1, #48	@ 0x30
 800bcfa:	7083      	strb	r3, [r0, #2]
 800bcfc:	70c1      	strb	r1, [r0, #3]
 800bcfe:	1d03      	adds	r3, r0, #4
 800bd00:	e7f1      	b.n	800bce6 <__exponent+0x58>
	...

0800bd04 <_printf_float>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	b08d      	sub	sp, #52	@ 0x34
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bd10:	4616      	mov	r6, r2
 800bd12:	461f      	mov	r7, r3
 800bd14:	4605      	mov	r5, r0
 800bd16:	f000 ffff 	bl	800cd18 <_localeconv_r>
 800bd1a:	6803      	ldr	r3, [r0, #0]
 800bd1c:	9304      	str	r3, [sp, #16]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7f4 faa6 	bl	8000270 <strlen>
 800bd24:	2300      	movs	r3, #0
 800bd26:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd28:	f8d8 3000 	ldr.w	r3, [r8]
 800bd2c:	9005      	str	r0, [sp, #20]
 800bd2e:	3307      	adds	r3, #7
 800bd30:	f023 0307 	bic.w	r3, r3, #7
 800bd34:	f103 0208 	add.w	r2, r3, #8
 800bd38:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bd3c:	f8d4 b000 	ldr.w	fp, [r4]
 800bd40:	f8c8 2000 	str.w	r2, [r8]
 800bd44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bd4c:	9307      	str	r3, [sp, #28]
 800bd4e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bd56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd5a:	4b9c      	ldr	r3, [pc, #624]	@ (800bfcc <_printf_float+0x2c8>)
 800bd5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd60:	f7f4 fee4 	bl	8000b2c <__aeabi_dcmpun>
 800bd64:	bb70      	cbnz	r0, 800bdc4 <_printf_float+0xc0>
 800bd66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd6a:	4b98      	ldr	r3, [pc, #608]	@ (800bfcc <_printf_float+0x2c8>)
 800bd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd70:	f7f4 febe 	bl	8000af0 <__aeabi_dcmple>
 800bd74:	bb30      	cbnz	r0, 800bdc4 <_printf_float+0xc0>
 800bd76:	2200      	movs	r2, #0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	f7f4 fead 	bl	8000adc <__aeabi_dcmplt>
 800bd82:	b110      	cbz	r0, 800bd8a <_printf_float+0x86>
 800bd84:	232d      	movs	r3, #45	@ 0x2d
 800bd86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd8a:	4a91      	ldr	r2, [pc, #580]	@ (800bfd0 <_printf_float+0x2cc>)
 800bd8c:	4b91      	ldr	r3, [pc, #580]	@ (800bfd4 <_printf_float+0x2d0>)
 800bd8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bd92:	bf8c      	ite	hi
 800bd94:	4690      	movhi	r8, r2
 800bd96:	4698      	movls	r8, r3
 800bd98:	2303      	movs	r3, #3
 800bd9a:	6123      	str	r3, [r4, #16]
 800bd9c:	f02b 0304 	bic.w	r3, fp, #4
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	f04f 0900 	mov.w	r9, #0
 800bda6:	9700      	str	r7, [sp, #0]
 800bda8:	4633      	mov	r3, r6
 800bdaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bdac:	4621      	mov	r1, r4
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f000 f9d2 	bl	800c158 <_printf_common>
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	f040 808d 	bne.w	800bed4 <_printf_float+0x1d0>
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	b00d      	add	sp, #52	@ 0x34
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	4642      	mov	r2, r8
 800bdc6:	464b      	mov	r3, r9
 800bdc8:	4640      	mov	r0, r8
 800bdca:	4649      	mov	r1, r9
 800bdcc:	f7f4 feae 	bl	8000b2c <__aeabi_dcmpun>
 800bdd0:	b140      	cbz	r0, 800bde4 <_printf_float+0xe0>
 800bdd2:	464b      	mov	r3, r9
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	bfbc      	itt	lt
 800bdd8:	232d      	movlt	r3, #45	@ 0x2d
 800bdda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bdde:	4a7e      	ldr	r2, [pc, #504]	@ (800bfd8 <_printf_float+0x2d4>)
 800bde0:	4b7e      	ldr	r3, [pc, #504]	@ (800bfdc <_printf_float+0x2d8>)
 800bde2:	e7d4      	b.n	800bd8e <_printf_float+0x8a>
 800bde4:	6863      	ldr	r3, [r4, #4]
 800bde6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bdea:	9206      	str	r2, [sp, #24]
 800bdec:	1c5a      	adds	r2, r3, #1
 800bdee:	d13b      	bne.n	800be68 <_printf_float+0x164>
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	6063      	str	r3, [r4, #4]
 800bdf4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	6022      	str	r2, [r4, #0]
 800bdfc:	9303      	str	r3, [sp, #12]
 800bdfe:	ab0a      	add	r3, sp, #40	@ 0x28
 800be00:	e9cd a301 	strd	sl, r3, [sp, #4]
 800be04:	ab09      	add	r3, sp, #36	@ 0x24
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	6861      	ldr	r1, [r4, #4]
 800be0a:	ec49 8b10 	vmov	d0, r8, r9
 800be0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800be12:	4628      	mov	r0, r5
 800be14:	f7ff fed6 	bl	800bbc4 <__cvt>
 800be18:	9b06      	ldr	r3, [sp, #24]
 800be1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be1c:	2b47      	cmp	r3, #71	@ 0x47
 800be1e:	4680      	mov	r8, r0
 800be20:	d129      	bne.n	800be76 <_printf_float+0x172>
 800be22:	1cc8      	adds	r0, r1, #3
 800be24:	db02      	blt.n	800be2c <_printf_float+0x128>
 800be26:	6863      	ldr	r3, [r4, #4]
 800be28:	4299      	cmp	r1, r3
 800be2a:	dd41      	ble.n	800beb0 <_printf_float+0x1ac>
 800be2c:	f1aa 0a02 	sub.w	sl, sl, #2
 800be30:	fa5f fa8a 	uxtb.w	sl, sl
 800be34:	3901      	subs	r1, #1
 800be36:	4652      	mov	r2, sl
 800be38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800be3c:	9109      	str	r1, [sp, #36]	@ 0x24
 800be3e:	f7ff ff26 	bl	800bc8e <__exponent>
 800be42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be44:	1813      	adds	r3, r2, r0
 800be46:	2a01      	cmp	r2, #1
 800be48:	4681      	mov	r9, r0
 800be4a:	6123      	str	r3, [r4, #16]
 800be4c:	dc02      	bgt.n	800be54 <_printf_float+0x150>
 800be4e:	6822      	ldr	r2, [r4, #0]
 800be50:	07d2      	lsls	r2, r2, #31
 800be52:	d501      	bpl.n	800be58 <_printf_float+0x154>
 800be54:	3301      	adds	r3, #1
 800be56:	6123      	str	r3, [r4, #16]
 800be58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0a2      	beq.n	800bda6 <_printf_float+0xa2>
 800be60:	232d      	movs	r3, #45	@ 0x2d
 800be62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be66:	e79e      	b.n	800bda6 <_printf_float+0xa2>
 800be68:	9a06      	ldr	r2, [sp, #24]
 800be6a:	2a47      	cmp	r2, #71	@ 0x47
 800be6c:	d1c2      	bne.n	800bdf4 <_printf_float+0xf0>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1c0      	bne.n	800bdf4 <_printf_float+0xf0>
 800be72:	2301      	movs	r3, #1
 800be74:	e7bd      	b.n	800bdf2 <_printf_float+0xee>
 800be76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be7a:	d9db      	bls.n	800be34 <_printf_float+0x130>
 800be7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800be80:	d118      	bne.n	800beb4 <_printf_float+0x1b0>
 800be82:	2900      	cmp	r1, #0
 800be84:	6863      	ldr	r3, [r4, #4]
 800be86:	dd0b      	ble.n	800bea0 <_printf_float+0x19c>
 800be88:	6121      	str	r1, [r4, #16]
 800be8a:	b913      	cbnz	r3, 800be92 <_printf_float+0x18e>
 800be8c:	6822      	ldr	r2, [r4, #0]
 800be8e:	07d0      	lsls	r0, r2, #31
 800be90:	d502      	bpl.n	800be98 <_printf_float+0x194>
 800be92:	3301      	adds	r3, #1
 800be94:	440b      	add	r3, r1
 800be96:	6123      	str	r3, [r4, #16]
 800be98:	65a1      	str	r1, [r4, #88]	@ 0x58
 800be9a:	f04f 0900 	mov.w	r9, #0
 800be9e:	e7db      	b.n	800be58 <_printf_float+0x154>
 800bea0:	b913      	cbnz	r3, 800bea8 <_printf_float+0x1a4>
 800bea2:	6822      	ldr	r2, [r4, #0]
 800bea4:	07d2      	lsls	r2, r2, #31
 800bea6:	d501      	bpl.n	800beac <_printf_float+0x1a8>
 800bea8:	3302      	adds	r3, #2
 800beaa:	e7f4      	b.n	800be96 <_printf_float+0x192>
 800beac:	2301      	movs	r3, #1
 800beae:	e7f2      	b.n	800be96 <_printf_float+0x192>
 800beb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800beb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beb6:	4299      	cmp	r1, r3
 800beb8:	db05      	blt.n	800bec6 <_printf_float+0x1c2>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	6121      	str	r1, [r4, #16]
 800bebe:	07d8      	lsls	r0, r3, #31
 800bec0:	d5ea      	bpl.n	800be98 <_printf_float+0x194>
 800bec2:	1c4b      	adds	r3, r1, #1
 800bec4:	e7e7      	b.n	800be96 <_printf_float+0x192>
 800bec6:	2900      	cmp	r1, #0
 800bec8:	bfd4      	ite	le
 800beca:	f1c1 0202 	rsble	r2, r1, #2
 800bece:	2201      	movgt	r2, #1
 800bed0:	4413      	add	r3, r2
 800bed2:	e7e0      	b.n	800be96 <_printf_float+0x192>
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	055a      	lsls	r2, r3, #21
 800bed8:	d407      	bmi.n	800beea <_printf_float+0x1e6>
 800beda:	6923      	ldr	r3, [r4, #16]
 800bedc:	4642      	mov	r2, r8
 800bede:	4631      	mov	r1, r6
 800bee0:	4628      	mov	r0, r5
 800bee2:	47b8      	blx	r7
 800bee4:	3001      	adds	r0, #1
 800bee6:	d12b      	bne.n	800bf40 <_printf_float+0x23c>
 800bee8:	e767      	b.n	800bdba <_printf_float+0xb6>
 800beea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800beee:	f240 80dd 	bls.w	800c0ac <_printf_float+0x3a8>
 800bef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bef6:	2200      	movs	r2, #0
 800bef8:	2300      	movs	r3, #0
 800befa:	f7f4 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d033      	beq.n	800bf6a <_printf_float+0x266>
 800bf02:	4a37      	ldr	r2, [pc, #220]	@ (800bfe0 <_printf_float+0x2dc>)
 800bf04:	2301      	movs	r3, #1
 800bf06:	4631      	mov	r1, r6
 800bf08:	4628      	mov	r0, r5
 800bf0a:	47b8      	blx	r7
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	f43f af54 	beq.w	800bdba <_printf_float+0xb6>
 800bf12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bf16:	4543      	cmp	r3, r8
 800bf18:	db02      	blt.n	800bf20 <_printf_float+0x21c>
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	07d8      	lsls	r0, r3, #31
 800bf1e:	d50f      	bpl.n	800bf40 <_printf_float+0x23c>
 800bf20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf24:	4631      	mov	r1, r6
 800bf26:	4628      	mov	r0, r5
 800bf28:	47b8      	blx	r7
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	f43f af45 	beq.w	800bdba <_printf_float+0xb6>
 800bf30:	f04f 0900 	mov.w	r9, #0
 800bf34:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf38:	f104 0a1a 	add.w	sl, r4, #26
 800bf3c:	45c8      	cmp	r8, r9
 800bf3e:	dc09      	bgt.n	800bf54 <_printf_float+0x250>
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	079b      	lsls	r3, r3, #30
 800bf44:	f100 8103 	bmi.w	800c14e <_printf_float+0x44a>
 800bf48:	68e0      	ldr	r0, [r4, #12]
 800bf4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf4c:	4298      	cmp	r0, r3
 800bf4e:	bfb8      	it	lt
 800bf50:	4618      	movlt	r0, r3
 800bf52:	e734      	b.n	800bdbe <_printf_float+0xba>
 800bf54:	2301      	movs	r3, #1
 800bf56:	4652      	mov	r2, sl
 800bf58:	4631      	mov	r1, r6
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	47b8      	blx	r7
 800bf5e:	3001      	adds	r0, #1
 800bf60:	f43f af2b 	beq.w	800bdba <_printf_float+0xb6>
 800bf64:	f109 0901 	add.w	r9, r9, #1
 800bf68:	e7e8      	b.n	800bf3c <_printf_float+0x238>
 800bf6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dc39      	bgt.n	800bfe4 <_printf_float+0x2e0>
 800bf70:	4a1b      	ldr	r2, [pc, #108]	@ (800bfe0 <_printf_float+0x2dc>)
 800bf72:	2301      	movs	r3, #1
 800bf74:	4631      	mov	r1, r6
 800bf76:	4628      	mov	r0, r5
 800bf78:	47b8      	blx	r7
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	f43f af1d 	beq.w	800bdba <_printf_float+0xb6>
 800bf80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bf84:	ea59 0303 	orrs.w	r3, r9, r3
 800bf88:	d102      	bne.n	800bf90 <_printf_float+0x28c>
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	07d9      	lsls	r1, r3, #31
 800bf8e:	d5d7      	bpl.n	800bf40 <_printf_float+0x23c>
 800bf90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf94:	4631      	mov	r1, r6
 800bf96:	4628      	mov	r0, r5
 800bf98:	47b8      	blx	r7
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	f43f af0d 	beq.w	800bdba <_printf_float+0xb6>
 800bfa0:	f04f 0a00 	mov.w	sl, #0
 800bfa4:	f104 0b1a 	add.w	fp, r4, #26
 800bfa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfaa:	425b      	negs	r3, r3
 800bfac:	4553      	cmp	r3, sl
 800bfae:	dc01      	bgt.n	800bfb4 <_printf_float+0x2b0>
 800bfb0:	464b      	mov	r3, r9
 800bfb2:	e793      	b.n	800bedc <_printf_float+0x1d8>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	465a      	mov	r2, fp
 800bfb8:	4631      	mov	r1, r6
 800bfba:	4628      	mov	r0, r5
 800bfbc:	47b8      	blx	r7
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	f43f aefb 	beq.w	800bdba <_printf_float+0xb6>
 800bfc4:	f10a 0a01 	add.w	sl, sl, #1
 800bfc8:	e7ee      	b.n	800bfa8 <_printf_float+0x2a4>
 800bfca:	bf00      	nop
 800bfcc:	7fefffff 	.word	0x7fefffff
 800bfd0:	08010df7 	.word	0x08010df7
 800bfd4:	08010df3 	.word	0x08010df3
 800bfd8:	08010dff 	.word	0x08010dff
 800bfdc:	08010dfb 	.word	0x08010dfb
 800bfe0:	08010e03 	.word	0x08010e03
 800bfe4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bfe6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bfea:	4553      	cmp	r3, sl
 800bfec:	bfa8      	it	ge
 800bfee:	4653      	movge	r3, sl
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	4699      	mov	r9, r3
 800bff4:	dc36      	bgt.n	800c064 <_printf_float+0x360>
 800bff6:	f04f 0b00 	mov.w	fp, #0
 800bffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bffe:	f104 021a 	add.w	r2, r4, #26
 800c002:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c004:	9306      	str	r3, [sp, #24]
 800c006:	eba3 0309 	sub.w	r3, r3, r9
 800c00a:	455b      	cmp	r3, fp
 800c00c:	dc31      	bgt.n	800c072 <_printf_float+0x36e>
 800c00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c010:	459a      	cmp	sl, r3
 800c012:	dc3a      	bgt.n	800c08a <_printf_float+0x386>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	07da      	lsls	r2, r3, #31
 800c018:	d437      	bmi.n	800c08a <_printf_float+0x386>
 800c01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c01c:	ebaa 0903 	sub.w	r9, sl, r3
 800c020:	9b06      	ldr	r3, [sp, #24]
 800c022:	ebaa 0303 	sub.w	r3, sl, r3
 800c026:	4599      	cmp	r9, r3
 800c028:	bfa8      	it	ge
 800c02a:	4699      	movge	r9, r3
 800c02c:	f1b9 0f00 	cmp.w	r9, #0
 800c030:	dc33      	bgt.n	800c09a <_printf_float+0x396>
 800c032:	f04f 0800 	mov.w	r8, #0
 800c036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c03a:	f104 0b1a 	add.w	fp, r4, #26
 800c03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c040:	ebaa 0303 	sub.w	r3, sl, r3
 800c044:	eba3 0309 	sub.w	r3, r3, r9
 800c048:	4543      	cmp	r3, r8
 800c04a:	f77f af79 	ble.w	800bf40 <_printf_float+0x23c>
 800c04e:	2301      	movs	r3, #1
 800c050:	465a      	mov	r2, fp
 800c052:	4631      	mov	r1, r6
 800c054:	4628      	mov	r0, r5
 800c056:	47b8      	blx	r7
 800c058:	3001      	adds	r0, #1
 800c05a:	f43f aeae 	beq.w	800bdba <_printf_float+0xb6>
 800c05e:	f108 0801 	add.w	r8, r8, #1
 800c062:	e7ec      	b.n	800c03e <_printf_float+0x33a>
 800c064:	4642      	mov	r2, r8
 800c066:	4631      	mov	r1, r6
 800c068:	4628      	mov	r0, r5
 800c06a:	47b8      	blx	r7
 800c06c:	3001      	adds	r0, #1
 800c06e:	d1c2      	bne.n	800bff6 <_printf_float+0x2f2>
 800c070:	e6a3      	b.n	800bdba <_printf_float+0xb6>
 800c072:	2301      	movs	r3, #1
 800c074:	4631      	mov	r1, r6
 800c076:	4628      	mov	r0, r5
 800c078:	9206      	str	r2, [sp, #24]
 800c07a:	47b8      	blx	r7
 800c07c:	3001      	adds	r0, #1
 800c07e:	f43f ae9c 	beq.w	800bdba <_printf_float+0xb6>
 800c082:	9a06      	ldr	r2, [sp, #24]
 800c084:	f10b 0b01 	add.w	fp, fp, #1
 800c088:	e7bb      	b.n	800c002 <_printf_float+0x2fe>
 800c08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c08e:	4631      	mov	r1, r6
 800c090:	4628      	mov	r0, r5
 800c092:	47b8      	blx	r7
 800c094:	3001      	adds	r0, #1
 800c096:	d1c0      	bne.n	800c01a <_printf_float+0x316>
 800c098:	e68f      	b.n	800bdba <_printf_float+0xb6>
 800c09a:	9a06      	ldr	r2, [sp, #24]
 800c09c:	464b      	mov	r3, r9
 800c09e:	4442      	add	r2, r8
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d1c3      	bne.n	800c032 <_printf_float+0x32e>
 800c0aa:	e686      	b.n	800bdba <_printf_float+0xb6>
 800c0ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c0b0:	f1ba 0f01 	cmp.w	sl, #1
 800c0b4:	dc01      	bgt.n	800c0ba <_printf_float+0x3b6>
 800c0b6:	07db      	lsls	r3, r3, #31
 800c0b8:	d536      	bpl.n	800c128 <_printf_float+0x424>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	4642      	mov	r2, r8
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	47b8      	blx	r7
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	f43f ae78 	beq.w	800bdba <_printf_float+0xb6>
 800c0ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	47b8      	blx	r7
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	f43f ae70 	beq.w	800bdba <_printf_float+0xb6>
 800c0da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0e6:	f7f4 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ea:	b9c0      	cbnz	r0, 800c11e <_printf_float+0x41a>
 800c0ec:	4653      	mov	r3, sl
 800c0ee:	f108 0201 	add.w	r2, r8, #1
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	47b8      	blx	r7
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d10c      	bne.n	800c116 <_printf_float+0x412>
 800c0fc:	e65d      	b.n	800bdba <_printf_float+0xb6>
 800c0fe:	2301      	movs	r3, #1
 800c100:	465a      	mov	r2, fp
 800c102:	4631      	mov	r1, r6
 800c104:	4628      	mov	r0, r5
 800c106:	47b8      	blx	r7
 800c108:	3001      	adds	r0, #1
 800c10a:	f43f ae56 	beq.w	800bdba <_printf_float+0xb6>
 800c10e:	f108 0801 	add.w	r8, r8, #1
 800c112:	45d0      	cmp	r8, sl
 800c114:	dbf3      	blt.n	800c0fe <_printf_float+0x3fa>
 800c116:	464b      	mov	r3, r9
 800c118:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c11c:	e6df      	b.n	800bede <_printf_float+0x1da>
 800c11e:	f04f 0800 	mov.w	r8, #0
 800c122:	f104 0b1a 	add.w	fp, r4, #26
 800c126:	e7f4      	b.n	800c112 <_printf_float+0x40e>
 800c128:	2301      	movs	r3, #1
 800c12a:	4642      	mov	r2, r8
 800c12c:	e7e1      	b.n	800c0f2 <_printf_float+0x3ee>
 800c12e:	2301      	movs	r3, #1
 800c130:	464a      	mov	r2, r9
 800c132:	4631      	mov	r1, r6
 800c134:	4628      	mov	r0, r5
 800c136:	47b8      	blx	r7
 800c138:	3001      	adds	r0, #1
 800c13a:	f43f ae3e 	beq.w	800bdba <_printf_float+0xb6>
 800c13e:	f108 0801 	add.w	r8, r8, #1
 800c142:	68e3      	ldr	r3, [r4, #12]
 800c144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c146:	1a5b      	subs	r3, r3, r1
 800c148:	4543      	cmp	r3, r8
 800c14a:	dcf0      	bgt.n	800c12e <_printf_float+0x42a>
 800c14c:	e6fc      	b.n	800bf48 <_printf_float+0x244>
 800c14e:	f04f 0800 	mov.w	r8, #0
 800c152:	f104 0919 	add.w	r9, r4, #25
 800c156:	e7f4      	b.n	800c142 <_printf_float+0x43e>

0800c158 <_printf_common>:
 800c158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c15c:	4616      	mov	r6, r2
 800c15e:	4698      	mov	r8, r3
 800c160:	688a      	ldr	r2, [r1, #8]
 800c162:	690b      	ldr	r3, [r1, #16]
 800c164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c168:	4293      	cmp	r3, r2
 800c16a:	bfb8      	it	lt
 800c16c:	4613      	movlt	r3, r2
 800c16e:	6033      	str	r3, [r6, #0]
 800c170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c174:	4607      	mov	r7, r0
 800c176:	460c      	mov	r4, r1
 800c178:	b10a      	cbz	r2, 800c17e <_printf_common+0x26>
 800c17a:	3301      	adds	r3, #1
 800c17c:	6033      	str	r3, [r6, #0]
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	0699      	lsls	r1, r3, #26
 800c182:	bf42      	ittt	mi
 800c184:	6833      	ldrmi	r3, [r6, #0]
 800c186:	3302      	addmi	r3, #2
 800c188:	6033      	strmi	r3, [r6, #0]
 800c18a:	6825      	ldr	r5, [r4, #0]
 800c18c:	f015 0506 	ands.w	r5, r5, #6
 800c190:	d106      	bne.n	800c1a0 <_printf_common+0x48>
 800c192:	f104 0a19 	add.w	sl, r4, #25
 800c196:	68e3      	ldr	r3, [r4, #12]
 800c198:	6832      	ldr	r2, [r6, #0]
 800c19a:	1a9b      	subs	r3, r3, r2
 800c19c:	42ab      	cmp	r3, r5
 800c19e:	dc26      	bgt.n	800c1ee <_printf_common+0x96>
 800c1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c1a4:	6822      	ldr	r2, [r4, #0]
 800c1a6:	3b00      	subs	r3, #0
 800c1a8:	bf18      	it	ne
 800c1aa:	2301      	movne	r3, #1
 800c1ac:	0692      	lsls	r2, r2, #26
 800c1ae:	d42b      	bmi.n	800c208 <_printf_common+0xb0>
 800c1b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c1b4:	4641      	mov	r1, r8
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	47c8      	blx	r9
 800c1ba:	3001      	adds	r0, #1
 800c1bc:	d01e      	beq.n	800c1fc <_printf_common+0xa4>
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	6922      	ldr	r2, [r4, #16]
 800c1c2:	f003 0306 	and.w	r3, r3, #6
 800c1c6:	2b04      	cmp	r3, #4
 800c1c8:	bf02      	ittt	eq
 800c1ca:	68e5      	ldreq	r5, [r4, #12]
 800c1cc:	6833      	ldreq	r3, [r6, #0]
 800c1ce:	1aed      	subeq	r5, r5, r3
 800c1d0:	68a3      	ldr	r3, [r4, #8]
 800c1d2:	bf0c      	ite	eq
 800c1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1d8:	2500      	movne	r5, #0
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	bfc4      	itt	gt
 800c1de:	1a9b      	subgt	r3, r3, r2
 800c1e0:	18ed      	addgt	r5, r5, r3
 800c1e2:	2600      	movs	r6, #0
 800c1e4:	341a      	adds	r4, #26
 800c1e6:	42b5      	cmp	r5, r6
 800c1e8:	d11a      	bne.n	800c220 <_printf_common+0xc8>
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	e008      	b.n	800c200 <_printf_common+0xa8>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4652      	mov	r2, sl
 800c1f2:	4641      	mov	r1, r8
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	47c8      	blx	r9
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	d103      	bne.n	800c204 <_printf_common+0xac>
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c204:	3501      	adds	r5, #1
 800c206:	e7c6      	b.n	800c196 <_printf_common+0x3e>
 800c208:	18e1      	adds	r1, r4, r3
 800c20a:	1c5a      	adds	r2, r3, #1
 800c20c:	2030      	movs	r0, #48	@ 0x30
 800c20e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c212:	4422      	add	r2, r4
 800c214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c21c:	3302      	adds	r3, #2
 800c21e:	e7c7      	b.n	800c1b0 <_printf_common+0x58>
 800c220:	2301      	movs	r3, #1
 800c222:	4622      	mov	r2, r4
 800c224:	4641      	mov	r1, r8
 800c226:	4638      	mov	r0, r7
 800c228:	47c8      	blx	r9
 800c22a:	3001      	adds	r0, #1
 800c22c:	d0e6      	beq.n	800c1fc <_printf_common+0xa4>
 800c22e:	3601      	adds	r6, #1
 800c230:	e7d9      	b.n	800c1e6 <_printf_common+0x8e>
	...

0800c234 <_printf_i>:
 800c234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c238:	7e0f      	ldrb	r7, [r1, #24]
 800c23a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c23c:	2f78      	cmp	r7, #120	@ 0x78
 800c23e:	4691      	mov	r9, r2
 800c240:	4680      	mov	r8, r0
 800c242:	460c      	mov	r4, r1
 800c244:	469a      	mov	sl, r3
 800c246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c24a:	d807      	bhi.n	800c25c <_printf_i+0x28>
 800c24c:	2f62      	cmp	r7, #98	@ 0x62
 800c24e:	d80a      	bhi.n	800c266 <_printf_i+0x32>
 800c250:	2f00      	cmp	r7, #0
 800c252:	f000 80d1 	beq.w	800c3f8 <_printf_i+0x1c4>
 800c256:	2f58      	cmp	r7, #88	@ 0x58
 800c258:	f000 80b8 	beq.w	800c3cc <_printf_i+0x198>
 800c25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c264:	e03a      	b.n	800c2dc <_printf_i+0xa8>
 800c266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c26a:	2b15      	cmp	r3, #21
 800c26c:	d8f6      	bhi.n	800c25c <_printf_i+0x28>
 800c26e:	a101      	add	r1, pc, #4	@ (adr r1, 800c274 <_printf_i+0x40>)
 800c270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c274:	0800c2cd 	.word	0x0800c2cd
 800c278:	0800c2e1 	.word	0x0800c2e1
 800c27c:	0800c25d 	.word	0x0800c25d
 800c280:	0800c25d 	.word	0x0800c25d
 800c284:	0800c25d 	.word	0x0800c25d
 800c288:	0800c25d 	.word	0x0800c25d
 800c28c:	0800c2e1 	.word	0x0800c2e1
 800c290:	0800c25d 	.word	0x0800c25d
 800c294:	0800c25d 	.word	0x0800c25d
 800c298:	0800c25d 	.word	0x0800c25d
 800c29c:	0800c25d 	.word	0x0800c25d
 800c2a0:	0800c3df 	.word	0x0800c3df
 800c2a4:	0800c30b 	.word	0x0800c30b
 800c2a8:	0800c399 	.word	0x0800c399
 800c2ac:	0800c25d 	.word	0x0800c25d
 800c2b0:	0800c25d 	.word	0x0800c25d
 800c2b4:	0800c401 	.word	0x0800c401
 800c2b8:	0800c25d 	.word	0x0800c25d
 800c2bc:	0800c30b 	.word	0x0800c30b
 800c2c0:	0800c25d 	.word	0x0800c25d
 800c2c4:	0800c25d 	.word	0x0800c25d
 800c2c8:	0800c3a1 	.word	0x0800c3a1
 800c2cc:	6833      	ldr	r3, [r6, #0]
 800c2ce:	1d1a      	adds	r2, r3, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6032      	str	r2, [r6, #0]
 800c2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e09c      	b.n	800c41a <_printf_i+0x1e6>
 800c2e0:	6833      	ldr	r3, [r6, #0]
 800c2e2:	6820      	ldr	r0, [r4, #0]
 800c2e4:	1d19      	adds	r1, r3, #4
 800c2e6:	6031      	str	r1, [r6, #0]
 800c2e8:	0606      	lsls	r6, r0, #24
 800c2ea:	d501      	bpl.n	800c2f0 <_printf_i+0xbc>
 800c2ec:	681d      	ldr	r5, [r3, #0]
 800c2ee:	e003      	b.n	800c2f8 <_printf_i+0xc4>
 800c2f0:	0645      	lsls	r5, r0, #25
 800c2f2:	d5fb      	bpl.n	800c2ec <_printf_i+0xb8>
 800c2f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	da03      	bge.n	800c304 <_printf_i+0xd0>
 800c2fc:	232d      	movs	r3, #45	@ 0x2d
 800c2fe:	426d      	negs	r5, r5
 800c300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c304:	4858      	ldr	r0, [pc, #352]	@ (800c468 <_printf_i+0x234>)
 800c306:	230a      	movs	r3, #10
 800c308:	e011      	b.n	800c32e <_printf_i+0xfa>
 800c30a:	6821      	ldr	r1, [r4, #0]
 800c30c:	6833      	ldr	r3, [r6, #0]
 800c30e:	0608      	lsls	r0, r1, #24
 800c310:	f853 5b04 	ldr.w	r5, [r3], #4
 800c314:	d402      	bmi.n	800c31c <_printf_i+0xe8>
 800c316:	0649      	lsls	r1, r1, #25
 800c318:	bf48      	it	mi
 800c31a:	b2ad      	uxthmi	r5, r5
 800c31c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c31e:	4852      	ldr	r0, [pc, #328]	@ (800c468 <_printf_i+0x234>)
 800c320:	6033      	str	r3, [r6, #0]
 800c322:	bf14      	ite	ne
 800c324:	230a      	movne	r3, #10
 800c326:	2308      	moveq	r3, #8
 800c328:	2100      	movs	r1, #0
 800c32a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c32e:	6866      	ldr	r6, [r4, #4]
 800c330:	60a6      	str	r6, [r4, #8]
 800c332:	2e00      	cmp	r6, #0
 800c334:	db05      	blt.n	800c342 <_printf_i+0x10e>
 800c336:	6821      	ldr	r1, [r4, #0]
 800c338:	432e      	orrs	r6, r5
 800c33a:	f021 0104 	bic.w	r1, r1, #4
 800c33e:	6021      	str	r1, [r4, #0]
 800c340:	d04b      	beq.n	800c3da <_printf_i+0x1a6>
 800c342:	4616      	mov	r6, r2
 800c344:	fbb5 f1f3 	udiv	r1, r5, r3
 800c348:	fb03 5711 	mls	r7, r3, r1, r5
 800c34c:	5dc7      	ldrb	r7, [r0, r7]
 800c34e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c352:	462f      	mov	r7, r5
 800c354:	42bb      	cmp	r3, r7
 800c356:	460d      	mov	r5, r1
 800c358:	d9f4      	bls.n	800c344 <_printf_i+0x110>
 800c35a:	2b08      	cmp	r3, #8
 800c35c:	d10b      	bne.n	800c376 <_printf_i+0x142>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	07df      	lsls	r7, r3, #31
 800c362:	d508      	bpl.n	800c376 <_printf_i+0x142>
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	6861      	ldr	r1, [r4, #4]
 800c368:	4299      	cmp	r1, r3
 800c36a:	bfde      	ittt	le
 800c36c:	2330      	movle	r3, #48	@ 0x30
 800c36e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c372:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c376:	1b92      	subs	r2, r2, r6
 800c378:	6122      	str	r2, [r4, #16]
 800c37a:	f8cd a000 	str.w	sl, [sp]
 800c37e:	464b      	mov	r3, r9
 800c380:	aa03      	add	r2, sp, #12
 800c382:	4621      	mov	r1, r4
 800c384:	4640      	mov	r0, r8
 800c386:	f7ff fee7 	bl	800c158 <_printf_common>
 800c38a:	3001      	adds	r0, #1
 800c38c:	d14a      	bne.n	800c424 <_printf_i+0x1f0>
 800c38e:	f04f 30ff 	mov.w	r0, #4294967295
 800c392:	b004      	add	sp, #16
 800c394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	f043 0320 	orr.w	r3, r3, #32
 800c39e:	6023      	str	r3, [r4, #0]
 800c3a0:	4832      	ldr	r0, [pc, #200]	@ (800c46c <_printf_i+0x238>)
 800c3a2:	2778      	movs	r7, #120	@ 0x78
 800c3a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	6831      	ldr	r1, [r6, #0]
 800c3ac:	061f      	lsls	r7, r3, #24
 800c3ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800c3b2:	d402      	bmi.n	800c3ba <_printf_i+0x186>
 800c3b4:	065f      	lsls	r7, r3, #25
 800c3b6:	bf48      	it	mi
 800c3b8:	b2ad      	uxthmi	r5, r5
 800c3ba:	6031      	str	r1, [r6, #0]
 800c3bc:	07d9      	lsls	r1, r3, #31
 800c3be:	bf44      	itt	mi
 800c3c0:	f043 0320 	orrmi.w	r3, r3, #32
 800c3c4:	6023      	strmi	r3, [r4, #0]
 800c3c6:	b11d      	cbz	r5, 800c3d0 <_printf_i+0x19c>
 800c3c8:	2310      	movs	r3, #16
 800c3ca:	e7ad      	b.n	800c328 <_printf_i+0xf4>
 800c3cc:	4826      	ldr	r0, [pc, #152]	@ (800c468 <_printf_i+0x234>)
 800c3ce:	e7e9      	b.n	800c3a4 <_printf_i+0x170>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	f023 0320 	bic.w	r3, r3, #32
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	e7f6      	b.n	800c3c8 <_printf_i+0x194>
 800c3da:	4616      	mov	r6, r2
 800c3dc:	e7bd      	b.n	800c35a <_printf_i+0x126>
 800c3de:	6833      	ldr	r3, [r6, #0]
 800c3e0:	6825      	ldr	r5, [r4, #0]
 800c3e2:	6961      	ldr	r1, [r4, #20]
 800c3e4:	1d18      	adds	r0, r3, #4
 800c3e6:	6030      	str	r0, [r6, #0]
 800c3e8:	062e      	lsls	r6, r5, #24
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	d501      	bpl.n	800c3f2 <_printf_i+0x1be>
 800c3ee:	6019      	str	r1, [r3, #0]
 800c3f0:	e002      	b.n	800c3f8 <_printf_i+0x1c4>
 800c3f2:	0668      	lsls	r0, r5, #25
 800c3f4:	d5fb      	bpl.n	800c3ee <_printf_i+0x1ba>
 800c3f6:	8019      	strh	r1, [r3, #0]
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	4616      	mov	r6, r2
 800c3fe:	e7bc      	b.n	800c37a <_printf_i+0x146>
 800c400:	6833      	ldr	r3, [r6, #0]
 800c402:	1d1a      	adds	r2, r3, #4
 800c404:	6032      	str	r2, [r6, #0]
 800c406:	681e      	ldr	r6, [r3, #0]
 800c408:	6862      	ldr	r2, [r4, #4]
 800c40a:	2100      	movs	r1, #0
 800c40c:	4630      	mov	r0, r6
 800c40e:	f7f3 fedf 	bl	80001d0 <memchr>
 800c412:	b108      	cbz	r0, 800c418 <_printf_i+0x1e4>
 800c414:	1b80      	subs	r0, r0, r6
 800c416:	6060      	str	r0, [r4, #4]
 800c418:	6863      	ldr	r3, [r4, #4]
 800c41a:	6123      	str	r3, [r4, #16]
 800c41c:	2300      	movs	r3, #0
 800c41e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c422:	e7aa      	b.n	800c37a <_printf_i+0x146>
 800c424:	6923      	ldr	r3, [r4, #16]
 800c426:	4632      	mov	r2, r6
 800c428:	4649      	mov	r1, r9
 800c42a:	4640      	mov	r0, r8
 800c42c:	47d0      	blx	sl
 800c42e:	3001      	adds	r0, #1
 800c430:	d0ad      	beq.n	800c38e <_printf_i+0x15a>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	079b      	lsls	r3, r3, #30
 800c436:	d413      	bmi.n	800c460 <_printf_i+0x22c>
 800c438:	68e0      	ldr	r0, [r4, #12]
 800c43a:	9b03      	ldr	r3, [sp, #12]
 800c43c:	4298      	cmp	r0, r3
 800c43e:	bfb8      	it	lt
 800c440:	4618      	movlt	r0, r3
 800c442:	e7a6      	b.n	800c392 <_printf_i+0x15e>
 800c444:	2301      	movs	r3, #1
 800c446:	4632      	mov	r2, r6
 800c448:	4649      	mov	r1, r9
 800c44a:	4640      	mov	r0, r8
 800c44c:	47d0      	blx	sl
 800c44e:	3001      	adds	r0, #1
 800c450:	d09d      	beq.n	800c38e <_printf_i+0x15a>
 800c452:	3501      	adds	r5, #1
 800c454:	68e3      	ldr	r3, [r4, #12]
 800c456:	9903      	ldr	r1, [sp, #12]
 800c458:	1a5b      	subs	r3, r3, r1
 800c45a:	42ab      	cmp	r3, r5
 800c45c:	dcf2      	bgt.n	800c444 <_printf_i+0x210>
 800c45e:	e7eb      	b.n	800c438 <_printf_i+0x204>
 800c460:	2500      	movs	r5, #0
 800c462:	f104 0619 	add.w	r6, r4, #25
 800c466:	e7f5      	b.n	800c454 <_printf_i+0x220>
 800c468:	08010e05 	.word	0x08010e05
 800c46c:	08010e16 	.word	0x08010e16

0800c470 <_scanf_float>:
 800c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	b087      	sub	sp, #28
 800c476:	4691      	mov	r9, r2
 800c478:	9303      	str	r3, [sp, #12]
 800c47a:	688b      	ldr	r3, [r1, #8]
 800c47c:	1e5a      	subs	r2, r3, #1
 800c47e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c482:	bf81      	itttt	hi
 800c484:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c488:	eb03 0b05 	addhi.w	fp, r3, r5
 800c48c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c490:	608b      	strhi	r3, [r1, #8]
 800c492:	680b      	ldr	r3, [r1, #0]
 800c494:	460a      	mov	r2, r1
 800c496:	f04f 0500 	mov.w	r5, #0
 800c49a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c49e:	f842 3b1c 	str.w	r3, [r2], #28
 800c4a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	460c      	mov	r4, r1
 800c4aa:	bf98      	it	ls
 800c4ac:	f04f 0b00 	movls.w	fp, #0
 800c4b0:	9201      	str	r2, [sp, #4]
 800c4b2:	4616      	mov	r6, r2
 800c4b4:	46aa      	mov	sl, r5
 800c4b6:	462f      	mov	r7, r5
 800c4b8:	9502      	str	r5, [sp, #8]
 800c4ba:	68a2      	ldr	r2, [r4, #8]
 800c4bc:	b15a      	cbz	r2, 800c4d6 <_scanf_float+0x66>
 800c4be:	f8d9 3000 	ldr.w	r3, [r9]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	2b4e      	cmp	r3, #78	@ 0x4e
 800c4c6:	d863      	bhi.n	800c590 <_scanf_float+0x120>
 800c4c8:	2b40      	cmp	r3, #64	@ 0x40
 800c4ca:	d83b      	bhi.n	800c544 <_scanf_float+0xd4>
 800c4cc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c4d0:	b2c8      	uxtb	r0, r1
 800c4d2:	280e      	cmp	r0, #14
 800c4d4:	d939      	bls.n	800c54a <_scanf_float+0xda>
 800c4d6:	b11f      	cbz	r7, 800c4e0 <_scanf_float+0x70>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4de:	6023      	str	r3, [r4, #0]
 800c4e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4e4:	f1ba 0f01 	cmp.w	sl, #1
 800c4e8:	f200 8114 	bhi.w	800c714 <_scanf_float+0x2a4>
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	429e      	cmp	r6, r3
 800c4f0:	f200 8105 	bhi.w	800c6fe <_scanf_float+0x28e>
 800c4f4:	2001      	movs	r0, #1
 800c4f6:	b007      	add	sp, #28
 800c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c500:	2a0d      	cmp	r2, #13
 800c502:	d8e8      	bhi.n	800c4d6 <_scanf_float+0x66>
 800c504:	a101      	add	r1, pc, #4	@ (adr r1, 800c50c <_scanf_float+0x9c>)
 800c506:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c655 	.word	0x0800c655
 800c510:	0800c4d7 	.word	0x0800c4d7
 800c514:	0800c4d7 	.word	0x0800c4d7
 800c518:	0800c4d7 	.word	0x0800c4d7
 800c51c:	0800c6b1 	.word	0x0800c6b1
 800c520:	0800c68b 	.word	0x0800c68b
 800c524:	0800c4d7 	.word	0x0800c4d7
 800c528:	0800c4d7 	.word	0x0800c4d7
 800c52c:	0800c663 	.word	0x0800c663
 800c530:	0800c4d7 	.word	0x0800c4d7
 800c534:	0800c4d7 	.word	0x0800c4d7
 800c538:	0800c4d7 	.word	0x0800c4d7
 800c53c:	0800c4d7 	.word	0x0800c4d7
 800c540:	0800c61f 	.word	0x0800c61f
 800c544:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c548:	e7da      	b.n	800c500 <_scanf_float+0x90>
 800c54a:	290e      	cmp	r1, #14
 800c54c:	d8c3      	bhi.n	800c4d6 <_scanf_float+0x66>
 800c54e:	a001      	add	r0, pc, #4	@ (adr r0, 800c554 <_scanf_float+0xe4>)
 800c550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c554:	0800c60f 	.word	0x0800c60f
 800c558:	0800c4d7 	.word	0x0800c4d7
 800c55c:	0800c60f 	.word	0x0800c60f
 800c560:	0800c69f 	.word	0x0800c69f
 800c564:	0800c4d7 	.word	0x0800c4d7
 800c568:	0800c5b1 	.word	0x0800c5b1
 800c56c:	0800c5f5 	.word	0x0800c5f5
 800c570:	0800c5f5 	.word	0x0800c5f5
 800c574:	0800c5f5 	.word	0x0800c5f5
 800c578:	0800c5f5 	.word	0x0800c5f5
 800c57c:	0800c5f5 	.word	0x0800c5f5
 800c580:	0800c5f5 	.word	0x0800c5f5
 800c584:	0800c5f5 	.word	0x0800c5f5
 800c588:	0800c5f5 	.word	0x0800c5f5
 800c58c:	0800c5f5 	.word	0x0800c5f5
 800c590:	2b6e      	cmp	r3, #110	@ 0x6e
 800c592:	d809      	bhi.n	800c5a8 <_scanf_float+0x138>
 800c594:	2b60      	cmp	r3, #96	@ 0x60
 800c596:	d8b1      	bhi.n	800c4fc <_scanf_float+0x8c>
 800c598:	2b54      	cmp	r3, #84	@ 0x54
 800c59a:	d07b      	beq.n	800c694 <_scanf_float+0x224>
 800c59c:	2b59      	cmp	r3, #89	@ 0x59
 800c59e:	d19a      	bne.n	800c4d6 <_scanf_float+0x66>
 800c5a0:	2d07      	cmp	r5, #7
 800c5a2:	d198      	bne.n	800c4d6 <_scanf_float+0x66>
 800c5a4:	2508      	movs	r5, #8
 800c5a6:	e02f      	b.n	800c608 <_scanf_float+0x198>
 800c5a8:	2b74      	cmp	r3, #116	@ 0x74
 800c5aa:	d073      	beq.n	800c694 <_scanf_float+0x224>
 800c5ac:	2b79      	cmp	r3, #121	@ 0x79
 800c5ae:	e7f6      	b.n	800c59e <_scanf_float+0x12e>
 800c5b0:	6821      	ldr	r1, [r4, #0]
 800c5b2:	05c8      	lsls	r0, r1, #23
 800c5b4:	d51e      	bpl.n	800c5f4 <_scanf_float+0x184>
 800c5b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c5ba:	6021      	str	r1, [r4, #0]
 800c5bc:	3701      	adds	r7, #1
 800c5be:	f1bb 0f00 	cmp.w	fp, #0
 800c5c2:	d003      	beq.n	800c5cc <_scanf_float+0x15c>
 800c5c4:	3201      	adds	r2, #1
 800c5c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c5ca:	60a2      	str	r2, [r4, #8]
 800c5cc:	68a3      	ldr	r3, [r4, #8]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	60a3      	str	r3, [r4, #8]
 800c5d2:	6923      	ldr	r3, [r4, #16]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	6123      	str	r3, [r4, #16]
 800c5d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f8c9 3004 	str.w	r3, [r9, #4]
 800c5e4:	f340 8082 	ble.w	800c6ec <_scanf_float+0x27c>
 800c5e8:	f8d9 3000 	ldr.w	r3, [r9]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	f8c9 3000 	str.w	r3, [r9]
 800c5f2:	e762      	b.n	800c4ba <_scanf_float+0x4a>
 800c5f4:	eb1a 0105 	adds.w	r1, sl, r5
 800c5f8:	f47f af6d 	bne.w	800c4d6 <_scanf_float+0x66>
 800c5fc:	6822      	ldr	r2, [r4, #0]
 800c5fe:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c602:	6022      	str	r2, [r4, #0]
 800c604:	460d      	mov	r5, r1
 800c606:	468a      	mov	sl, r1
 800c608:	f806 3b01 	strb.w	r3, [r6], #1
 800c60c:	e7de      	b.n	800c5cc <_scanf_float+0x15c>
 800c60e:	6822      	ldr	r2, [r4, #0]
 800c610:	0610      	lsls	r0, r2, #24
 800c612:	f57f af60 	bpl.w	800c4d6 <_scanf_float+0x66>
 800c616:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c61a:	6022      	str	r2, [r4, #0]
 800c61c:	e7f4      	b.n	800c608 <_scanf_float+0x198>
 800c61e:	f1ba 0f00 	cmp.w	sl, #0
 800c622:	d10c      	bne.n	800c63e <_scanf_float+0x1ce>
 800c624:	b977      	cbnz	r7, 800c644 <_scanf_float+0x1d4>
 800c626:	6822      	ldr	r2, [r4, #0]
 800c628:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c62c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c630:	d108      	bne.n	800c644 <_scanf_float+0x1d4>
 800c632:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c636:	6022      	str	r2, [r4, #0]
 800c638:	f04f 0a01 	mov.w	sl, #1
 800c63c:	e7e4      	b.n	800c608 <_scanf_float+0x198>
 800c63e:	f1ba 0f02 	cmp.w	sl, #2
 800c642:	d050      	beq.n	800c6e6 <_scanf_float+0x276>
 800c644:	2d01      	cmp	r5, #1
 800c646:	d002      	beq.n	800c64e <_scanf_float+0x1de>
 800c648:	2d04      	cmp	r5, #4
 800c64a:	f47f af44 	bne.w	800c4d6 <_scanf_float+0x66>
 800c64e:	3501      	adds	r5, #1
 800c650:	b2ed      	uxtb	r5, r5
 800c652:	e7d9      	b.n	800c608 <_scanf_float+0x198>
 800c654:	f1ba 0f01 	cmp.w	sl, #1
 800c658:	f47f af3d 	bne.w	800c4d6 <_scanf_float+0x66>
 800c65c:	f04f 0a02 	mov.w	sl, #2
 800c660:	e7d2      	b.n	800c608 <_scanf_float+0x198>
 800c662:	b975      	cbnz	r5, 800c682 <_scanf_float+0x212>
 800c664:	2f00      	cmp	r7, #0
 800c666:	f47f af37 	bne.w	800c4d8 <_scanf_float+0x68>
 800c66a:	6822      	ldr	r2, [r4, #0]
 800c66c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c670:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c674:	f040 8103 	bne.w	800c87e <_scanf_float+0x40e>
 800c678:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c67c:	6022      	str	r2, [r4, #0]
 800c67e:	2501      	movs	r5, #1
 800c680:	e7c2      	b.n	800c608 <_scanf_float+0x198>
 800c682:	2d03      	cmp	r5, #3
 800c684:	d0e3      	beq.n	800c64e <_scanf_float+0x1de>
 800c686:	2d05      	cmp	r5, #5
 800c688:	e7df      	b.n	800c64a <_scanf_float+0x1da>
 800c68a:	2d02      	cmp	r5, #2
 800c68c:	f47f af23 	bne.w	800c4d6 <_scanf_float+0x66>
 800c690:	2503      	movs	r5, #3
 800c692:	e7b9      	b.n	800c608 <_scanf_float+0x198>
 800c694:	2d06      	cmp	r5, #6
 800c696:	f47f af1e 	bne.w	800c4d6 <_scanf_float+0x66>
 800c69a:	2507      	movs	r5, #7
 800c69c:	e7b4      	b.n	800c608 <_scanf_float+0x198>
 800c69e:	6822      	ldr	r2, [r4, #0]
 800c6a0:	0591      	lsls	r1, r2, #22
 800c6a2:	f57f af18 	bpl.w	800c4d6 <_scanf_float+0x66>
 800c6a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c6aa:	6022      	str	r2, [r4, #0]
 800c6ac:	9702      	str	r7, [sp, #8]
 800c6ae:	e7ab      	b.n	800c608 <_scanf_float+0x198>
 800c6b0:	6822      	ldr	r2, [r4, #0]
 800c6b2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c6b6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c6ba:	d005      	beq.n	800c6c8 <_scanf_float+0x258>
 800c6bc:	0550      	lsls	r0, r2, #21
 800c6be:	f57f af0a 	bpl.w	800c4d6 <_scanf_float+0x66>
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	f000 80db 	beq.w	800c87e <_scanf_float+0x40e>
 800c6c8:	0591      	lsls	r1, r2, #22
 800c6ca:	bf58      	it	pl
 800c6cc:	9902      	ldrpl	r1, [sp, #8]
 800c6ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c6d2:	bf58      	it	pl
 800c6d4:	1a79      	subpl	r1, r7, r1
 800c6d6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c6da:	bf58      	it	pl
 800c6dc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c6e0:	6022      	str	r2, [r4, #0]
 800c6e2:	2700      	movs	r7, #0
 800c6e4:	e790      	b.n	800c608 <_scanf_float+0x198>
 800c6e6:	f04f 0a03 	mov.w	sl, #3
 800c6ea:	e78d      	b.n	800c608 <_scanf_float+0x198>
 800c6ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	4798      	blx	r3
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	f43f aedf 	beq.w	800c4ba <_scanf_float+0x4a>
 800c6fc:	e6eb      	b.n	800c4d6 <_scanf_float+0x66>
 800c6fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c706:	464a      	mov	r2, r9
 800c708:	4640      	mov	r0, r8
 800c70a:	4798      	blx	r3
 800c70c:	6923      	ldr	r3, [r4, #16]
 800c70e:	3b01      	subs	r3, #1
 800c710:	6123      	str	r3, [r4, #16]
 800c712:	e6eb      	b.n	800c4ec <_scanf_float+0x7c>
 800c714:	1e6b      	subs	r3, r5, #1
 800c716:	2b06      	cmp	r3, #6
 800c718:	d824      	bhi.n	800c764 <_scanf_float+0x2f4>
 800c71a:	2d02      	cmp	r5, #2
 800c71c:	d836      	bhi.n	800c78c <_scanf_float+0x31c>
 800c71e:	9b01      	ldr	r3, [sp, #4]
 800c720:	429e      	cmp	r6, r3
 800c722:	f67f aee7 	bls.w	800c4f4 <_scanf_float+0x84>
 800c726:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c72a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c72e:	464a      	mov	r2, r9
 800c730:	4640      	mov	r0, r8
 800c732:	4798      	blx	r3
 800c734:	6923      	ldr	r3, [r4, #16]
 800c736:	3b01      	subs	r3, #1
 800c738:	6123      	str	r3, [r4, #16]
 800c73a:	e7f0      	b.n	800c71e <_scanf_float+0x2ae>
 800c73c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c740:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c744:	464a      	mov	r2, r9
 800c746:	4640      	mov	r0, r8
 800c748:	4798      	blx	r3
 800c74a:	6923      	ldr	r3, [r4, #16]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	6123      	str	r3, [r4, #16]
 800c750:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c754:	fa5f fa8a 	uxtb.w	sl, sl
 800c758:	f1ba 0f02 	cmp.w	sl, #2
 800c75c:	d1ee      	bne.n	800c73c <_scanf_float+0x2cc>
 800c75e:	3d03      	subs	r5, #3
 800c760:	b2ed      	uxtb	r5, r5
 800c762:	1b76      	subs	r6, r6, r5
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	05da      	lsls	r2, r3, #23
 800c768:	d530      	bpl.n	800c7cc <_scanf_float+0x35c>
 800c76a:	055b      	lsls	r3, r3, #21
 800c76c:	d511      	bpl.n	800c792 <_scanf_float+0x322>
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	429e      	cmp	r6, r3
 800c772:	f67f aebf 	bls.w	800c4f4 <_scanf_float+0x84>
 800c776:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c77a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c77e:	464a      	mov	r2, r9
 800c780:	4640      	mov	r0, r8
 800c782:	4798      	blx	r3
 800c784:	6923      	ldr	r3, [r4, #16]
 800c786:	3b01      	subs	r3, #1
 800c788:	6123      	str	r3, [r4, #16]
 800c78a:	e7f0      	b.n	800c76e <_scanf_float+0x2fe>
 800c78c:	46aa      	mov	sl, r5
 800c78e:	46b3      	mov	fp, r6
 800c790:	e7de      	b.n	800c750 <_scanf_float+0x2e0>
 800c792:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c796:	6923      	ldr	r3, [r4, #16]
 800c798:	2965      	cmp	r1, #101	@ 0x65
 800c79a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c79e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c7a2:	6123      	str	r3, [r4, #16]
 800c7a4:	d00c      	beq.n	800c7c0 <_scanf_float+0x350>
 800c7a6:	2945      	cmp	r1, #69	@ 0x45
 800c7a8:	d00a      	beq.n	800c7c0 <_scanf_float+0x350>
 800c7aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c7ae:	464a      	mov	r2, r9
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	4798      	blx	r3
 800c7b4:	6923      	ldr	r3, [r4, #16]
 800c7b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	1eb5      	subs	r5, r6, #2
 800c7be:	6123      	str	r3, [r4, #16]
 800c7c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c7c4:	464a      	mov	r2, r9
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4798      	blx	r3
 800c7ca:	462e      	mov	r6, r5
 800c7cc:	6822      	ldr	r2, [r4, #0]
 800c7ce:	f012 0210 	ands.w	r2, r2, #16
 800c7d2:	d001      	beq.n	800c7d8 <_scanf_float+0x368>
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	e68e      	b.n	800c4f6 <_scanf_float+0x86>
 800c7d8:	7032      	strb	r2, [r6, #0]
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c7e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7e4:	d125      	bne.n	800c832 <_scanf_float+0x3c2>
 800c7e6:	9b02      	ldr	r3, [sp, #8]
 800c7e8:	429f      	cmp	r7, r3
 800c7ea:	d00a      	beq.n	800c802 <_scanf_float+0x392>
 800c7ec:	1bda      	subs	r2, r3, r7
 800c7ee:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c7f2:	429e      	cmp	r6, r3
 800c7f4:	bf28      	it	cs
 800c7f6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c7fa:	4922      	ldr	r1, [pc, #136]	@ (800c884 <_scanf_float+0x414>)
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	f000 f977 	bl	800caf0 <siprintf>
 800c802:	9901      	ldr	r1, [sp, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	4640      	mov	r0, r8
 800c808:	f002 fd36 	bl	800f278 <_strtod_r>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	6821      	ldr	r1, [r4, #0]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f011 0f02 	tst.w	r1, #2
 800c816:	ec57 6b10 	vmov	r6, r7, d0
 800c81a:	f103 0204 	add.w	r2, r3, #4
 800c81e:	d015      	beq.n	800c84c <_scanf_float+0x3dc>
 800c820:	9903      	ldr	r1, [sp, #12]
 800c822:	600a      	str	r2, [r1, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	e9c3 6700 	strd	r6, r7, [r3]
 800c82a:	68e3      	ldr	r3, [r4, #12]
 800c82c:	3301      	adds	r3, #1
 800c82e:	60e3      	str	r3, [r4, #12]
 800c830:	e7d0      	b.n	800c7d4 <_scanf_float+0x364>
 800c832:	9b04      	ldr	r3, [sp, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d0e4      	beq.n	800c802 <_scanf_float+0x392>
 800c838:	9905      	ldr	r1, [sp, #20]
 800c83a:	230a      	movs	r3, #10
 800c83c:	3101      	adds	r1, #1
 800c83e:	4640      	mov	r0, r8
 800c840:	f002 fd9a 	bl	800f378 <_strtol_r>
 800c844:	9b04      	ldr	r3, [sp, #16]
 800c846:	9e05      	ldr	r6, [sp, #20]
 800c848:	1ac2      	subs	r2, r0, r3
 800c84a:	e7d0      	b.n	800c7ee <_scanf_float+0x37e>
 800c84c:	f011 0f04 	tst.w	r1, #4
 800c850:	9903      	ldr	r1, [sp, #12]
 800c852:	600a      	str	r2, [r1, #0]
 800c854:	d1e6      	bne.n	800c824 <_scanf_float+0x3b4>
 800c856:	681d      	ldr	r5, [r3, #0]
 800c858:	4632      	mov	r2, r6
 800c85a:	463b      	mov	r3, r7
 800c85c:	4630      	mov	r0, r6
 800c85e:	4639      	mov	r1, r7
 800c860:	f7f4 f964 	bl	8000b2c <__aeabi_dcmpun>
 800c864:	b128      	cbz	r0, 800c872 <_scanf_float+0x402>
 800c866:	4808      	ldr	r0, [pc, #32]	@ (800c888 <_scanf_float+0x418>)
 800c868:	f000 fadc 	bl	800ce24 <nanf>
 800c86c:	ed85 0a00 	vstr	s0, [r5]
 800c870:	e7db      	b.n	800c82a <_scanf_float+0x3ba>
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f4 f9b7 	bl	8000be8 <__aeabi_d2f>
 800c87a:	6028      	str	r0, [r5, #0]
 800c87c:	e7d5      	b.n	800c82a <_scanf_float+0x3ba>
 800c87e:	2700      	movs	r7, #0
 800c880:	e62e      	b.n	800c4e0 <_scanf_float+0x70>
 800c882:	bf00      	nop
 800c884:	08010e27 	.word	0x08010e27
 800c888:	08010e67 	.word	0x08010e67

0800c88c <std>:
 800c88c:	2300      	movs	r3, #0
 800c88e:	b510      	push	{r4, lr}
 800c890:	4604      	mov	r4, r0
 800c892:	e9c0 3300 	strd	r3, r3, [r0]
 800c896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c89a:	6083      	str	r3, [r0, #8]
 800c89c:	8181      	strh	r1, [r0, #12]
 800c89e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c8a0:	81c2      	strh	r2, [r0, #14]
 800c8a2:	6183      	str	r3, [r0, #24]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	2208      	movs	r2, #8
 800c8a8:	305c      	adds	r0, #92	@ 0x5c
 800c8aa:	f000 fa1b 	bl	800cce4 <memset>
 800c8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e4 <std+0x58>)
 800c8b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e8 <std+0x5c>)
 800c8b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c8b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c8ec <std+0x60>)
 800c8b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f0 <std+0x64>)
 800c8bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c8be:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f4 <std+0x68>)
 800c8c0:	6224      	str	r4, [r4, #32]
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	d006      	beq.n	800c8d4 <std+0x48>
 800c8c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c8ca:	4294      	cmp	r4, r2
 800c8cc:	d002      	beq.n	800c8d4 <std+0x48>
 800c8ce:	33d0      	adds	r3, #208	@ 0xd0
 800c8d0:	429c      	cmp	r4, r3
 800c8d2:	d105      	bne.n	800c8e0 <std+0x54>
 800c8d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8dc:	f000 ba90 	b.w	800ce00 <__retarget_lock_init_recursive>
 800c8e0:	bd10      	pop	{r4, pc}
 800c8e2:	bf00      	nop
 800c8e4:	0800cb35 	.word	0x0800cb35
 800c8e8:	0800cb57 	.word	0x0800cb57
 800c8ec:	0800cb8f 	.word	0x0800cb8f
 800c8f0:	0800cbb3 	.word	0x0800cbb3
 800c8f4:	20003470 	.word	0x20003470

0800c8f8 <stdio_exit_handler>:
 800c8f8:	4a02      	ldr	r2, [pc, #8]	@ (800c904 <stdio_exit_handler+0xc>)
 800c8fa:	4903      	ldr	r1, [pc, #12]	@ (800c908 <stdio_exit_handler+0x10>)
 800c8fc:	4803      	ldr	r0, [pc, #12]	@ (800c90c <stdio_exit_handler+0x14>)
 800c8fe:	f000 b869 	b.w	800c9d4 <_fwalk_sglue>
 800c902:	bf00      	nop
 800c904:	20000084 	.word	0x20000084
 800c908:	0800f9b9 	.word	0x0800f9b9
 800c90c:	20000094 	.word	0x20000094

0800c910 <cleanup_stdio>:
 800c910:	6841      	ldr	r1, [r0, #4]
 800c912:	4b0c      	ldr	r3, [pc, #48]	@ (800c944 <cleanup_stdio+0x34>)
 800c914:	4299      	cmp	r1, r3
 800c916:	b510      	push	{r4, lr}
 800c918:	4604      	mov	r4, r0
 800c91a:	d001      	beq.n	800c920 <cleanup_stdio+0x10>
 800c91c:	f003 f84c 	bl	800f9b8 <_fflush_r>
 800c920:	68a1      	ldr	r1, [r4, #8]
 800c922:	4b09      	ldr	r3, [pc, #36]	@ (800c948 <cleanup_stdio+0x38>)
 800c924:	4299      	cmp	r1, r3
 800c926:	d002      	beq.n	800c92e <cleanup_stdio+0x1e>
 800c928:	4620      	mov	r0, r4
 800c92a:	f003 f845 	bl	800f9b8 <_fflush_r>
 800c92e:	68e1      	ldr	r1, [r4, #12]
 800c930:	4b06      	ldr	r3, [pc, #24]	@ (800c94c <cleanup_stdio+0x3c>)
 800c932:	4299      	cmp	r1, r3
 800c934:	d004      	beq.n	800c940 <cleanup_stdio+0x30>
 800c936:	4620      	mov	r0, r4
 800c938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c93c:	f003 b83c 	b.w	800f9b8 <_fflush_r>
 800c940:	bd10      	pop	{r4, pc}
 800c942:	bf00      	nop
 800c944:	20003470 	.word	0x20003470
 800c948:	200034d8 	.word	0x200034d8
 800c94c:	20003540 	.word	0x20003540

0800c950 <global_stdio_init.part.0>:
 800c950:	b510      	push	{r4, lr}
 800c952:	4b0b      	ldr	r3, [pc, #44]	@ (800c980 <global_stdio_init.part.0+0x30>)
 800c954:	4c0b      	ldr	r4, [pc, #44]	@ (800c984 <global_stdio_init.part.0+0x34>)
 800c956:	4a0c      	ldr	r2, [pc, #48]	@ (800c988 <global_stdio_init.part.0+0x38>)
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	4620      	mov	r0, r4
 800c95c:	2200      	movs	r2, #0
 800c95e:	2104      	movs	r1, #4
 800c960:	f7ff ff94 	bl	800c88c <std>
 800c964:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c968:	2201      	movs	r2, #1
 800c96a:	2109      	movs	r1, #9
 800c96c:	f7ff ff8e 	bl	800c88c <std>
 800c970:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c974:	2202      	movs	r2, #2
 800c976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c97a:	2112      	movs	r1, #18
 800c97c:	f7ff bf86 	b.w	800c88c <std>
 800c980:	200035a8 	.word	0x200035a8
 800c984:	20003470 	.word	0x20003470
 800c988:	0800c8f9 	.word	0x0800c8f9

0800c98c <__sfp_lock_acquire>:
 800c98c:	4801      	ldr	r0, [pc, #4]	@ (800c994 <__sfp_lock_acquire+0x8>)
 800c98e:	f000 ba38 	b.w	800ce02 <__retarget_lock_acquire_recursive>
 800c992:	bf00      	nop
 800c994:	200035b1 	.word	0x200035b1

0800c998 <__sfp_lock_release>:
 800c998:	4801      	ldr	r0, [pc, #4]	@ (800c9a0 <__sfp_lock_release+0x8>)
 800c99a:	f000 ba33 	b.w	800ce04 <__retarget_lock_release_recursive>
 800c99e:	bf00      	nop
 800c9a0:	200035b1 	.word	0x200035b1

0800c9a4 <__sinit>:
 800c9a4:	b510      	push	{r4, lr}
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	f7ff fff0 	bl	800c98c <__sfp_lock_acquire>
 800c9ac:	6a23      	ldr	r3, [r4, #32]
 800c9ae:	b11b      	cbz	r3, 800c9b8 <__sinit+0x14>
 800c9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b4:	f7ff bff0 	b.w	800c998 <__sfp_lock_release>
 800c9b8:	4b04      	ldr	r3, [pc, #16]	@ (800c9cc <__sinit+0x28>)
 800c9ba:	6223      	str	r3, [r4, #32]
 800c9bc:	4b04      	ldr	r3, [pc, #16]	@ (800c9d0 <__sinit+0x2c>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1f5      	bne.n	800c9b0 <__sinit+0xc>
 800c9c4:	f7ff ffc4 	bl	800c950 <global_stdio_init.part.0>
 800c9c8:	e7f2      	b.n	800c9b0 <__sinit+0xc>
 800c9ca:	bf00      	nop
 800c9cc:	0800c911 	.word	0x0800c911
 800c9d0:	200035a8 	.word	0x200035a8

0800c9d4 <_fwalk_sglue>:
 800c9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9d8:	4607      	mov	r7, r0
 800c9da:	4688      	mov	r8, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	2600      	movs	r6, #0
 800c9e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9e4:	f1b9 0901 	subs.w	r9, r9, #1
 800c9e8:	d505      	bpl.n	800c9f6 <_fwalk_sglue+0x22>
 800c9ea:	6824      	ldr	r4, [r4, #0]
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	d1f7      	bne.n	800c9e0 <_fwalk_sglue+0xc>
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d907      	bls.n	800ca0c <_fwalk_sglue+0x38>
 800c9fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca00:	3301      	adds	r3, #1
 800ca02:	d003      	beq.n	800ca0c <_fwalk_sglue+0x38>
 800ca04:	4629      	mov	r1, r5
 800ca06:	4638      	mov	r0, r7
 800ca08:	47c0      	blx	r8
 800ca0a:	4306      	orrs	r6, r0
 800ca0c:	3568      	adds	r5, #104	@ 0x68
 800ca0e:	e7e9      	b.n	800c9e4 <_fwalk_sglue+0x10>

0800ca10 <iprintf>:
 800ca10:	b40f      	push	{r0, r1, r2, r3}
 800ca12:	b507      	push	{r0, r1, r2, lr}
 800ca14:	4906      	ldr	r1, [pc, #24]	@ (800ca30 <iprintf+0x20>)
 800ca16:	ab04      	add	r3, sp, #16
 800ca18:	6808      	ldr	r0, [r1, #0]
 800ca1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca1e:	6881      	ldr	r1, [r0, #8]
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	f002 fe2d 	bl	800f680 <_vfiprintf_r>
 800ca26:	b003      	add	sp, #12
 800ca28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca2c:	b004      	add	sp, #16
 800ca2e:	4770      	bx	lr
 800ca30:	20000090 	.word	0x20000090

0800ca34 <_puts_r>:
 800ca34:	6a03      	ldr	r3, [r0, #32]
 800ca36:	b570      	push	{r4, r5, r6, lr}
 800ca38:	6884      	ldr	r4, [r0, #8]
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	460e      	mov	r6, r1
 800ca3e:	b90b      	cbnz	r3, 800ca44 <_puts_r+0x10>
 800ca40:	f7ff ffb0 	bl	800c9a4 <__sinit>
 800ca44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca46:	07db      	lsls	r3, r3, #31
 800ca48:	d405      	bmi.n	800ca56 <_puts_r+0x22>
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	0598      	lsls	r0, r3, #22
 800ca4e:	d402      	bmi.n	800ca56 <_puts_r+0x22>
 800ca50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca52:	f000 f9d6 	bl	800ce02 <__retarget_lock_acquire_recursive>
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	0719      	lsls	r1, r3, #28
 800ca5a:	d502      	bpl.n	800ca62 <_puts_r+0x2e>
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d135      	bne.n	800cace <_puts_r+0x9a>
 800ca62:	4621      	mov	r1, r4
 800ca64:	4628      	mov	r0, r5
 800ca66:	f000 f8e7 	bl	800cc38 <__swsetup_r>
 800ca6a:	b380      	cbz	r0, 800cace <_puts_r+0x9a>
 800ca6c:	f04f 35ff 	mov.w	r5, #4294967295
 800ca70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca72:	07da      	lsls	r2, r3, #31
 800ca74:	d405      	bmi.n	800ca82 <_puts_r+0x4e>
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	059b      	lsls	r3, r3, #22
 800ca7a:	d402      	bmi.n	800ca82 <_puts_r+0x4e>
 800ca7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca7e:	f000 f9c1 	bl	800ce04 <__retarget_lock_release_recursive>
 800ca82:	4628      	mov	r0, r5
 800ca84:	bd70      	pop	{r4, r5, r6, pc}
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	da04      	bge.n	800ca94 <_puts_r+0x60>
 800ca8a:	69a2      	ldr	r2, [r4, #24]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	dc17      	bgt.n	800cac0 <_puts_r+0x8c>
 800ca90:	290a      	cmp	r1, #10
 800ca92:	d015      	beq.n	800cac0 <_puts_r+0x8c>
 800ca94:	6823      	ldr	r3, [r4, #0]
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	6022      	str	r2, [r4, #0]
 800ca9a:	7019      	strb	r1, [r3, #0]
 800ca9c:	68a3      	ldr	r3, [r4, #8]
 800ca9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800caa2:	3b01      	subs	r3, #1
 800caa4:	60a3      	str	r3, [r4, #8]
 800caa6:	2900      	cmp	r1, #0
 800caa8:	d1ed      	bne.n	800ca86 <_puts_r+0x52>
 800caaa:	2b00      	cmp	r3, #0
 800caac:	da11      	bge.n	800cad2 <_puts_r+0x9e>
 800caae:	4622      	mov	r2, r4
 800cab0:	210a      	movs	r1, #10
 800cab2:	4628      	mov	r0, r5
 800cab4:	f000 f881 	bl	800cbba <__swbuf_r>
 800cab8:	3001      	adds	r0, #1
 800caba:	d0d7      	beq.n	800ca6c <_puts_r+0x38>
 800cabc:	250a      	movs	r5, #10
 800cabe:	e7d7      	b.n	800ca70 <_puts_r+0x3c>
 800cac0:	4622      	mov	r2, r4
 800cac2:	4628      	mov	r0, r5
 800cac4:	f000 f879 	bl	800cbba <__swbuf_r>
 800cac8:	3001      	adds	r0, #1
 800caca:	d1e7      	bne.n	800ca9c <_puts_r+0x68>
 800cacc:	e7ce      	b.n	800ca6c <_puts_r+0x38>
 800cace:	3e01      	subs	r6, #1
 800cad0:	e7e4      	b.n	800ca9c <_puts_r+0x68>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	6022      	str	r2, [r4, #0]
 800cad8:	220a      	movs	r2, #10
 800cada:	701a      	strb	r2, [r3, #0]
 800cadc:	e7ee      	b.n	800cabc <_puts_r+0x88>
	...

0800cae0 <puts>:
 800cae0:	4b02      	ldr	r3, [pc, #8]	@ (800caec <puts+0xc>)
 800cae2:	4601      	mov	r1, r0
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	f7ff bfa5 	b.w	800ca34 <_puts_r>
 800caea:	bf00      	nop
 800caec:	20000090 	.word	0x20000090

0800caf0 <siprintf>:
 800caf0:	b40e      	push	{r1, r2, r3}
 800caf2:	b510      	push	{r4, lr}
 800caf4:	b09d      	sub	sp, #116	@ 0x74
 800caf6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800caf8:	9002      	str	r0, [sp, #8]
 800cafa:	9006      	str	r0, [sp, #24]
 800cafc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cb00:	480a      	ldr	r0, [pc, #40]	@ (800cb2c <siprintf+0x3c>)
 800cb02:	9107      	str	r1, [sp, #28]
 800cb04:	9104      	str	r1, [sp, #16]
 800cb06:	490a      	ldr	r1, [pc, #40]	@ (800cb30 <siprintf+0x40>)
 800cb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0c:	9105      	str	r1, [sp, #20]
 800cb0e:	2400      	movs	r4, #0
 800cb10:	a902      	add	r1, sp, #8
 800cb12:	6800      	ldr	r0, [r0, #0]
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cb18:	f002 fc8c 	bl	800f434 <_svfiprintf_r>
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	701c      	strb	r4, [r3, #0]
 800cb20:	b01d      	add	sp, #116	@ 0x74
 800cb22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb26:	b003      	add	sp, #12
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	20000090 	.word	0x20000090
 800cb30:	ffff0208 	.word	0xffff0208

0800cb34 <__sread>:
 800cb34:	b510      	push	{r4, lr}
 800cb36:	460c      	mov	r4, r1
 800cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb3c:	f000 f912 	bl	800cd64 <_read_r>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	bfab      	itete	ge
 800cb44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cb46:	89a3      	ldrhlt	r3, [r4, #12]
 800cb48:	181b      	addge	r3, r3, r0
 800cb4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cb4e:	bfac      	ite	ge
 800cb50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cb52:	81a3      	strhlt	r3, [r4, #12]
 800cb54:	bd10      	pop	{r4, pc}

0800cb56 <__swrite>:
 800cb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	461f      	mov	r7, r3
 800cb5c:	898b      	ldrh	r3, [r1, #12]
 800cb5e:	05db      	lsls	r3, r3, #23
 800cb60:	4605      	mov	r5, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	4616      	mov	r6, r2
 800cb66:	d505      	bpl.n	800cb74 <__swrite+0x1e>
 800cb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f000 f8e6 	bl	800cd40 <_lseek_r>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	4632      	mov	r2, r6
 800cb82:	463b      	mov	r3, r7
 800cb84:	4628      	mov	r0, r5
 800cb86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8a:	f000 b8fd 	b.w	800cd88 <_write_r>

0800cb8e <__sseek>:
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	460c      	mov	r4, r1
 800cb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb96:	f000 f8d3 	bl	800cd40 <_lseek_r>
 800cb9a:	1c43      	adds	r3, r0, #1
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	bf15      	itete	ne
 800cba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cbaa:	81a3      	strheq	r3, [r4, #12]
 800cbac:	bf18      	it	ne
 800cbae:	81a3      	strhne	r3, [r4, #12]
 800cbb0:	bd10      	pop	{r4, pc}

0800cbb2 <__sclose>:
 800cbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb6:	f000 b8b3 	b.w	800cd20 <_close_r>

0800cbba <__swbuf_r>:
 800cbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbc:	460e      	mov	r6, r1
 800cbbe:	4614      	mov	r4, r2
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	b118      	cbz	r0, 800cbcc <__swbuf_r+0x12>
 800cbc4:	6a03      	ldr	r3, [r0, #32]
 800cbc6:	b90b      	cbnz	r3, 800cbcc <__swbuf_r+0x12>
 800cbc8:	f7ff feec 	bl	800c9a4 <__sinit>
 800cbcc:	69a3      	ldr	r3, [r4, #24]
 800cbce:	60a3      	str	r3, [r4, #8]
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	071a      	lsls	r2, r3, #28
 800cbd4:	d501      	bpl.n	800cbda <__swbuf_r+0x20>
 800cbd6:	6923      	ldr	r3, [r4, #16]
 800cbd8:	b943      	cbnz	r3, 800cbec <__swbuf_r+0x32>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f000 f82b 	bl	800cc38 <__swsetup_r>
 800cbe2:	b118      	cbz	r0, 800cbec <__swbuf_r+0x32>
 800cbe4:	f04f 37ff 	mov.w	r7, #4294967295
 800cbe8:	4638      	mov	r0, r7
 800cbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	6922      	ldr	r2, [r4, #16]
 800cbf0:	1a98      	subs	r0, r3, r2
 800cbf2:	6963      	ldr	r3, [r4, #20]
 800cbf4:	b2f6      	uxtb	r6, r6
 800cbf6:	4283      	cmp	r3, r0
 800cbf8:	4637      	mov	r7, r6
 800cbfa:	dc05      	bgt.n	800cc08 <__swbuf_r+0x4e>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f002 feda 	bl	800f9b8 <_fflush_r>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d1ed      	bne.n	800cbe4 <__swbuf_r+0x2a>
 800cc08:	68a3      	ldr	r3, [r4, #8]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	60a3      	str	r3, [r4, #8]
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	1c5a      	adds	r2, r3, #1
 800cc12:	6022      	str	r2, [r4, #0]
 800cc14:	701e      	strb	r6, [r3, #0]
 800cc16:	6962      	ldr	r2, [r4, #20]
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d004      	beq.n	800cc28 <__swbuf_r+0x6e>
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	07db      	lsls	r3, r3, #31
 800cc22:	d5e1      	bpl.n	800cbe8 <__swbuf_r+0x2e>
 800cc24:	2e0a      	cmp	r6, #10
 800cc26:	d1df      	bne.n	800cbe8 <__swbuf_r+0x2e>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f002 fec4 	bl	800f9b8 <_fflush_r>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d0d9      	beq.n	800cbe8 <__swbuf_r+0x2e>
 800cc34:	e7d6      	b.n	800cbe4 <__swbuf_r+0x2a>
	...

0800cc38 <__swsetup_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4b29      	ldr	r3, [pc, #164]	@ (800cce0 <__swsetup_r+0xa8>)
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	6818      	ldr	r0, [r3, #0]
 800cc40:	460c      	mov	r4, r1
 800cc42:	b118      	cbz	r0, 800cc4c <__swsetup_r+0x14>
 800cc44:	6a03      	ldr	r3, [r0, #32]
 800cc46:	b90b      	cbnz	r3, 800cc4c <__swsetup_r+0x14>
 800cc48:	f7ff feac 	bl	800c9a4 <__sinit>
 800cc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc50:	0719      	lsls	r1, r3, #28
 800cc52:	d422      	bmi.n	800cc9a <__swsetup_r+0x62>
 800cc54:	06da      	lsls	r2, r3, #27
 800cc56:	d407      	bmi.n	800cc68 <__swsetup_r+0x30>
 800cc58:	2209      	movs	r2, #9
 800cc5a:	602a      	str	r2, [r5, #0]
 800cc5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc60:	81a3      	strh	r3, [r4, #12]
 800cc62:	f04f 30ff 	mov.w	r0, #4294967295
 800cc66:	e033      	b.n	800ccd0 <__swsetup_r+0x98>
 800cc68:	0758      	lsls	r0, r3, #29
 800cc6a:	d512      	bpl.n	800cc92 <__swsetup_r+0x5a>
 800cc6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc6e:	b141      	cbz	r1, 800cc82 <__swsetup_r+0x4a>
 800cc70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc74:	4299      	cmp	r1, r3
 800cc76:	d002      	beq.n	800cc7e <__swsetup_r+0x46>
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f000 ff51 	bl	800db20 <_free_r>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	6063      	str	r3, [r4, #4]
 800cc8e:	6923      	ldr	r3, [r4, #16]
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	f043 0308 	orr.w	r3, r3, #8
 800cc98:	81a3      	strh	r3, [r4, #12]
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	b94b      	cbnz	r3, 800ccb2 <__swsetup_r+0x7a>
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cca8:	d003      	beq.n	800ccb2 <__swsetup_r+0x7a>
 800ccaa:	4621      	mov	r1, r4
 800ccac:	4628      	mov	r0, r5
 800ccae:	f002 fee3 	bl	800fa78 <__smakebuf_r>
 800ccb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb6:	f013 0201 	ands.w	r2, r3, #1
 800ccba:	d00a      	beq.n	800ccd2 <__swsetup_r+0x9a>
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	60a2      	str	r2, [r4, #8]
 800ccc0:	6962      	ldr	r2, [r4, #20]
 800ccc2:	4252      	negs	r2, r2
 800ccc4:	61a2      	str	r2, [r4, #24]
 800ccc6:	6922      	ldr	r2, [r4, #16]
 800ccc8:	b942      	cbnz	r2, 800ccdc <__swsetup_r+0xa4>
 800ccca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ccce:	d1c5      	bne.n	800cc5c <__swsetup_r+0x24>
 800ccd0:	bd38      	pop	{r3, r4, r5, pc}
 800ccd2:	0799      	lsls	r1, r3, #30
 800ccd4:	bf58      	it	pl
 800ccd6:	6962      	ldrpl	r2, [r4, #20]
 800ccd8:	60a2      	str	r2, [r4, #8]
 800ccda:	e7f4      	b.n	800ccc6 <__swsetup_r+0x8e>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	e7f7      	b.n	800ccd0 <__swsetup_r+0x98>
 800cce0:	20000090 	.word	0x20000090

0800cce4 <memset>:
 800cce4:	4402      	add	r2, r0
 800cce6:	4603      	mov	r3, r0
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d100      	bne.n	800ccee <memset+0xa>
 800ccec:	4770      	bx	lr
 800ccee:	f803 1b01 	strb.w	r1, [r3], #1
 800ccf2:	e7f9      	b.n	800cce8 <memset+0x4>

0800ccf4 <strncmp>:
 800ccf4:	b510      	push	{r4, lr}
 800ccf6:	b16a      	cbz	r2, 800cd14 <strncmp+0x20>
 800ccf8:	3901      	subs	r1, #1
 800ccfa:	1884      	adds	r4, r0, r2
 800ccfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d103      	bne.n	800cd10 <strncmp+0x1c>
 800cd08:	42a0      	cmp	r0, r4
 800cd0a:	d001      	beq.n	800cd10 <strncmp+0x1c>
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d1f5      	bne.n	800ccfc <strncmp+0x8>
 800cd10:	1ad0      	subs	r0, r2, r3
 800cd12:	bd10      	pop	{r4, pc}
 800cd14:	4610      	mov	r0, r2
 800cd16:	e7fc      	b.n	800cd12 <strncmp+0x1e>

0800cd18 <_localeconv_r>:
 800cd18:	4800      	ldr	r0, [pc, #0]	@ (800cd1c <_localeconv_r+0x4>)
 800cd1a:	4770      	bx	lr
 800cd1c:	200001d0 	.word	0x200001d0

0800cd20 <_close_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4d06      	ldr	r5, [pc, #24]	@ (800cd3c <_close_r+0x1c>)
 800cd24:	2300      	movs	r3, #0
 800cd26:	4604      	mov	r4, r0
 800cd28:	4608      	mov	r0, r1
 800cd2a:	602b      	str	r3, [r5, #0]
 800cd2c:	f7f6 f8e8 	bl	8002f00 <_close>
 800cd30:	1c43      	adds	r3, r0, #1
 800cd32:	d102      	bne.n	800cd3a <_close_r+0x1a>
 800cd34:	682b      	ldr	r3, [r5, #0]
 800cd36:	b103      	cbz	r3, 800cd3a <_close_r+0x1a>
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	200035ac 	.word	0x200035ac

0800cd40 <_lseek_r>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4d07      	ldr	r5, [pc, #28]	@ (800cd60 <_lseek_r+0x20>)
 800cd44:	4604      	mov	r4, r0
 800cd46:	4608      	mov	r0, r1
 800cd48:	4611      	mov	r1, r2
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	602a      	str	r2, [r5, #0]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f7f6 f8fd 	bl	8002f4e <_lseek>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_lseek_r+0x1e>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_lseek_r+0x1e>
 800cd5c:	6023      	str	r3, [r4, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	200035ac 	.word	0x200035ac

0800cd64 <_read_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d07      	ldr	r5, [pc, #28]	@ (800cd84 <_read_r+0x20>)
 800cd68:	4604      	mov	r4, r0
 800cd6a:	4608      	mov	r0, r1
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	2200      	movs	r2, #0
 800cd70:	602a      	str	r2, [r5, #0]
 800cd72:	461a      	mov	r2, r3
 800cd74:	f7f6 f88b 	bl	8002e8e <_read>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <_read_r+0x1e>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b103      	cbz	r3, 800cd82 <_read_r+0x1e>
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	200035ac 	.word	0x200035ac

0800cd88 <_write_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4d07      	ldr	r5, [pc, #28]	@ (800cda8 <_write_r+0x20>)
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	4608      	mov	r0, r1
 800cd90:	4611      	mov	r1, r2
 800cd92:	2200      	movs	r2, #0
 800cd94:	602a      	str	r2, [r5, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	f7f6 f896 	bl	8002ec8 <_write>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_write_r+0x1e>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_write_r+0x1e>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	200035ac 	.word	0x200035ac

0800cdac <__errno>:
 800cdac:	4b01      	ldr	r3, [pc, #4]	@ (800cdb4 <__errno+0x8>)
 800cdae:	6818      	ldr	r0, [r3, #0]
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	20000090 	.word	0x20000090

0800cdb8 <__libc_init_array>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4d0d      	ldr	r5, [pc, #52]	@ (800cdf0 <__libc_init_array+0x38>)
 800cdbc:	4c0d      	ldr	r4, [pc, #52]	@ (800cdf4 <__libc_init_array+0x3c>)
 800cdbe:	1b64      	subs	r4, r4, r5
 800cdc0:	10a4      	asrs	r4, r4, #2
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	42a6      	cmp	r6, r4
 800cdc6:	d109      	bne.n	800cddc <__libc_init_array+0x24>
 800cdc8:	4d0b      	ldr	r5, [pc, #44]	@ (800cdf8 <__libc_init_array+0x40>)
 800cdca:	4c0c      	ldr	r4, [pc, #48]	@ (800cdfc <__libc_init_array+0x44>)
 800cdcc:	f003 fe98 	bl	8010b00 <_init>
 800cdd0:	1b64      	subs	r4, r4, r5
 800cdd2:	10a4      	asrs	r4, r4, #2
 800cdd4:	2600      	movs	r6, #0
 800cdd6:	42a6      	cmp	r6, r4
 800cdd8:	d105      	bne.n	800cde6 <__libc_init_array+0x2e>
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
 800cddc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde0:	4798      	blx	r3
 800cde2:	3601      	adds	r6, #1
 800cde4:	e7ee      	b.n	800cdc4 <__libc_init_array+0xc>
 800cde6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdea:	4798      	blx	r3
 800cdec:	3601      	adds	r6, #1
 800cdee:	e7f2      	b.n	800cdd6 <__libc_init_array+0x1e>
 800cdf0:	08011224 	.word	0x08011224
 800cdf4:	08011224 	.word	0x08011224
 800cdf8:	08011224 	.word	0x08011224
 800cdfc:	08011228 	.word	0x08011228

0800ce00 <__retarget_lock_init_recursive>:
 800ce00:	4770      	bx	lr

0800ce02 <__retarget_lock_acquire_recursive>:
 800ce02:	4770      	bx	lr

0800ce04 <__retarget_lock_release_recursive>:
 800ce04:	4770      	bx	lr

0800ce06 <memcpy>:
 800ce06:	440a      	add	r2, r1
 800ce08:	4291      	cmp	r1, r2
 800ce0a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce0e:	d100      	bne.n	800ce12 <memcpy+0xc>
 800ce10:	4770      	bx	lr
 800ce12:	b510      	push	{r4, lr}
 800ce14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce1c:	4291      	cmp	r1, r2
 800ce1e:	d1f9      	bne.n	800ce14 <memcpy+0xe>
 800ce20:	bd10      	pop	{r4, pc}
	...

0800ce24 <nanf>:
 800ce24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ce2c <nanf+0x8>
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	7fc00000 	.word	0x7fc00000

0800ce30 <__assert_func>:
 800ce30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce32:	4614      	mov	r4, r2
 800ce34:	461a      	mov	r2, r3
 800ce36:	4b09      	ldr	r3, [pc, #36]	@ (800ce5c <__assert_func+0x2c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	68d8      	ldr	r0, [r3, #12]
 800ce3e:	b14c      	cbz	r4, 800ce54 <__assert_func+0x24>
 800ce40:	4b07      	ldr	r3, [pc, #28]	@ (800ce60 <__assert_func+0x30>)
 800ce42:	9100      	str	r1, [sp, #0]
 800ce44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce48:	4906      	ldr	r1, [pc, #24]	@ (800ce64 <__assert_func+0x34>)
 800ce4a:	462b      	mov	r3, r5
 800ce4c:	f002 fddc 	bl	800fa08 <fiprintf>
 800ce50:	f002 fea2 	bl	800fb98 <abort>
 800ce54:	4b04      	ldr	r3, [pc, #16]	@ (800ce68 <__assert_func+0x38>)
 800ce56:	461c      	mov	r4, r3
 800ce58:	e7f3      	b.n	800ce42 <__assert_func+0x12>
 800ce5a:	bf00      	nop
 800ce5c:	20000090 	.word	0x20000090
 800ce60:	08010e2c 	.word	0x08010e2c
 800ce64:	08010e39 	.word	0x08010e39
 800ce68:	08010e67 	.word	0x08010e67

0800ce6c <quorem>:
 800ce6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce70:	6903      	ldr	r3, [r0, #16]
 800ce72:	690c      	ldr	r4, [r1, #16]
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	4607      	mov	r7, r0
 800ce78:	db7e      	blt.n	800cf78 <quorem+0x10c>
 800ce7a:	3c01      	subs	r4, #1
 800ce7c:	f101 0814 	add.w	r8, r1, #20
 800ce80:	00a3      	lsls	r3, r4, #2
 800ce82:	f100 0514 	add.w	r5, r0, #20
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce96:	3301      	adds	r3, #1
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800cea2:	d32e      	bcc.n	800cf02 <quorem+0x96>
 800cea4:	f04f 0a00 	mov.w	sl, #0
 800cea8:	46c4      	mov	ip, r8
 800ceaa:	46ae      	mov	lr, r5
 800ceac:	46d3      	mov	fp, sl
 800ceae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ceb2:	b298      	uxth	r0, r3
 800ceb4:	fb06 a000 	mla	r0, r6, r0, sl
 800ceb8:	0c02      	lsrs	r2, r0, #16
 800ceba:	0c1b      	lsrs	r3, r3, #16
 800cebc:	fb06 2303 	mla	r3, r6, r3, r2
 800cec0:	f8de 2000 	ldr.w	r2, [lr]
 800cec4:	b280      	uxth	r0, r0
 800cec6:	b292      	uxth	r2, r2
 800cec8:	1a12      	subs	r2, r2, r0
 800ceca:	445a      	add	r2, fp
 800cecc:	f8de 0000 	ldr.w	r0, [lr]
 800ced0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ceda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cede:	b292      	uxth	r2, r2
 800cee0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cee4:	45e1      	cmp	r9, ip
 800cee6:	f84e 2b04 	str.w	r2, [lr], #4
 800ceea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ceee:	d2de      	bcs.n	800ceae <quorem+0x42>
 800cef0:	9b00      	ldr	r3, [sp, #0]
 800cef2:	58eb      	ldr	r3, [r5, r3]
 800cef4:	b92b      	cbnz	r3, 800cf02 <quorem+0x96>
 800cef6:	9b01      	ldr	r3, [sp, #4]
 800cef8:	3b04      	subs	r3, #4
 800cefa:	429d      	cmp	r5, r3
 800cefc:	461a      	mov	r2, r3
 800cefe:	d32f      	bcc.n	800cf60 <quorem+0xf4>
 800cf00:	613c      	str	r4, [r7, #16]
 800cf02:	4638      	mov	r0, r7
 800cf04:	f001 f9c8 	bl	800e298 <__mcmp>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	db25      	blt.n	800cf58 <quorem+0xec>
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	2000      	movs	r0, #0
 800cf10:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf14:	f8d1 c000 	ldr.w	ip, [r1]
 800cf18:	fa1f fe82 	uxth.w	lr, r2
 800cf1c:	fa1f f38c 	uxth.w	r3, ip
 800cf20:	eba3 030e 	sub.w	r3, r3, lr
 800cf24:	4403      	add	r3, r0
 800cf26:	0c12      	lsrs	r2, r2, #16
 800cf28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cf2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf36:	45c1      	cmp	r9, r8
 800cf38:	f841 3b04 	str.w	r3, [r1], #4
 800cf3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf40:	d2e6      	bcs.n	800cf10 <quorem+0xa4>
 800cf42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf4a:	b922      	cbnz	r2, 800cf56 <quorem+0xea>
 800cf4c:	3b04      	subs	r3, #4
 800cf4e:	429d      	cmp	r5, r3
 800cf50:	461a      	mov	r2, r3
 800cf52:	d30b      	bcc.n	800cf6c <quorem+0x100>
 800cf54:	613c      	str	r4, [r7, #16]
 800cf56:	3601      	adds	r6, #1
 800cf58:	4630      	mov	r0, r6
 800cf5a:	b003      	add	sp, #12
 800cf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf60:	6812      	ldr	r2, [r2, #0]
 800cf62:	3b04      	subs	r3, #4
 800cf64:	2a00      	cmp	r2, #0
 800cf66:	d1cb      	bne.n	800cf00 <quorem+0x94>
 800cf68:	3c01      	subs	r4, #1
 800cf6a:	e7c6      	b.n	800cefa <quorem+0x8e>
 800cf6c:	6812      	ldr	r2, [r2, #0]
 800cf6e:	3b04      	subs	r3, #4
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	d1ef      	bne.n	800cf54 <quorem+0xe8>
 800cf74:	3c01      	subs	r4, #1
 800cf76:	e7ea      	b.n	800cf4e <quorem+0xe2>
 800cf78:	2000      	movs	r0, #0
 800cf7a:	e7ee      	b.n	800cf5a <quorem+0xee>
 800cf7c:	0000      	movs	r0, r0
	...

0800cf80 <_dtoa_r>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	69c7      	ldr	r7, [r0, #28]
 800cf86:	b097      	sub	sp, #92	@ 0x5c
 800cf88:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cf8c:	ec55 4b10 	vmov	r4, r5, d0
 800cf90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cf92:	9107      	str	r1, [sp, #28]
 800cf94:	4681      	mov	r9, r0
 800cf96:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf98:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf9a:	b97f      	cbnz	r7, 800cfbc <_dtoa_r+0x3c>
 800cf9c:	2010      	movs	r0, #16
 800cf9e:	f000 fe09 	bl	800dbb4 <malloc>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	f8c9 001c 	str.w	r0, [r9, #28]
 800cfa8:	b920      	cbnz	r0, 800cfb4 <_dtoa_r+0x34>
 800cfaa:	4ba9      	ldr	r3, [pc, #676]	@ (800d250 <_dtoa_r+0x2d0>)
 800cfac:	21ef      	movs	r1, #239	@ 0xef
 800cfae:	48a9      	ldr	r0, [pc, #676]	@ (800d254 <_dtoa_r+0x2d4>)
 800cfb0:	f7ff ff3e 	bl	800ce30 <__assert_func>
 800cfb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cfb8:	6007      	str	r7, [r0, #0]
 800cfba:	60c7      	str	r7, [r0, #12]
 800cfbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfc0:	6819      	ldr	r1, [r3, #0]
 800cfc2:	b159      	cbz	r1, 800cfdc <_dtoa_r+0x5c>
 800cfc4:	685a      	ldr	r2, [r3, #4]
 800cfc6:	604a      	str	r2, [r1, #4]
 800cfc8:	2301      	movs	r3, #1
 800cfca:	4093      	lsls	r3, r2
 800cfcc:	608b      	str	r3, [r1, #8]
 800cfce:	4648      	mov	r0, r9
 800cfd0:	f000 fee6 	bl	800dda0 <_Bfree>
 800cfd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	601a      	str	r2, [r3, #0]
 800cfdc:	1e2b      	subs	r3, r5, #0
 800cfde:	bfb9      	ittee	lt
 800cfe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cfe4:	9305      	strlt	r3, [sp, #20]
 800cfe6:	2300      	movge	r3, #0
 800cfe8:	6033      	strge	r3, [r6, #0]
 800cfea:	9f05      	ldr	r7, [sp, #20]
 800cfec:	4b9a      	ldr	r3, [pc, #616]	@ (800d258 <_dtoa_r+0x2d8>)
 800cfee:	bfbc      	itt	lt
 800cff0:	2201      	movlt	r2, #1
 800cff2:	6032      	strlt	r2, [r6, #0]
 800cff4:	43bb      	bics	r3, r7
 800cff6:	d112      	bne.n	800d01e <_dtoa_r+0x9e>
 800cff8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cffa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cffe:	6013      	str	r3, [r2, #0]
 800d000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d004:	4323      	orrs	r3, r4
 800d006:	f000 855a 	beq.w	800dabe <_dtoa_r+0xb3e>
 800d00a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d00c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d26c <_dtoa_r+0x2ec>
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 855c 	beq.w	800dace <_dtoa_r+0xb4e>
 800d016:	f10a 0303 	add.w	r3, sl, #3
 800d01a:	f000 bd56 	b.w	800daca <_dtoa_r+0xb4a>
 800d01e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d022:	2200      	movs	r2, #0
 800d024:	ec51 0b17 	vmov	r0, r1, d7
 800d028:	2300      	movs	r3, #0
 800d02a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d02e:	f7f3 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d032:	4680      	mov	r8, r0
 800d034:	b158      	cbz	r0, 800d04e <_dtoa_r+0xce>
 800d036:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d038:	2301      	movs	r3, #1
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d03e:	b113      	cbz	r3, 800d046 <_dtoa_r+0xc6>
 800d040:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d042:	4b86      	ldr	r3, [pc, #536]	@ (800d25c <_dtoa_r+0x2dc>)
 800d044:	6013      	str	r3, [r2, #0]
 800d046:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d270 <_dtoa_r+0x2f0>
 800d04a:	f000 bd40 	b.w	800dace <_dtoa_r+0xb4e>
 800d04e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d052:	aa14      	add	r2, sp, #80	@ 0x50
 800d054:	a915      	add	r1, sp, #84	@ 0x54
 800d056:	4648      	mov	r0, r9
 800d058:	f001 fa3e 	bl	800e4d8 <__d2b>
 800d05c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d060:	9002      	str	r0, [sp, #8]
 800d062:	2e00      	cmp	r6, #0
 800d064:	d078      	beq.n	800d158 <_dtoa_r+0x1d8>
 800d066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d068:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d074:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d078:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d07c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d080:	4619      	mov	r1, r3
 800d082:	2200      	movs	r2, #0
 800d084:	4b76      	ldr	r3, [pc, #472]	@ (800d260 <_dtoa_r+0x2e0>)
 800d086:	f7f3 f8ff 	bl	8000288 <__aeabi_dsub>
 800d08a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d238 <_dtoa_r+0x2b8>)
 800d08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d090:	f7f3 fab2 	bl	80005f8 <__aeabi_dmul>
 800d094:	a36a      	add	r3, pc, #424	@ (adr r3, 800d240 <_dtoa_r+0x2c0>)
 800d096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09a:	f7f3 f8f7 	bl	800028c <__adddf3>
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	460d      	mov	r5, r1
 800d0a4:	f7f3 fa3e 	bl	8000524 <__aeabi_i2d>
 800d0a8:	a367      	add	r3, pc, #412	@ (adr r3, 800d248 <_dtoa_r+0x2c8>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f7f3 faa3 	bl	80005f8 <__aeabi_dmul>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7f3 f8e7 	bl	800028c <__adddf3>
 800d0be:	4604      	mov	r4, r0
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	f7f3 fd49 	bl	8000b58 <__aeabi_d2iz>
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	4607      	mov	r7, r0
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	f7f3 fd04 	bl	8000adc <__aeabi_dcmplt>
 800d0d4:	b140      	cbz	r0, 800d0e8 <_dtoa_r+0x168>
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f7f3 fa24 	bl	8000524 <__aeabi_i2d>
 800d0dc:	4622      	mov	r2, r4
 800d0de:	462b      	mov	r3, r5
 800d0e0:	f7f3 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0e4:	b900      	cbnz	r0, 800d0e8 <_dtoa_r+0x168>
 800d0e6:	3f01      	subs	r7, #1
 800d0e8:	2f16      	cmp	r7, #22
 800d0ea:	d852      	bhi.n	800d192 <_dtoa_r+0x212>
 800d0ec:	4b5d      	ldr	r3, [pc, #372]	@ (800d264 <_dtoa_r+0x2e4>)
 800d0ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d0fa:	f7f3 fcef 	bl	8000adc <__aeabi_dcmplt>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d049      	beq.n	800d196 <_dtoa_r+0x216>
 800d102:	3f01      	subs	r7, #1
 800d104:	2300      	movs	r3, #0
 800d106:	9310      	str	r3, [sp, #64]	@ 0x40
 800d108:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d10a:	1b9b      	subs	r3, r3, r6
 800d10c:	1e5a      	subs	r2, r3, #1
 800d10e:	bf45      	ittet	mi
 800d110:	f1c3 0301 	rsbmi	r3, r3, #1
 800d114:	9300      	strmi	r3, [sp, #0]
 800d116:	2300      	movpl	r3, #0
 800d118:	2300      	movmi	r3, #0
 800d11a:	9206      	str	r2, [sp, #24]
 800d11c:	bf54      	ite	pl
 800d11e:	9300      	strpl	r3, [sp, #0]
 800d120:	9306      	strmi	r3, [sp, #24]
 800d122:	2f00      	cmp	r7, #0
 800d124:	db39      	blt.n	800d19a <_dtoa_r+0x21a>
 800d126:	9b06      	ldr	r3, [sp, #24]
 800d128:	970d      	str	r7, [sp, #52]	@ 0x34
 800d12a:	443b      	add	r3, r7
 800d12c:	9306      	str	r3, [sp, #24]
 800d12e:	2300      	movs	r3, #0
 800d130:	9308      	str	r3, [sp, #32]
 800d132:	9b07      	ldr	r3, [sp, #28]
 800d134:	2b09      	cmp	r3, #9
 800d136:	d863      	bhi.n	800d200 <_dtoa_r+0x280>
 800d138:	2b05      	cmp	r3, #5
 800d13a:	bfc4      	itt	gt
 800d13c:	3b04      	subgt	r3, #4
 800d13e:	9307      	strgt	r3, [sp, #28]
 800d140:	9b07      	ldr	r3, [sp, #28]
 800d142:	f1a3 0302 	sub.w	r3, r3, #2
 800d146:	bfcc      	ite	gt
 800d148:	2400      	movgt	r4, #0
 800d14a:	2401      	movle	r4, #1
 800d14c:	2b03      	cmp	r3, #3
 800d14e:	d863      	bhi.n	800d218 <_dtoa_r+0x298>
 800d150:	e8df f003 	tbb	[pc, r3]
 800d154:	2b375452 	.word	0x2b375452
 800d158:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d15c:	441e      	add	r6, r3
 800d15e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d162:	2b20      	cmp	r3, #32
 800d164:	bfc1      	itttt	gt
 800d166:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d16a:	409f      	lslgt	r7, r3
 800d16c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d170:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d174:	bfd6      	itet	le
 800d176:	f1c3 0320 	rsble	r3, r3, #32
 800d17a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d17e:	fa04 f003 	lslle.w	r0, r4, r3
 800d182:	f7f3 f9bf 	bl	8000504 <__aeabi_ui2d>
 800d186:	2201      	movs	r2, #1
 800d188:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d18c:	3e01      	subs	r6, #1
 800d18e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d190:	e776      	b.n	800d080 <_dtoa_r+0x100>
 800d192:	2301      	movs	r3, #1
 800d194:	e7b7      	b.n	800d106 <_dtoa_r+0x186>
 800d196:	9010      	str	r0, [sp, #64]	@ 0x40
 800d198:	e7b6      	b.n	800d108 <_dtoa_r+0x188>
 800d19a:	9b00      	ldr	r3, [sp, #0]
 800d19c:	1bdb      	subs	r3, r3, r7
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	427b      	negs	r3, r7
 800d1a2:	9308      	str	r3, [sp, #32]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800d1a8:	e7c3      	b.n	800d132 <_dtoa_r+0x1b2>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1b0:	eb07 0b03 	add.w	fp, r7, r3
 800d1b4:	f10b 0301 	add.w	r3, fp, #1
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	9303      	str	r3, [sp, #12]
 800d1bc:	bfb8      	it	lt
 800d1be:	2301      	movlt	r3, #1
 800d1c0:	e006      	b.n	800d1d0 <_dtoa_r+0x250>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	dd28      	ble.n	800d21e <_dtoa_r+0x29e>
 800d1cc:	469b      	mov	fp, r3
 800d1ce:	9303      	str	r3, [sp, #12]
 800d1d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	2204      	movs	r2, #4
 800d1d8:	f102 0514 	add.w	r5, r2, #20
 800d1dc:	429d      	cmp	r5, r3
 800d1de:	d926      	bls.n	800d22e <_dtoa_r+0x2ae>
 800d1e0:	6041      	str	r1, [r0, #4]
 800d1e2:	4648      	mov	r0, r9
 800d1e4:	f000 fd9c 	bl	800dd20 <_Balloc>
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d142      	bne.n	800d274 <_dtoa_r+0x2f4>
 800d1ee:	4b1e      	ldr	r3, [pc, #120]	@ (800d268 <_dtoa_r+0x2e8>)
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	f240 11af 	movw	r1, #431	@ 0x1af
 800d1f6:	e6da      	b.n	800cfae <_dtoa_r+0x2e>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	e7e3      	b.n	800d1c4 <_dtoa_r+0x244>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e7d5      	b.n	800d1ac <_dtoa_r+0x22c>
 800d200:	2401      	movs	r4, #1
 800d202:	2300      	movs	r3, #0
 800d204:	9307      	str	r3, [sp, #28]
 800d206:	9409      	str	r4, [sp, #36]	@ 0x24
 800d208:	f04f 3bff 	mov.w	fp, #4294967295
 800d20c:	2200      	movs	r2, #0
 800d20e:	f8cd b00c 	str.w	fp, [sp, #12]
 800d212:	2312      	movs	r3, #18
 800d214:	920c      	str	r2, [sp, #48]	@ 0x30
 800d216:	e7db      	b.n	800d1d0 <_dtoa_r+0x250>
 800d218:	2301      	movs	r3, #1
 800d21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d21c:	e7f4      	b.n	800d208 <_dtoa_r+0x288>
 800d21e:	f04f 0b01 	mov.w	fp, #1
 800d222:	f8cd b00c 	str.w	fp, [sp, #12]
 800d226:	465b      	mov	r3, fp
 800d228:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d22c:	e7d0      	b.n	800d1d0 <_dtoa_r+0x250>
 800d22e:	3101      	adds	r1, #1
 800d230:	0052      	lsls	r2, r2, #1
 800d232:	e7d1      	b.n	800d1d8 <_dtoa_r+0x258>
 800d234:	f3af 8000 	nop.w
 800d238:	636f4361 	.word	0x636f4361
 800d23c:	3fd287a7 	.word	0x3fd287a7
 800d240:	8b60c8b3 	.word	0x8b60c8b3
 800d244:	3fc68a28 	.word	0x3fc68a28
 800d248:	509f79fb 	.word	0x509f79fb
 800d24c:	3fd34413 	.word	0x3fd34413
 800d250:	08010d84 	.word	0x08010d84
 800d254:	08010e75 	.word	0x08010e75
 800d258:	7ff00000 	.word	0x7ff00000
 800d25c:	08010e04 	.word	0x08010e04
 800d260:	3ff80000 	.word	0x3ff80000
 800d264:	08010fe8 	.word	0x08010fe8
 800d268:	08010ecd 	.word	0x08010ecd
 800d26c:	08010e71 	.word	0x08010e71
 800d270:	08010e03 	.word	0x08010e03
 800d274:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d278:	6018      	str	r0, [r3, #0]
 800d27a:	9b03      	ldr	r3, [sp, #12]
 800d27c:	2b0e      	cmp	r3, #14
 800d27e:	f200 80a1 	bhi.w	800d3c4 <_dtoa_r+0x444>
 800d282:	2c00      	cmp	r4, #0
 800d284:	f000 809e 	beq.w	800d3c4 <_dtoa_r+0x444>
 800d288:	2f00      	cmp	r7, #0
 800d28a:	dd33      	ble.n	800d2f4 <_dtoa_r+0x374>
 800d28c:	4b9c      	ldr	r3, [pc, #624]	@ (800d500 <_dtoa_r+0x580>)
 800d28e:	f007 020f 	and.w	r2, r7, #15
 800d292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d296:	ed93 7b00 	vldr	d7, [r3]
 800d29a:	05f8      	lsls	r0, r7, #23
 800d29c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d2a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d2a4:	d516      	bpl.n	800d2d4 <_dtoa_r+0x354>
 800d2a6:	4b97      	ldr	r3, [pc, #604]	@ (800d504 <_dtoa_r+0x584>)
 800d2a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2b0:	f7f3 facc 	bl	800084c <__aeabi_ddiv>
 800d2b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2b8:	f004 040f 	and.w	r4, r4, #15
 800d2bc:	2603      	movs	r6, #3
 800d2be:	4d91      	ldr	r5, [pc, #580]	@ (800d504 <_dtoa_r+0x584>)
 800d2c0:	b954      	cbnz	r4, 800d2d8 <_dtoa_r+0x358>
 800d2c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d2c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2ca:	f7f3 fabf 	bl	800084c <__aeabi_ddiv>
 800d2ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2d2:	e028      	b.n	800d326 <_dtoa_r+0x3a6>
 800d2d4:	2602      	movs	r6, #2
 800d2d6:	e7f2      	b.n	800d2be <_dtoa_r+0x33e>
 800d2d8:	07e1      	lsls	r1, r4, #31
 800d2da:	d508      	bpl.n	800d2ee <_dtoa_r+0x36e>
 800d2dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d2e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2e4:	f7f3 f988 	bl	80005f8 <__aeabi_dmul>
 800d2e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d2ec:	3601      	adds	r6, #1
 800d2ee:	1064      	asrs	r4, r4, #1
 800d2f0:	3508      	adds	r5, #8
 800d2f2:	e7e5      	b.n	800d2c0 <_dtoa_r+0x340>
 800d2f4:	f000 80af 	beq.w	800d456 <_dtoa_r+0x4d6>
 800d2f8:	427c      	negs	r4, r7
 800d2fa:	4b81      	ldr	r3, [pc, #516]	@ (800d500 <_dtoa_r+0x580>)
 800d2fc:	4d81      	ldr	r5, [pc, #516]	@ (800d504 <_dtoa_r+0x584>)
 800d2fe:	f004 020f 	and.w	r2, r4, #15
 800d302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d30e:	f7f3 f973 	bl	80005f8 <__aeabi_dmul>
 800d312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d316:	1124      	asrs	r4, r4, #4
 800d318:	2300      	movs	r3, #0
 800d31a:	2602      	movs	r6, #2
 800d31c:	2c00      	cmp	r4, #0
 800d31e:	f040 808f 	bne.w	800d440 <_dtoa_r+0x4c0>
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1d3      	bne.n	800d2ce <_dtoa_r+0x34e>
 800d326:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d328:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 8094 	beq.w	800d45a <_dtoa_r+0x4da>
 800d332:	4b75      	ldr	r3, [pc, #468]	@ (800d508 <_dtoa_r+0x588>)
 800d334:	2200      	movs	r2, #0
 800d336:	4620      	mov	r0, r4
 800d338:	4629      	mov	r1, r5
 800d33a:	f7f3 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800d33e:	2800      	cmp	r0, #0
 800d340:	f000 808b 	beq.w	800d45a <_dtoa_r+0x4da>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 8087 	beq.w	800d45a <_dtoa_r+0x4da>
 800d34c:	f1bb 0f00 	cmp.w	fp, #0
 800d350:	dd34      	ble.n	800d3bc <_dtoa_r+0x43c>
 800d352:	4620      	mov	r0, r4
 800d354:	4b6d      	ldr	r3, [pc, #436]	@ (800d50c <_dtoa_r+0x58c>)
 800d356:	2200      	movs	r2, #0
 800d358:	4629      	mov	r1, r5
 800d35a:	f7f3 f94d 	bl	80005f8 <__aeabi_dmul>
 800d35e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d362:	f107 38ff 	add.w	r8, r7, #4294967295
 800d366:	3601      	adds	r6, #1
 800d368:	465c      	mov	r4, fp
 800d36a:	4630      	mov	r0, r6
 800d36c:	f7f3 f8da 	bl	8000524 <__aeabi_i2d>
 800d370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d374:	f7f3 f940 	bl	80005f8 <__aeabi_dmul>
 800d378:	4b65      	ldr	r3, [pc, #404]	@ (800d510 <_dtoa_r+0x590>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	f7f2 ff86 	bl	800028c <__adddf3>
 800d380:	4605      	mov	r5, r0
 800d382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d386:	2c00      	cmp	r4, #0
 800d388:	d16a      	bne.n	800d460 <_dtoa_r+0x4e0>
 800d38a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d38e:	4b61      	ldr	r3, [pc, #388]	@ (800d514 <_dtoa_r+0x594>)
 800d390:	2200      	movs	r2, #0
 800d392:	f7f2 ff79 	bl	8000288 <__aeabi_dsub>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d39e:	462a      	mov	r2, r5
 800d3a0:	4633      	mov	r3, r6
 800d3a2:	f7f3 fbb9 	bl	8000b18 <__aeabi_dcmpgt>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	f040 8298 	bne.w	800d8dc <_dtoa_r+0x95c>
 800d3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3b0:	462a      	mov	r2, r5
 800d3b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d3b6:	f7f3 fb91 	bl	8000adc <__aeabi_dcmplt>
 800d3ba:	bb38      	cbnz	r0, 800d40c <_dtoa_r+0x48c>
 800d3bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d3c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d3c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f2c0 8157 	blt.w	800d67a <_dtoa_r+0x6fa>
 800d3cc:	2f0e      	cmp	r7, #14
 800d3ce:	f300 8154 	bgt.w	800d67a <_dtoa_r+0x6fa>
 800d3d2:	4b4b      	ldr	r3, [pc, #300]	@ (800d500 <_dtoa_r+0x580>)
 800d3d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3d8:	ed93 7b00 	vldr	d7, [r3]
 800d3dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	ed8d 7b00 	vstr	d7, [sp]
 800d3e4:	f280 80e5 	bge.w	800d5b2 <_dtoa_r+0x632>
 800d3e8:	9b03      	ldr	r3, [sp, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f300 80e1 	bgt.w	800d5b2 <_dtoa_r+0x632>
 800d3f0:	d10c      	bne.n	800d40c <_dtoa_r+0x48c>
 800d3f2:	4b48      	ldr	r3, [pc, #288]	@ (800d514 <_dtoa_r+0x594>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	ec51 0b17 	vmov	r0, r1, d7
 800d3fa:	f7f3 f8fd 	bl	80005f8 <__aeabi_dmul>
 800d3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d402:	f7f3 fb7f 	bl	8000b04 <__aeabi_dcmpge>
 800d406:	2800      	cmp	r0, #0
 800d408:	f000 8266 	beq.w	800d8d8 <_dtoa_r+0x958>
 800d40c:	2400      	movs	r4, #0
 800d40e:	4625      	mov	r5, r4
 800d410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d412:	4656      	mov	r6, sl
 800d414:	ea6f 0803 	mvn.w	r8, r3
 800d418:	2700      	movs	r7, #0
 800d41a:	4621      	mov	r1, r4
 800d41c:	4648      	mov	r0, r9
 800d41e:	f000 fcbf 	bl	800dda0 <_Bfree>
 800d422:	2d00      	cmp	r5, #0
 800d424:	f000 80bd 	beq.w	800d5a2 <_dtoa_r+0x622>
 800d428:	b12f      	cbz	r7, 800d436 <_dtoa_r+0x4b6>
 800d42a:	42af      	cmp	r7, r5
 800d42c:	d003      	beq.n	800d436 <_dtoa_r+0x4b6>
 800d42e:	4639      	mov	r1, r7
 800d430:	4648      	mov	r0, r9
 800d432:	f000 fcb5 	bl	800dda0 <_Bfree>
 800d436:	4629      	mov	r1, r5
 800d438:	4648      	mov	r0, r9
 800d43a:	f000 fcb1 	bl	800dda0 <_Bfree>
 800d43e:	e0b0      	b.n	800d5a2 <_dtoa_r+0x622>
 800d440:	07e2      	lsls	r2, r4, #31
 800d442:	d505      	bpl.n	800d450 <_dtoa_r+0x4d0>
 800d444:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d448:	f7f3 f8d6 	bl	80005f8 <__aeabi_dmul>
 800d44c:	3601      	adds	r6, #1
 800d44e:	2301      	movs	r3, #1
 800d450:	1064      	asrs	r4, r4, #1
 800d452:	3508      	adds	r5, #8
 800d454:	e762      	b.n	800d31c <_dtoa_r+0x39c>
 800d456:	2602      	movs	r6, #2
 800d458:	e765      	b.n	800d326 <_dtoa_r+0x3a6>
 800d45a:	9c03      	ldr	r4, [sp, #12]
 800d45c:	46b8      	mov	r8, r7
 800d45e:	e784      	b.n	800d36a <_dtoa_r+0x3ea>
 800d460:	4b27      	ldr	r3, [pc, #156]	@ (800d500 <_dtoa_r+0x580>)
 800d462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d464:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d468:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d46c:	4454      	add	r4, sl
 800d46e:	2900      	cmp	r1, #0
 800d470:	d054      	beq.n	800d51c <_dtoa_r+0x59c>
 800d472:	4929      	ldr	r1, [pc, #164]	@ (800d518 <_dtoa_r+0x598>)
 800d474:	2000      	movs	r0, #0
 800d476:	f7f3 f9e9 	bl	800084c <__aeabi_ddiv>
 800d47a:	4633      	mov	r3, r6
 800d47c:	462a      	mov	r2, r5
 800d47e:	f7f2 ff03 	bl	8000288 <__aeabi_dsub>
 800d482:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d486:	4656      	mov	r6, sl
 800d488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d48c:	f7f3 fb64 	bl	8000b58 <__aeabi_d2iz>
 800d490:	4605      	mov	r5, r0
 800d492:	f7f3 f847 	bl	8000524 <__aeabi_i2d>
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d49e:	f7f2 fef3 	bl	8000288 <__aeabi_dsub>
 800d4a2:	3530      	adds	r5, #48	@ 0x30
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4ac:	f806 5b01 	strb.w	r5, [r6], #1
 800d4b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d4b4:	f7f3 fb12 	bl	8000adc <__aeabi_dcmplt>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d172      	bne.n	800d5a2 <_dtoa_r+0x622>
 800d4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4c0:	4911      	ldr	r1, [pc, #68]	@ (800d508 <_dtoa_r+0x588>)
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	f7f2 fee0 	bl	8000288 <__aeabi_dsub>
 800d4c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d4cc:	f7f3 fb06 	bl	8000adc <__aeabi_dcmplt>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	f040 80b4 	bne.w	800d63e <_dtoa_r+0x6be>
 800d4d6:	42a6      	cmp	r6, r4
 800d4d8:	f43f af70 	beq.w	800d3bc <_dtoa_r+0x43c>
 800d4dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d50c <_dtoa_r+0x58c>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f7f3 f888 	bl	80005f8 <__aeabi_dmul>
 800d4e8:	4b08      	ldr	r3, [pc, #32]	@ (800d50c <_dtoa_r+0x58c>)
 800d4ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4f4:	f7f3 f880 	bl	80005f8 <__aeabi_dmul>
 800d4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4fc:	e7c4      	b.n	800d488 <_dtoa_r+0x508>
 800d4fe:	bf00      	nop
 800d500:	08010fe8 	.word	0x08010fe8
 800d504:	08010fc0 	.word	0x08010fc0
 800d508:	3ff00000 	.word	0x3ff00000
 800d50c:	40240000 	.word	0x40240000
 800d510:	401c0000 	.word	0x401c0000
 800d514:	40140000 	.word	0x40140000
 800d518:	3fe00000 	.word	0x3fe00000
 800d51c:	4631      	mov	r1, r6
 800d51e:	4628      	mov	r0, r5
 800d520:	f7f3 f86a 	bl	80005f8 <__aeabi_dmul>
 800d524:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d528:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d52a:	4656      	mov	r6, sl
 800d52c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d530:	f7f3 fb12 	bl	8000b58 <__aeabi_d2iz>
 800d534:	4605      	mov	r5, r0
 800d536:	f7f2 fff5 	bl	8000524 <__aeabi_i2d>
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d542:	f7f2 fea1 	bl	8000288 <__aeabi_dsub>
 800d546:	3530      	adds	r5, #48	@ 0x30
 800d548:	f806 5b01 	strb.w	r5, [r6], #1
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	42a6      	cmp	r6, r4
 800d552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d556:	f04f 0200 	mov.w	r2, #0
 800d55a:	d124      	bne.n	800d5a6 <_dtoa_r+0x626>
 800d55c:	4baf      	ldr	r3, [pc, #700]	@ (800d81c <_dtoa_r+0x89c>)
 800d55e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d562:	f7f2 fe93 	bl	800028c <__adddf3>
 800d566:	4602      	mov	r2, r0
 800d568:	460b      	mov	r3, r1
 800d56a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d56e:	f7f3 fad3 	bl	8000b18 <__aeabi_dcmpgt>
 800d572:	2800      	cmp	r0, #0
 800d574:	d163      	bne.n	800d63e <_dtoa_r+0x6be>
 800d576:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d57a:	49a8      	ldr	r1, [pc, #672]	@ (800d81c <_dtoa_r+0x89c>)
 800d57c:	2000      	movs	r0, #0
 800d57e:	f7f2 fe83 	bl	8000288 <__aeabi_dsub>
 800d582:	4602      	mov	r2, r0
 800d584:	460b      	mov	r3, r1
 800d586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d58a:	f7f3 faa7 	bl	8000adc <__aeabi_dcmplt>
 800d58e:	2800      	cmp	r0, #0
 800d590:	f43f af14 	beq.w	800d3bc <_dtoa_r+0x43c>
 800d594:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d596:	1e73      	subs	r3, r6, #1
 800d598:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d59a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d59e:	2b30      	cmp	r3, #48	@ 0x30
 800d5a0:	d0f8      	beq.n	800d594 <_dtoa_r+0x614>
 800d5a2:	4647      	mov	r7, r8
 800d5a4:	e03b      	b.n	800d61e <_dtoa_r+0x69e>
 800d5a6:	4b9e      	ldr	r3, [pc, #632]	@ (800d820 <_dtoa_r+0x8a0>)
 800d5a8:	f7f3 f826 	bl	80005f8 <__aeabi_dmul>
 800d5ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5b0:	e7bc      	b.n	800d52c <_dtoa_r+0x5ac>
 800d5b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d5b6:	4656      	mov	r6, sl
 800d5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f3 f944 	bl	800084c <__aeabi_ddiv>
 800d5c4:	f7f3 fac8 	bl	8000b58 <__aeabi_d2iz>
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	f7f2 ffab 	bl	8000524 <__aeabi_i2d>
 800d5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5d2:	f7f3 f811 	bl	80005f8 <__aeabi_dmul>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	4620      	mov	r0, r4
 800d5dc:	4629      	mov	r1, r5
 800d5de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5e2:	f7f2 fe51 	bl	8000288 <__aeabi_dsub>
 800d5e6:	f806 4b01 	strb.w	r4, [r6], #1
 800d5ea:	9d03      	ldr	r5, [sp, #12]
 800d5ec:	eba6 040a 	sub.w	r4, r6, sl
 800d5f0:	42a5      	cmp	r5, r4
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	d133      	bne.n	800d660 <_dtoa_r+0x6e0>
 800d5f8:	f7f2 fe48 	bl	800028c <__adddf3>
 800d5fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d600:	4604      	mov	r4, r0
 800d602:	460d      	mov	r5, r1
 800d604:	f7f3 fa88 	bl	8000b18 <__aeabi_dcmpgt>
 800d608:	b9c0      	cbnz	r0, 800d63c <_dtoa_r+0x6bc>
 800d60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d60e:	4620      	mov	r0, r4
 800d610:	4629      	mov	r1, r5
 800d612:	f7f3 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 800d616:	b110      	cbz	r0, 800d61e <_dtoa_r+0x69e>
 800d618:	f018 0f01 	tst.w	r8, #1
 800d61c:	d10e      	bne.n	800d63c <_dtoa_r+0x6bc>
 800d61e:	9902      	ldr	r1, [sp, #8]
 800d620:	4648      	mov	r0, r9
 800d622:	f000 fbbd 	bl	800dda0 <_Bfree>
 800d626:	2300      	movs	r3, #0
 800d628:	7033      	strb	r3, [r6, #0]
 800d62a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d62c:	3701      	adds	r7, #1
 800d62e:	601f      	str	r7, [r3, #0]
 800d630:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 824b 	beq.w	800dace <_dtoa_r+0xb4e>
 800d638:	601e      	str	r6, [r3, #0]
 800d63a:	e248      	b.n	800dace <_dtoa_r+0xb4e>
 800d63c:	46b8      	mov	r8, r7
 800d63e:	4633      	mov	r3, r6
 800d640:	461e      	mov	r6, r3
 800d642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d646:	2a39      	cmp	r2, #57	@ 0x39
 800d648:	d106      	bne.n	800d658 <_dtoa_r+0x6d8>
 800d64a:	459a      	cmp	sl, r3
 800d64c:	d1f8      	bne.n	800d640 <_dtoa_r+0x6c0>
 800d64e:	2230      	movs	r2, #48	@ 0x30
 800d650:	f108 0801 	add.w	r8, r8, #1
 800d654:	f88a 2000 	strb.w	r2, [sl]
 800d658:	781a      	ldrb	r2, [r3, #0]
 800d65a:	3201      	adds	r2, #1
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	e7a0      	b.n	800d5a2 <_dtoa_r+0x622>
 800d660:	4b6f      	ldr	r3, [pc, #444]	@ (800d820 <_dtoa_r+0x8a0>)
 800d662:	2200      	movs	r2, #0
 800d664:	f7f2 ffc8 	bl	80005f8 <__aeabi_dmul>
 800d668:	2200      	movs	r2, #0
 800d66a:	2300      	movs	r3, #0
 800d66c:	4604      	mov	r4, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	f7f3 fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d674:	2800      	cmp	r0, #0
 800d676:	d09f      	beq.n	800d5b8 <_dtoa_r+0x638>
 800d678:	e7d1      	b.n	800d61e <_dtoa_r+0x69e>
 800d67a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d67c:	2a00      	cmp	r2, #0
 800d67e:	f000 80ea 	beq.w	800d856 <_dtoa_r+0x8d6>
 800d682:	9a07      	ldr	r2, [sp, #28]
 800d684:	2a01      	cmp	r2, #1
 800d686:	f300 80cd 	bgt.w	800d824 <_dtoa_r+0x8a4>
 800d68a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d68c:	2a00      	cmp	r2, #0
 800d68e:	f000 80c1 	beq.w	800d814 <_dtoa_r+0x894>
 800d692:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d696:	9c08      	ldr	r4, [sp, #32]
 800d698:	9e00      	ldr	r6, [sp, #0]
 800d69a:	9a00      	ldr	r2, [sp, #0]
 800d69c:	441a      	add	r2, r3
 800d69e:	9200      	str	r2, [sp, #0]
 800d6a0:	9a06      	ldr	r2, [sp, #24]
 800d6a2:	2101      	movs	r1, #1
 800d6a4:	441a      	add	r2, r3
 800d6a6:	4648      	mov	r0, r9
 800d6a8:	9206      	str	r2, [sp, #24]
 800d6aa:	f000 fc77 	bl	800df9c <__i2b>
 800d6ae:	4605      	mov	r5, r0
 800d6b0:	b166      	cbz	r6, 800d6cc <_dtoa_r+0x74c>
 800d6b2:	9b06      	ldr	r3, [sp, #24]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	dd09      	ble.n	800d6cc <_dtoa_r+0x74c>
 800d6b8:	42b3      	cmp	r3, r6
 800d6ba:	9a00      	ldr	r2, [sp, #0]
 800d6bc:	bfa8      	it	ge
 800d6be:	4633      	movge	r3, r6
 800d6c0:	1ad2      	subs	r2, r2, r3
 800d6c2:	9200      	str	r2, [sp, #0]
 800d6c4:	9a06      	ldr	r2, [sp, #24]
 800d6c6:	1af6      	subs	r6, r6, r3
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	9306      	str	r3, [sp, #24]
 800d6cc:	9b08      	ldr	r3, [sp, #32]
 800d6ce:	b30b      	cbz	r3, 800d714 <_dtoa_r+0x794>
 800d6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 80c6 	beq.w	800d864 <_dtoa_r+0x8e4>
 800d6d8:	2c00      	cmp	r4, #0
 800d6da:	f000 80c0 	beq.w	800d85e <_dtoa_r+0x8de>
 800d6de:	4629      	mov	r1, r5
 800d6e0:	4622      	mov	r2, r4
 800d6e2:	4648      	mov	r0, r9
 800d6e4:	f000 fd12 	bl	800e10c <__pow5mult>
 800d6e8:	9a02      	ldr	r2, [sp, #8]
 800d6ea:	4601      	mov	r1, r0
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	4648      	mov	r0, r9
 800d6f0:	f000 fc6a 	bl	800dfc8 <__multiply>
 800d6f4:	9902      	ldr	r1, [sp, #8]
 800d6f6:	4680      	mov	r8, r0
 800d6f8:	4648      	mov	r0, r9
 800d6fa:	f000 fb51 	bl	800dda0 <_Bfree>
 800d6fe:	9b08      	ldr	r3, [sp, #32]
 800d700:	1b1b      	subs	r3, r3, r4
 800d702:	9308      	str	r3, [sp, #32]
 800d704:	f000 80b1 	beq.w	800d86a <_dtoa_r+0x8ea>
 800d708:	9a08      	ldr	r2, [sp, #32]
 800d70a:	4641      	mov	r1, r8
 800d70c:	4648      	mov	r0, r9
 800d70e:	f000 fcfd 	bl	800e10c <__pow5mult>
 800d712:	9002      	str	r0, [sp, #8]
 800d714:	2101      	movs	r1, #1
 800d716:	4648      	mov	r0, r9
 800d718:	f000 fc40 	bl	800df9c <__i2b>
 800d71c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d71e:	4604      	mov	r4, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 81d8 	beq.w	800dad6 <_dtoa_r+0xb56>
 800d726:	461a      	mov	r2, r3
 800d728:	4601      	mov	r1, r0
 800d72a:	4648      	mov	r0, r9
 800d72c:	f000 fcee 	bl	800e10c <__pow5mult>
 800d730:	9b07      	ldr	r3, [sp, #28]
 800d732:	2b01      	cmp	r3, #1
 800d734:	4604      	mov	r4, r0
 800d736:	f300 809f 	bgt.w	800d878 <_dtoa_r+0x8f8>
 800d73a:	9b04      	ldr	r3, [sp, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f040 8097 	bne.w	800d870 <_dtoa_r+0x8f0>
 800d742:	9b05      	ldr	r3, [sp, #20]
 800d744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d748:	2b00      	cmp	r3, #0
 800d74a:	f040 8093 	bne.w	800d874 <_dtoa_r+0x8f4>
 800d74e:	9b05      	ldr	r3, [sp, #20]
 800d750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d754:	0d1b      	lsrs	r3, r3, #20
 800d756:	051b      	lsls	r3, r3, #20
 800d758:	b133      	cbz	r3, 800d768 <_dtoa_r+0x7e8>
 800d75a:	9b00      	ldr	r3, [sp, #0]
 800d75c:	3301      	adds	r3, #1
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	9b06      	ldr	r3, [sp, #24]
 800d762:	3301      	adds	r3, #1
 800d764:	9306      	str	r3, [sp, #24]
 800d766:	2301      	movs	r3, #1
 800d768:	9308      	str	r3, [sp, #32]
 800d76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f000 81b8 	beq.w	800dae2 <_dtoa_r+0xb62>
 800d772:	6923      	ldr	r3, [r4, #16]
 800d774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d778:	6918      	ldr	r0, [r3, #16]
 800d77a:	f000 fbc3 	bl	800df04 <__hi0bits>
 800d77e:	f1c0 0020 	rsb	r0, r0, #32
 800d782:	9b06      	ldr	r3, [sp, #24]
 800d784:	4418      	add	r0, r3
 800d786:	f010 001f 	ands.w	r0, r0, #31
 800d78a:	f000 8082 	beq.w	800d892 <_dtoa_r+0x912>
 800d78e:	f1c0 0320 	rsb	r3, r0, #32
 800d792:	2b04      	cmp	r3, #4
 800d794:	dd73      	ble.n	800d87e <_dtoa_r+0x8fe>
 800d796:	9b00      	ldr	r3, [sp, #0]
 800d798:	f1c0 001c 	rsb	r0, r0, #28
 800d79c:	4403      	add	r3, r0
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	9b06      	ldr	r3, [sp, #24]
 800d7a2:	4403      	add	r3, r0
 800d7a4:	4406      	add	r6, r0
 800d7a6:	9306      	str	r3, [sp, #24]
 800d7a8:	9b00      	ldr	r3, [sp, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dd05      	ble.n	800d7ba <_dtoa_r+0x83a>
 800d7ae:	9902      	ldr	r1, [sp, #8]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	f000 fd04 	bl	800e1c0 <__lshift>
 800d7b8:	9002      	str	r0, [sp, #8]
 800d7ba:	9b06      	ldr	r3, [sp, #24]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dd05      	ble.n	800d7cc <_dtoa_r+0x84c>
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	4648      	mov	r0, r9
 800d7c6:	f000 fcfb 	bl	800e1c0 <__lshift>
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d061      	beq.n	800d896 <_dtoa_r+0x916>
 800d7d2:	9802      	ldr	r0, [sp, #8]
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	f000 fd5f 	bl	800e298 <__mcmp>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	da5b      	bge.n	800d896 <_dtoa_r+0x916>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	9902      	ldr	r1, [sp, #8]
 800d7e2:	220a      	movs	r2, #10
 800d7e4:	4648      	mov	r0, r9
 800d7e6:	f000 fafd 	bl	800dde4 <__multadd>
 800d7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ec:	9002      	str	r0, [sp, #8]
 800d7ee:	f107 38ff 	add.w	r8, r7, #4294967295
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 8177 	beq.w	800dae6 <_dtoa_r+0xb66>
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	220a      	movs	r2, #10
 800d7fe:	4648      	mov	r0, r9
 800d800:	f000 faf0 	bl	800dde4 <__multadd>
 800d804:	f1bb 0f00 	cmp.w	fp, #0
 800d808:	4605      	mov	r5, r0
 800d80a:	dc6f      	bgt.n	800d8ec <_dtoa_r+0x96c>
 800d80c:	9b07      	ldr	r3, [sp, #28]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	dc49      	bgt.n	800d8a6 <_dtoa_r+0x926>
 800d812:	e06b      	b.n	800d8ec <_dtoa_r+0x96c>
 800d814:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d816:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d81a:	e73c      	b.n	800d696 <_dtoa_r+0x716>
 800d81c:	3fe00000 	.word	0x3fe00000
 800d820:	40240000 	.word	0x40240000
 800d824:	9b03      	ldr	r3, [sp, #12]
 800d826:	1e5c      	subs	r4, r3, #1
 800d828:	9b08      	ldr	r3, [sp, #32]
 800d82a:	42a3      	cmp	r3, r4
 800d82c:	db09      	blt.n	800d842 <_dtoa_r+0x8c2>
 800d82e:	1b1c      	subs	r4, r3, r4
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f6bf af30 	bge.w	800d698 <_dtoa_r+0x718>
 800d838:	9b00      	ldr	r3, [sp, #0]
 800d83a:	9a03      	ldr	r2, [sp, #12]
 800d83c:	1a9e      	subs	r6, r3, r2
 800d83e:	2300      	movs	r3, #0
 800d840:	e72b      	b.n	800d69a <_dtoa_r+0x71a>
 800d842:	9b08      	ldr	r3, [sp, #32]
 800d844:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d846:	9408      	str	r4, [sp, #32]
 800d848:	1ae3      	subs	r3, r4, r3
 800d84a:	441a      	add	r2, r3
 800d84c:	9e00      	ldr	r6, [sp, #0]
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	920d      	str	r2, [sp, #52]	@ 0x34
 800d852:	2400      	movs	r4, #0
 800d854:	e721      	b.n	800d69a <_dtoa_r+0x71a>
 800d856:	9c08      	ldr	r4, [sp, #32]
 800d858:	9e00      	ldr	r6, [sp, #0]
 800d85a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d85c:	e728      	b.n	800d6b0 <_dtoa_r+0x730>
 800d85e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d862:	e751      	b.n	800d708 <_dtoa_r+0x788>
 800d864:	9a08      	ldr	r2, [sp, #32]
 800d866:	9902      	ldr	r1, [sp, #8]
 800d868:	e750      	b.n	800d70c <_dtoa_r+0x78c>
 800d86a:	f8cd 8008 	str.w	r8, [sp, #8]
 800d86e:	e751      	b.n	800d714 <_dtoa_r+0x794>
 800d870:	2300      	movs	r3, #0
 800d872:	e779      	b.n	800d768 <_dtoa_r+0x7e8>
 800d874:	9b04      	ldr	r3, [sp, #16]
 800d876:	e777      	b.n	800d768 <_dtoa_r+0x7e8>
 800d878:	2300      	movs	r3, #0
 800d87a:	9308      	str	r3, [sp, #32]
 800d87c:	e779      	b.n	800d772 <_dtoa_r+0x7f2>
 800d87e:	d093      	beq.n	800d7a8 <_dtoa_r+0x828>
 800d880:	9a00      	ldr	r2, [sp, #0]
 800d882:	331c      	adds	r3, #28
 800d884:	441a      	add	r2, r3
 800d886:	9200      	str	r2, [sp, #0]
 800d888:	9a06      	ldr	r2, [sp, #24]
 800d88a:	441a      	add	r2, r3
 800d88c:	441e      	add	r6, r3
 800d88e:	9206      	str	r2, [sp, #24]
 800d890:	e78a      	b.n	800d7a8 <_dtoa_r+0x828>
 800d892:	4603      	mov	r3, r0
 800d894:	e7f4      	b.n	800d880 <_dtoa_r+0x900>
 800d896:	9b03      	ldr	r3, [sp, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	46b8      	mov	r8, r7
 800d89c:	dc20      	bgt.n	800d8e0 <_dtoa_r+0x960>
 800d89e:	469b      	mov	fp, r3
 800d8a0:	9b07      	ldr	r3, [sp, #28]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	dd1e      	ble.n	800d8e4 <_dtoa_r+0x964>
 800d8a6:	f1bb 0f00 	cmp.w	fp, #0
 800d8aa:	f47f adb1 	bne.w	800d410 <_dtoa_r+0x490>
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	465b      	mov	r3, fp
 800d8b2:	2205      	movs	r2, #5
 800d8b4:	4648      	mov	r0, r9
 800d8b6:	f000 fa95 	bl	800dde4 <__multadd>
 800d8ba:	4601      	mov	r1, r0
 800d8bc:	4604      	mov	r4, r0
 800d8be:	9802      	ldr	r0, [sp, #8]
 800d8c0:	f000 fcea 	bl	800e298 <__mcmp>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	f77f ada3 	ble.w	800d410 <_dtoa_r+0x490>
 800d8ca:	4656      	mov	r6, sl
 800d8cc:	2331      	movs	r3, #49	@ 0x31
 800d8ce:	f806 3b01 	strb.w	r3, [r6], #1
 800d8d2:	f108 0801 	add.w	r8, r8, #1
 800d8d6:	e59f      	b.n	800d418 <_dtoa_r+0x498>
 800d8d8:	9c03      	ldr	r4, [sp, #12]
 800d8da:	46b8      	mov	r8, r7
 800d8dc:	4625      	mov	r5, r4
 800d8de:	e7f4      	b.n	800d8ca <_dtoa_r+0x94a>
 800d8e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f000 8101 	beq.w	800daee <_dtoa_r+0xb6e>
 800d8ec:	2e00      	cmp	r6, #0
 800d8ee:	dd05      	ble.n	800d8fc <_dtoa_r+0x97c>
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	4648      	mov	r0, r9
 800d8f6:	f000 fc63 	bl	800e1c0 <__lshift>
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	9b08      	ldr	r3, [sp, #32]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d05c      	beq.n	800d9bc <_dtoa_r+0xa3c>
 800d902:	6869      	ldr	r1, [r5, #4]
 800d904:	4648      	mov	r0, r9
 800d906:	f000 fa0b 	bl	800dd20 <_Balloc>
 800d90a:	4606      	mov	r6, r0
 800d90c:	b928      	cbnz	r0, 800d91a <_dtoa_r+0x99a>
 800d90e:	4b82      	ldr	r3, [pc, #520]	@ (800db18 <_dtoa_r+0xb98>)
 800d910:	4602      	mov	r2, r0
 800d912:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d916:	f7ff bb4a 	b.w	800cfae <_dtoa_r+0x2e>
 800d91a:	692a      	ldr	r2, [r5, #16]
 800d91c:	3202      	adds	r2, #2
 800d91e:	0092      	lsls	r2, r2, #2
 800d920:	f105 010c 	add.w	r1, r5, #12
 800d924:	300c      	adds	r0, #12
 800d926:	f7ff fa6e 	bl	800ce06 <memcpy>
 800d92a:	2201      	movs	r2, #1
 800d92c:	4631      	mov	r1, r6
 800d92e:	4648      	mov	r0, r9
 800d930:	f000 fc46 	bl	800e1c0 <__lshift>
 800d934:	f10a 0301 	add.w	r3, sl, #1
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	eb0a 030b 	add.w	r3, sl, fp
 800d93e:	9308      	str	r3, [sp, #32]
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	f003 0301 	and.w	r3, r3, #1
 800d946:	462f      	mov	r7, r5
 800d948:	9306      	str	r3, [sp, #24]
 800d94a:	4605      	mov	r5, r0
 800d94c:	9b00      	ldr	r3, [sp, #0]
 800d94e:	9802      	ldr	r0, [sp, #8]
 800d950:	4621      	mov	r1, r4
 800d952:	f103 3bff 	add.w	fp, r3, #4294967295
 800d956:	f7ff fa89 	bl	800ce6c <quorem>
 800d95a:	4603      	mov	r3, r0
 800d95c:	3330      	adds	r3, #48	@ 0x30
 800d95e:	9003      	str	r0, [sp, #12]
 800d960:	4639      	mov	r1, r7
 800d962:	9802      	ldr	r0, [sp, #8]
 800d964:	9309      	str	r3, [sp, #36]	@ 0x24
 800d966:	f000 fc97 	bl	800e298 <__mcmp>
 800d96a:	462a      	mov	r2, r5
 800d96c:	9004      	str	r0, [sp, #16]
 800d96e:	4621      	mov	r1, r4
 800d970:	4648      	mov	r0, r9
 800d972:	f000 fcad 	bl	800e2d0 <__mdiff>
 800d976:	68c2      	ldr	r2, [r0, #12]
 800d978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d97a:	4606      	mov	r6, r0
 800d97c:	bb02      	cbnz	r2, 800d9c0 <_dtoa_r+0xa40>
 800d97e:	4601      	mov	r1, r0
 800d980:	9802      	ldr	r0, [sp, #8]
 800d982:	f000 fc89 	bl	800e298 <__mcmp>
 800d986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d988:	4602      	mov	r2, r0
 800d98a:	4631      	mov	r1, r6
 800d98c:	4648      	mov	r0, r9
 800d98e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d990:	9309      	str	r3, [sp, #36]	@ 0x24
 800d992:	f000 fa05 	bl	800dda0 <_Bfree>
 800d996:	9b07      	ldr	r3, [sp, #28]
 800d998:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d99a:	9e00      	ldr	r6, [sp, #0]
 800d99c:	ea42 0103 	orr.w	r1, r2, r3
 800d9a0:	9b06      	ldr	r3, [sp, #24]
 800d9a2:	4319      	orrs	r1, r3
 800d9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a6:	d10d      	bne.n	800d9c4 <_dtoa_r+0xa44>
 800d9a8:	2b39      	cmp	r3, #57	@ 0x39
 800d9aa:	d027      	beq.n	800d9fc <_dtoa_r+0xa7c>
 800d9ac:	9a04      	ldr	r2, [sp, #16]
 800d9ae:	2a00      	cmp	r2, #0
 800d9b0:	dd01      	ble.n	800d9b6 <_dtoa_r+0xa36>
 800d9b2:	9b03      	ldr	r3, [sp, #12]
 800d9b4:	3331      	adds	r3, #49	@ 0x31
 800d9b6:	f88b 3000 	strb.w	r3, [fp]
 800d9ba:	e52e      	b.n	800d41a <_dtoa_r+0x49a>
 800d9bc:	4628      	mov	r0, r5
 800d9be:	e7b9      	b.n	800d934 <_dtoa_r+0x9b4>
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	e7e2      	b.n	800d98a <_dtoa_r+0xa0a>
 800d9c4:	9904      	ldr	r1, [sp, #16]
 800d9c6:	2900      	cmp	r1, #0
 800d9c8:	db04      	blt.n	800d9d4 <_dtoa_r+0xa54>
 800d9ca:	9807      	ldr	r0, [sp, #28]
 800d9cc:	4301      	orrs	r1, r0
 800d9ce:	9806      	ldr	r0, [sp, #24]
 800d9d0:	4301      	orrs	r1, r0
 800d9d2:	d120      	bne.n	800da16 <_dtoa_r+0xa96>
 800d9d4:	2a00      	cmp	r2, #0
 800d9d6:	ddee      	ble.n	800d9b6 <_dtoa_r+0xa36>
 800d9d8:	9902      	ldr	r1, [sp, #8]
 800d9da:	9300      	str	r3, [sp, #0]
 800d9dc:	2201      	movs	r2, #1
 800d9de:	4648      	mov	r0, r9
 800d9e0:	f000 fbee 	bl	800e1c0 <__lshift>
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	9002      	str	r0, [sp, #8]
 800d9e8:	f000 fc56 	bl	800e298 <__mcmp>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	9b00      	ldr	r3, [sp, #0]
 800d9f0:	dc02      	bgt.n	800d9f8 <_dtoa_r+0xa78>
 800d9f2:	d1e0      	bne.n	800d9b6 <_dtoa_r+0xa36>
 800d9f4:	07da      	lsls	r2, r3, #31
 800d9f6:	d5de      	bpl.n	800d9b6 <_dtoa_r+0xa36>
 800d9f8:	2b39      	cmp	r3, #57	@ 0x39
 800d9fa:	d1da      	bne.n	800d9b2 <_dtoa_r+0xa32>
 800d9fc:	2339      	movs	r3, #57	@ 0x39
 800d9fe:	f88b 3000 	strb.w	r3, [fp]
 800da02:	4633      	mov	r3, r6
 800da04:	461e      	mov	r6, r3
 800da06:	3b01      	subs	r3, #1
 800da08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da0c:	2a39      	cmp	r2, #57	@ 0x39
 800da0e:	d04e      	beq.n	800daae <_dtoa_r+0xb2e>
 800da10:	3201      	adds	r2, #1
 800da12:	701a      	strb	r2, [r3, #0]
 800da14:	e501      	b.n	800d41a <_dtoa_r+0x49a>
 800da16:	2a00      	cmp	r2, #0
 800da18:	dd03      	ble.n	800da22 <_dtoa_r+0xaa2>
 800da1a:	2b39      	cmp	r3, #57	@ 0x39
 800da1c:	d0ee      	beq.n	800d9fc <_dtoa_r+0xa7c>
 800da1e:	3301      	adds	r3, #1
 800da20:	e7c9      	b.n	800d9b6 <_dtoa_r+0xa36>
 800da22:	9a00      	ldr	r2, [sp, #0]
 800da24:	9908      	ldr	r1, [sp, #32]
 800da26:	f802 3c01 	strb.w	r3, [r2, #-1]
 800da2a:	428a      	cmp	r2, r1
 800da2c:	d028      	beq.n	800da80 <_dtoa_r+0xb00>
 800da2e:	9902      	ldr	r1, [sp, #8]
 800da30:	2300      	movs	r3, #0
 800da32:	220a      	movs	r2, #10
 800da34:	4648      	mov	r0, r9
 800da36:	f000 f9d5 	bl	800dde4 <__multadd>
 800da3a:	42af      	cmp	r7, r5
 800da3c:	9002      	str	r0, [sp, #8]
 800da3e:	f04f 0300 	mov.w	r3, #0
 800da42:	f04f 020a 	mov.w	r2, #10
 800da46:	4639      	mov	r1, r7
 800da48:	4648      	mov	r0, r9
 800da4a:	d107      	bne.n	800da5c <_dtoa_r+0xadc>
 800da4c:	f000 f9ca 	bl	800dde4 <__multadd>
 800da50:	4607      	mov	r7, r0
 800da52:	4605      	mov	r5, r0
 800da54:	9b00      	ldr	r3, [sp, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	e777      	b.n	800d94c <_dtoa_r+0x9cc>
 800da5c:	f000 f9c2 	bl	800dde4 <__multadd>
 800da60:	4629      	mov	r1, r5
 800da62:	4607      	mov	r7, r0
 800da64:	2300      	movs	r3, #0
 800da66:	220a      	movs	r2, #10
 800da68:	4648      	mov	r0, r9
 800da6a:	f000 f9bb 	bl	800dde4 <__multadd>
 800da6e:	4605      	mov	r5, r0
 800da70:	e7f0      	b.n	800da54 <_dtoa_r+0xad4>
 800da72:	f1bb 0f00 	cmp.w	fp, #0
 800da76:	bfcc      	ite	gt
 800da78:	465e      	movgt	r6, fp
 800da7a:	2601      	movle	r6, #1
 800da7c:	4456      	add	r6, sl
 800da7e:	2700      	movs	r7, #0
 800da80:	9902      	ldr	r1, [sp, #8]
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	2201      	movs	r2, #1
 800da86:	4648      	mov	r0, r9
 800da88:	f000 fb9a 	bl	800e1c0 <__lshift>
 800da8c:	4621      	mov	r1, r4
 800da8e:	9002      	str	r0, [sp, #8]
 800da90:	f000 fc02 	bl	800e298 <__mcmp>
 800da94:	2800      	cmp	r0, #0
 800da96:	dcb4      	bgt.n	800da02 <_dtoa_r+0xa82>
 800da98:	d102      	bne.n	800daa0 <_dtoa_r+0xb20>
 800da9a:	9b00      	ldr	r3, [sp, #0]
 800da9c:	07db      	lsls	r3, r3, #31
 800da9e:	d4b0      	bmi.n	800da02 <_dtoa_r+0xa82>
 800daa0:	4633      	mov	r3, r6
 800daa2:	461e      	mov	r6, r3
 800daa4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800daa8:	2a30      	cmp	r2, #48	@ 0x30
 800daaa:	d0fa      	beq.n	800daa2 <_dtoa_r+0xb22>
 800daac:	e4b5      	b.n	800d41a <_dtoa_r+0x49a>
 800daae:	459a      	cmp	sl, r3
 800dab0:	d1a8      	bne.n	800da04 <_dtoa_r+0xa84>
 800dab2:	2331      	movs	r3, #49	@ 0x31
 800dab4:	f108 0801 	add.w	r8, r8, #1
 800dab8:	f88a 3000 	strb.w	r3, [sl]
 800dabc:	e4ad      	b.n	800d41a <_dtoa_r+0x49a>
 800dabe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dac0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800db1c <_dtoa_r+0xb9c>
 800dac4:	b11b      	cbz	r3, 800dace <_dtoa_r+0xb4e>
 800dac6:	f10a 0308 	add.w	r3, sl, #8
 800daca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dacc:	6013      	str	r3, [r2, #0]
 800dace:	4650      	mov	r0, sl
 800dad0:	b017      	add	sp, #92	@ 0x5c
 800dad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad6:	9b07      	ldr	r3, [sp, #28]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	f77f ae2e 	ble.w	800d73a <_dtoa_r+0x7ba>
 800dade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dae0:	9308      	str	r3, [sp, #32]
 800dae2:	2001      	movs	r0, #1
 800dae4:	e64d      	b.n	800d782 <_dtoa_r+0x802>
 800dae6:	f1bb 0f00 	cmp.w	fp, #0
 800daea:	f77f aed9 	ble.w	800d8a0 <_dtoa_r+0x920>
 800daee:	4656      	mov	r6, sl
 800daf0:	9802      	ldr	r0, [sp, #8]
 800daf2:	4621      	mov	r1, r4
 800daf4:	f7ff f9ba 	bl	800ce6c <quorem>
 800daf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dafc:	f806 3b01 	strb.w	r3, [r6], #1
 800db00:	eba6 020a 	sub.w	r2, r6, sl
 800db04:	4593      	cmp	fp, r2
 800db06:	ddb4      	ble.n	800da72 <_dtoa_r+0xaf2>
 800db08:	9902      	ldr	r1, [sp, #8]
 800db0a:	2300      	movs	r3, #0
 800db0c:	220a      	movs	r2, #10
 800db0e:	4648      	mov	r0, r9
 800db10:	f000 f968 	bl	800dde4 <__multadd>
 800db14:	9002      	str	r0, [sp, #8]
 800db16:	e7eb      	b.n	800daf0 <_dtoa_r+0xb70>
 800db18:	08010ecd 	.word	0x08010ecd
 800db1c:	08010e68 	.word	0x08010e68

0800db20 <_free_r>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4605      	mov	r5, r0
 800db24:	2900      	cmp	r1, #0
 800db26:	d041      	beq.n	800dbac <_free_r+0x8c>
 800db28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db2c:	1f0c      	subs	r4, r1, #4
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bfb8      	it	lt
 800db32:	18e4      	addlt	r4, r4, r3
 800db34:	f000 f8e8 	bl	800dd08 <__malloc_lock>
 800db38:	4a1d      	ldr	r2, [pc, #116]	@ (800dbb0 <_free_r+0x90>)
 800db3a:	6813      	ldr	r3, [r2, #0]
 800db3c:	b933      	cbnz	r3, 800db4c <_free_r+0x2c>
 800db3e:	6063      	str	r3, [r4, #4]
 800db40:	6014      	str	r4, [r2, #0]
 800db42:	4628      	mov	r0, r5
 800db44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db48:	f000 b8e4 	b.w	800dd14 <__malloc_unlock>
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	d908      	bls.n	800db62 <_free_r+0x42>
 800db50:	6820      	ldr	r0, [r4, #0]
 800db52:	1821      	adds	r1, r4, r0
 800db54:	428b      	cmp	r3, r1
 800db56:	bf01      	itttt	eq
 800db58:	6819      	ldreq	r1, [r3, #0]
 800db5a:	685b      	ldreq	r3, [r3, #4]
 800db5c:	1809      	addeq	r1, r1, r0
 800db5e:	6021      	streq	r1, [r4, #0]
 800db60:	e7ed      	b.n	800db3e <_free_r+0x1e>
 800db62:	461a      	mov	r2, r3
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	b10b      	cbz	r3, 800db6c <_free_r+0x4c>
 800db68:	42a3      	cmp	r3, r4
 800db6a:	d9fa      	bls.n	800db62 <_free_r+0x42>
 800db6c:	6811      	ldr	r1, [r2, #0]
 800db6e:	1850      	adds	r0, r2, r1
 800db70:	42a0      	cmp	r0, r4
 800db72:	d10b      	bne.n	800db8c <_free_r+0x6c>
 800db74:	6820      	ldr	r0, [r4, #0]
 800db76:	4401      	add	r1, r0
 800db78:	1850      	adds	r0, r2, r1
 800db7a:	4283      	cmp	r3, r0
 800db7c:	6011      	str	r1, [r2, #0]
 800db7e:	d1e0      	bne.n	800db42 <_free_r+0x22>
 800db80:	6818      	ldr	r0, [r3, #0]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	6053      	str	r3, [r2, #4]
 800db86:	4408      	add	r0, r1
 800db88:	6010      	str	r0, [r2, #0]
 800db8a:	e7da      	b.n	800db42 <_free_r+0x22>
 800db8c:	d902      	bls.n	800db94 <_free_r+0x74>
 800db8e:	230c      	movs	r3, #12
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	e7d6      	b.n	800db42 <_free_r+0x22>
 800db94:	6820      	ldr	r0, [r4, #0]
 800db96:	1821      	adds	r1, r4, r0
 800db98:	428b      	cmp	r3, r1
 800db9a:	bf04      	itt	eq
 800db9c:	6819      	ldreq	r1, [r3, #0]
 800db9e:	685b      	ldreq	r3, [r3, #4]
 800dba0:	6063      	str	r3, [r4, #4]
 800dba2:	bf04      	itt	eq
 800dba4:	1809      	addeq	r1, r1, r0
 800dba6:	6021      	streq	r1, [r4, #0]
 800dba8:	6054      	str	r4, [r2, #4]
 800dbaa:	e7ca      	b.n	800db42 <_free_r+0x22>
 800dbac:	bd38      	pop	{r3, r4, r5, pc}
 800dbae:	bf00      	nop
 800dbb0:	200035b8 	.word	0x200035b8

0800dbb4 <malloc>:
 800dbb4:	4b02      	ldr	r3, [pc, #8]	@ (800dbc0 <malloc+0xc>)
 800dbb6:	4601      	mov	r1, r0
 800dbb8:	6818      	ldr	r0, [r3, #0]
 800dbba:	f000 b825 	b.w	800dc08 <_malloc_r>
 800dbbe:	bf00      	nop
 800dbc0:	20000090 	.word	0x20000090

0800dbc4 <sbrk_aligned>:
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	4e0f      	ldr	r6, [pc, #60]	@ (800dc04 <sbrk_aligned+0x40>)
 800dbc8:	460c      	mov	r4, r1
 800dbca:	6831      	ldr	r1, [r6, #0]
 800dbcc:	4605      	mov	r5, r0
 800dbce:	b911      	cbnz	r1, 800dbd6 <sbrk_aligned+0x12>
 800dbd0:	f001 ffca 	bl	800fb68 <_sbrk_r>
 800dbd4:	6030      	str	r0, [r6, #0]
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f001 ffc5 	bl	800fb68 <_sbrk_r>
 800dbde:	1c43      	adds	r3, r0, #1
 800dbe0:	d103      	bne.n	800dbea <sbrk_aligned+0x26>
 800dbe2:	f04f 34ff 	mov.w	r4, #4294967295
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	bd70      	pop	{r4, r5, r6, pc}
 800dbea:	1cc4      	adds	r4, r0, #3
 800dbec:	f024 0403 	bic.w	r4, r4, #3
 800dbf0:	42a0      	cmp	r0, r4
 800dbf2:	d0f8      	beq.n	800dbe6 <sbrk_aligned+0x22>
 800dbf4:	1a21      	subs	r1, r4, r0
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f001 ffb6 	bl	800fb68 <_sbrk_r>
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	d1f2      	bne.n	800dbe6 <sbrk_aligned+0x22>
 800dc00:	e7ef      	b.n	800dbe2 <sbrk_aligned+0x1e>
 800dc02:	bf00      	nop
 800dc04:	200035b4 	.word	0x200035b4

0800dc08 <_malloc_r>:
 800dc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc0c:	1ccd      	adds	r5, r1, #3
 800dc0e:	f025 0503 	bic.w	r5, r5, #3
 800dc12:	3508      	adds	r5, #8
 800dc14:	2d0c      	cmp	r5, #12
 800dc16:	bf38      	it	cc
 800dc18:	250c      	movcc	r5, #12
 800dc1a:	2d00      	cmp	r5, #0
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	db01      	blt.n	800dc24 <_malloc_r+0x1c>
 800dc20:	42a9      	cmp	r1, r5
 800dc22:	d904      	bls.n	800dc2e <_malloc_r+0x26>
 800dc24:	230c      	movs	r3, #12
 800dc26:	6033      	str	r3, [r6, #0]
 800dc28:	2000      	movs	r0, #0
 800dc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd04 <_malloc_r+0xfc>
 800dc32:	f000 f869 	bl	800dd08 <__malloc_lock>
 800dc36:	f8d8 3000 	ldr.w	r3, [r8]
 800dc3a:	461c      	mov	r4, r3
 800dc3c:	bb44      	cbnz	r4, 800dc90 <_malloc_r+0x88>
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4630      	mov	r0, r6
 800dc42:	f7ff ffbf 	bl	800dbc4 <sbrk_aligned>
 800dc46:	1c43      	adds	r3, r0, #1
 800dc48:	4604      	mov	r4, r0
 800dc4a:	d158      	bne.n	800dcfe <_malloc_r+0xf6>
 800dc4c:	f8d8 4000 	ldr.w	r4, [r8]
 800dc50:	4627      	mov	r7, r4
 800dc52:	2f00      	cmp	r7, #0
 800dc54:	d143      	bne.n	800dcde <_malloc_r+0xd6>
 800dc56:	2c00      	cmp	r4, #0
 800dc58:	d04b      	beq.n	800dcf2 <_malloc_r+0xea>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	4639      	mov	r1, r7
 800dc5e:	4630      	mov	r0, r6
 800dc60:	eb04 0903 	add.w	r9, r4, r3
 800dc64:	f001 ff80 	bl	800fb68 <_sbrk_r>
 800dc68:	4581      	cmp	r9, r0
 800dc6a:	d142      	bne.n	800dcf2 <_malloc_r+0xea>
 800dc6c:	6821      	ldr	r1, [r4, #0]
 800dc6e:	1a6d      	subs	r5, r5, r1
 800dc70:	4629      	mov	r1, r5
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7ff ffa6 	bl	800dbc4 <sbrk_aligned>
 800dc78:	3001      	adds	r0, #1
 800dc7a:	d03a      	beq.n	800dcf2 <_malloc_r+0xea>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	442b      	add	r3, r5
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	f8d8 3000 	ldr.w	r3, [r8]
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	bb62      	cbnz	r2, 800dce4 <_malloc_r+0xdc>
 800dc8a:	f8c8 7000 	str.w	r7, [r8]
 800dc8e:	e00f      	b.n	800dcb0 <_malloc_r+0xa8>
 800dc90:	6822      	ldr	r2, [r4, #0]
 800dc92:	1b52      	subs	r2, r2, r5
 800dc94:	d420      	bmi.n	800dcd8 <_malloc_r+0xd0>
 800dc96:	2a0b      	cmp	r2, #11
 800dc98:	d917      	bls.n	800dcca <_malloc_r+0xc2>
 800dc9a:	1961      	adds	r1, r4, r5
 800dc9c:	42a3      	cmp	r3, r4
 800dc9e:	6025      	str	r5, [r4, #0]
 800dca0:	bf18      	it	ne
 800dca2:	6059      	strne	r1, [r3, #4]
 800dca4:	6863      	ldr	r3, [r4, #4]
 800dca6:	bf08      	it	eq
 800dca8:	f8c8 1000 	streq.w	r1, [r8]
 800dcac:	5162      	str	r2, [r4, r5]
 800dcae:	604b      	str	r3, [r1, #4]
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f000 f82f 	bl	800dd14 <__malloc_unlock>
 800dcb6:	f104 000b 	add.w	r0, r4, #11
 800dcba:	1d23      	adds	r3, r4, #4
 800dcbc:	f020 0007 	bic.w	r0, r0, #7
 800dcc0:	1ac2      	subs	r2, r0, r3
 800dcc2:	bf1c      	itt	ne
 800dcc4:	1a1b      	subne	r3, r3, r0
 800dcc6:	50a3      	strne	r3, [r4, r2]
 800dcc8:	e7af      	b.n	800dc2a <_malloc_r+0x22>
 800dcca:	6862      	ldr	r2, [r4, #4]
 800dccc:	42a3      	cmp	r3, r4
 800dcce:	bf0c      	ite	eq
 800dcd0:	f8c8 2000 	streq.w	r2, [r8]
 800dcd4:	605a      	strne	r2, [r3, #4]
 800dcd6:	e7eb      	b.n	800dcb0 <_malloc_r+0xa8>
 800dcd8:	4623      	mov	r3, r4
 800dcda:	6864      	ldr	r4, [r4, #4]
 800dcdc:	e7ae      	b.n	800dc3c <_malloc_r+0x34>
 800dcde:	463c      	mov	r4, r7
 800dce0:	687f      	ldr	r7, [r7, #4]
 800dce2:	e7b6      	b.n	800dc52 <_malloc_r+0x4a>
 800dce4:	461a      	mov	r2, r3
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	42a3      	cmp	r3, r4
 800dcea:	d1fb      	bne.n	800dce4 <_malloc_r+0xdc>
 800dcec:	2300      	movs	r3, #0
 800dcee:	6053      	str	r3, [r2, #4]
 800dcf0:	e7de      	b.n	800dcb0 <_malloc_r+0xa8>
 800dcf2:	230c      	movs	r3, #12
 800dcf4:	6033      	str	r3, [r6, #0]
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f000 f80c 	bl	800dd14 <__malloc_unlock>
 800dcfc:	e794      	b.n	800dc28 <_malloc_r+0x20>
 800dcfe:	6005      	str	r5, [r0, #0]
 800dd00:	e7d6      	b.n	800dcb0 <_malloc_r+0xa8>
 800dd02:	bf00      	nop
 800dd04:	200035b8 	.word	0x200035b8

0800dd08 <__malloc_lock>:
 800dd08:	4801      	ldr	r0, [pc, #4]	@ (800dd10 <__malloc_lock+0x8>)
 800dd0a:	f7ff b87a 	b.w	800ce02 <__retarget_lock_acquire_recursive>
 800dd0e:	bf00      	nop
 800dd10:	200035b0 	.word	0x200035b0

0800dd14 <__malloc_unlock>:
 800dd14:	4801      	ldr	r0, [pc, #4]	@ (800dd1c <__malloc_unlock+0x8>)
 800dd16:	f7ff b875 	b.w	800ce04 <__retarget_lock_release_recursive>
 800dd1a:	bf00      	nop
 800dd1c:	200035b0 	.word	0x200035b0

0800dd20 <_Balloc>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	69c6      	ldr	r6, [r0, #28]
 800dd24:	4604      	mov	r4, r0
 800dd26:	460d      	mov	r5, r1
 800dd28:	b976      	cbnz	r6, 800dd48 <_Balloc+0x28>
 800dd2a:	2010      	movs	r0, #16
 800dd2c:	f7ff ff42 	bl	800dbb4 <malloc>
 800dd30:	4602      	mov	r2, r0
 800dd32:	61e0      	str	r0, [r4, #28]
 800dd34:	b920      	cbnz	r0, 800dd40 <_Balloc+0x20>
 800dd36:	4b18      	ldr	r3, [pc, #96]	@ (800dd98 <_Balloc+0x78>)
 800dd38:	4818      	ldr	r0, [pc, #96]	@ (800dd9c <_Balloc+0x7c>)
 800dd3a:	216b      	movs	r1, #107	@ 0x6b
 800dd3c:	f7ff f878 	bl	800ce30 <__assert_func>
 800dd40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd44:	6006      	str	r6, [r0, #0]
 800dd46:	60c6      	str	r6, [r0, #12]
 800dd48:	69e6      	ldr	r6, [r4, #28]
 800dd4a:	68f3      	ldr	r3, [r6, #12]
 800dd4c:	b183      	cbz	r3, 800dd70 <_Balloc+0x50>
 800dd4e:	69e3      	ldr	r3, [r4, #28]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd56:	b9b8      	cbnz	r0, 800dd88 <_Balloc+0x68>
 800dd58:	2101      	movs	r1, #1
 800dd5a:	fa01 f605 	lsl.w	r6, r1, r5
 800dd5e:	1d72      	adds	r2, r6, #5
 800dd60:	0092      	lsls	r2, r2, #2
 800dd62:	4620      	mov	r0, r4
 800dd64:	f001 ff1f 	bl	800fba6 <_calloc_r>
 800dd68:	b160      	cbz	r0, 800dd84 <_Balloc+0x64>
 800dd6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd6e:	e00e      	b.n	800dd8e <_Balloc+0x6e>
 800dd70:	2221      	movs	r2, #33	@ 0x21
 800dd72:	2104      	movs	r1, #4
 800dd74:	4620      	mov	r0, r4
 800dd76:	f001 ff16 	bl	800fba6 <_calloc_r>
 800dd7a:	69e3      	ldr	r3, [r4, #28]
 800dd7c:	60f0      	str	r0, [r6, #12]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1e4      	bne.n	800dd4e <_Balloc+0x2e>
 800dd84:	2000      	movs	r0, #0
 800dd86:	bd70      	pop	{r4, r5, r6, pc}
 800dd88:	6802      	ldr	r2, [r0, #0]
 800dd8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd94:	e7f7      	b.n	800dd86 <_Balloc+0x66>
 800dd96:	bf00      	nop
 800dd98:	08010d84 	.word	0x08010d84
 800dd9c:	08010ede 	.word	0x08010ede

0800dda0 <_Bfree>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	69c6      	ldr	r6, [r0, #28]
 800dda4:	4605      	mov	r5, r0
 800dda6:	460c      	mov	r4, r1
 800dda8:	b976      	cbnz	r6, 800ddc8 <_Bfree+0x28>
 800ddaa:	2010      	movs	r0, #16
 800ddac:	f7ff ff02 	bl	800dbb4 <malloc>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	61e8      	str	r0, [r5, #28]
 800ddb4:	b920      	cbnz	r0, 800ddc0 <_Bfree+0x20>
 800ddb6:	4b09      	ldr	r3, [pc, #36]	@ (800dddc <_Bfree+0x3c>)
 800ddb8:	4809      	ldr	r0, [pc, #36]	@ (800dde0 <_Bfree+0x40>)
 800ddba:	218f      	movs	r1, #143	@ 0x8f
 800ddbc:	f7ff f838 	bl	800ce30 <__assert_func>
 800ddc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddc4:	6006      	str	r6, [r0, #0]
 800ddc6:	60c6      	str	r6, [r0, #12]
 800ddc8:	b13c      	cbz	r4, 800ddda <_Bfree+0x3a>
 800ddca:	69eb      	ldr	r3, [r5, #28]
 800ddcc:	6862      	ldr	r2, [r4, #4]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ddd4:	6021      	str	r1, [r4, #0]
 800ddd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ddda:	bd70      	pop	{r4, r5, r6, pc}
 800dddc:	08010d84 	.word	0x08010d84
 800dde0:	08010ede 	.word	0x08010ede

0800dde4 <__multadd>:
 800dde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde8:	690d      	ldr	r5, [r1, #16]
 800ddea:	4607      	mov	r7, r0
 800ddec:	460c      	mov	r4, r1
 800ddee:	461e      	mov	r6, r3
 800ddf0:	f101 0c14 	add.w	ip, r1, #20
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	f8dc 3000 	ldr.w	r3, [ip]
 800ddfa:	b299      	uxth	r1, r3
 800ddfc:	fb02 6101 	mla	r1, r2, r1, r6
 800de00:	0c1e      	lsrs	r6, r3, #16
 800de02:	0c0b      	lsrs	r3, r1, #16
 800de04:	fb02 3306 	mla	r3, r2, r6, r3
 800de08:	b289      	uxth	r1, r1
 800de0a:	3001      	adds	r0, #1
 800de0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de10:	4285      	cmp	r5, r0
 800de12:	f84c 1b04 	str.w	r1, [ip], #4
 800de16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de1a:	dcec      	bgt.n	800ddf6 <__multadd+0x12>
 800de1c:	b30e      	cbz	r6, 800de62 <__multadd+0x7e>
 800de1e:	68a3      	ldr	r3, [r4, #8]
 800de20:	42ab      	cmp	r3, r5
 800de22:	dc19      	bgt.n	800de58 <__multadd+0x74>
 800de24:	6861      	ldr	r1, [r4, #4]
 800de26:	4638      	mov	r0, r7
 800de28:	3101      	adds	r1, #1
 800de2a:	f7ff ff79 	bl	800dd20 <_Balloc>
 800de2e:	4680      	mov	r8, r0
 800de30:	b928      	cbnz	r0, 800de3e <__multadd+0x5a>
 800de32:	4602      	mov	r2, r0
 800de34:	4b0c      	ldr	r3, [pc, #48]	@ (800de68 <__multadd+0x84>)
 800de36:	480d      	ldr	r0, [pc, #52]	@ (800de6c <__multadd+0x88>)
 800de38:	21ba      	movs	r1, #186	@ 0xba
 800de3a:	f7fe fff9 	bl	800ce30 <__assert_func>
 800de3e:	6922      	ldr	r2, [r4, #16]
 800de40:	3202      	adds	r2, #2
 800de42:	f104 010c 	add.w	r1, r4, #12
 800de46:	0092      	lsls	r2, r2, #2
 800de48:	300c      	adds	r0, #12
 800de4a:	f7fe ffdc 	bl	800ce06 <memcpy>
 800de4e:	4621      	mov	r1, r4
 800de50:	4638      	mov	r0, r7
 800de52:	f7ff ffa5 	bl	800dda0 <_Bfree>
 800de56:	4644      	mov	r4, r8
 800de58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de5c:	3501      	adds	r5, #1
 800de5e:	615e      	str	r6, [r3, #20]
 800de60:	6125      	str	r5, [r4, #16]
 800de62:	4620      	mov	r0, r4
 800de64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de68:	08010ecd 	.word	0x08010ecd
 800de6c:	08010ede 	.word	0x08010ede

0800de70 <__s2b>:
 800de70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de74:	460c      	mov	r4, r1
 800de76:	4615      	mov	r5, r2
 800de78:	461f      	mov	r7, r3
 800de7a:	2209      	movs	r2, #9
 800de7c:	3308      	adds	r3, #8
 800de7e:	4606      	mov	r6, r0
 800de80:	fb93 f3f2 	sdiv	r3, r3, r2
 800de84:	2100      	movs	r1, #0
 800de86:	2201      	movs	r2, #1
 800de88:	429a      	cmp	r2, r3
 800de8a:	db09      	blt.n	800dea0 <__s2b+0x30>
 800de8c:	4630      	mov	r0, r6
 800de8e:	f7ff ff47 	bl	800dd20 <_Balloc>
 800de92:	b940      	cbnz	r0, 800dea6 <__s2b+0x36>
 800de94:	4602      	mov	r2, r0
 800de96:	4b19      	ldr	r3, [pc, #100]	@ (800defc <__s2b+0x8c>)
 800de98:	4819      	ldr	r0, [pc, #100]	@ (800df00 <__s2b+0x90>)
 800de9a:	21d3      	movs	r1, #211	@ 0xd3
 800de9c:	f7fe ffc8 	bl	800ce30 <__assert_func>
 800dea0:	0052      	lsls	r2, r2, #1
 800dea2:	3101      	adds	r1, #1
 800dea4:	e7f0      	b.n	800de88 <__s2b+0x18>
 800dea6:	9b08      	ldr	r3, [sp, #32]
 800dea8:	6143      	str	r3, [r0, #20]
 800deaa:	2d09      	cmp	r5, #9
 800deac:	f04f 0301 	mov.w	r3, #1
 800deb0:	6103      	str	r3, [r0, #16]
 800deb2:	dd16      	ble.n	800dee2 <__s2b+0x72>
 800deb4:	f104 0909 	add.w	r9, r4, #9
 800deb8:	46c8      	mov	r8, r9
 800deba:	442c      	add	r4, r5
 800debc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dec0:	4601      	mov	r1, r0
 800dec2:	3b30      	subs	r3, #48	@ 0x30
 800dec4:	220a      	movs	r2, #10
 800dec6:	4630      	mov	r0, r6
 800dec8:	f7ff ff8c 	bl	800dde4 <__multadd>
 800decc:	45a0      	cmp	r8, r4
 800dece:	d1f5      	bne.n	800debc <__s2b+0x4c>
 800ded0:	f1a5 0408 	sub.w	r4, r5, #8
 800ded4:	444c      	add	r4, r9
 800ded6:	1b2d      	subs	r5, r5, r4
 800ded8:	1963      	adds	r3, r4, r5
 800deda:	42bb      	cmp	r3, r7
 800dedc:	db04      	blt.n	800dee8 <__s2b+0x78>
 800dede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dee2:	340a      	adds	r4, #10
 800dee4:	2509      	movs	r5, #9
 800dee6:	e7f6      	b.n	800ded6 <__s2b+0x66>
 800dee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800deec:	4601      	mov	r1, r0
 800deee:	3b30      	subs	r3, #48	@ 0x30
 800def0:	220a      	movs	r2, #10
 800def2:	4630      	mov	r0, r6
 800def4:	f7ff ff76 	bl	800dde4 <__multadd>
 800def8:	e7ee      	b.n	800ded8 <__s2b+0x68>
 800defa:	bf00      	nop
 800defc:	08010ecd 	.word	0x08010ecd
 800df00:	08010ede 	.word	0x08010ede

0800df04 <__hi0bits>:
 800df04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df08:	4603      	mov	r3, r0
 800df0a:	bf36      	itet	cc
 800df0c:	0403      	lslcc	r3, r0, #16
 800df0e:	2000      	movcs	r0, #0
 800df10:	2010      	movcc	r0, #16
 800df12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df16:	bf3c      	itt	cc
 800df18:	021b      	lslcc	r3, r3, #8
 800df1a:	3008      	addcc	r0, #8
 800df1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df20:	bf3c      	itt	cc
 800df22:	011b      	lslcc	r3, r3, #4
 800df24:	3004      	addcc	r0, #4
 800df26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df2a:	bf3c      	itt	cc
 800df2c:	009b      	lslcc	r3, r3, #2
 800df2e:	3002      	addcc	r0, #2
 800df30:	2b00      	cmp	r3, #0
 800df32:	db05      	blt.n	800df40 <__hi0bits+0x3c>
 800df34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800df38:	f100 0001 	add.w	r0, r0, #1
 800df3c:	bf08      	it	eq
 800df3e:	2020      	moveq	r0, #32
 800df40:	4770      	bx	lr

0800df42 <__lo0bits>:
 800df42:	6803      	ldr	r3, [r0, #0]
 800df44:	4602      	mov	r2, r0
 800df46:	f013 0007 	ands.w	r0, r3, #7
 800df4a:	d00b      	beq.n	800df64 <__lo0bits+0x22>
 800df4c:	07d9      	lsls	r1, r3, #31
 800df4e:	d421      	bmi.n	800df94 <__lo0bits+0x52>
 800df50:	0798      	lsls	r0, r3, #30
 800df52:	bf49      	itett	mi
 800df54:	085b      	lsrmi	r3, r3, #1
 800df56:	089b      	lsrpl	r3, r3, #2
 800df58:	2001      	movmi	r0, #1
 800df5a:	6013      	strmi	r3, [r2, #0]
 800df5c:	bf5c      	itt	pl
 800df5e:	6013      	strpl	r3, [r2, #0]
 800df60:	2002      	movpl	r0, #2
 800df62:	4770      	bx	lr
 800df64:	b299      	uxth	r1, r3
 800df66:	b909      	cbnz	r1, 800df6c <__lo0bits+0x2a>
 800df68:	0c1b      	lsrs	r3, r3, #16
 800df6a:	2010      	movs	r0, #16
 800df6c:	b2d9      	uxtb	r1, r3
 800df6e:	b909      	cbnz	r1, 800df74 <__lo0bits+0x32>
 800df70:	3008      	adds	r0, #8
 800df72:	0a1b      	lsrs	r3, r3, #8
 800df74:	0719      	lsls	r1, r3, #28
 800df76:	bf04      	itt	eq
 800df78:	091b      	lsreq	r3, r3, #4
 800df7a:	3004      	addeq	r0, #4
 800df7c:	0799      	lsls	r1, r3, #30
 800df7e:	bf04      	itt	eq
 800df80:	089b      	lsreq	r3, r3, #2
 800df82:	3002      	addeq	r0, #2
 800df84:	07d9      	lsls	r1, r3, #31
 800df86:	d403      	bmi.n	800df90 <__lo0bits+0x4e>
 800df88:	085b      	lsrs	r3, r3, #1
 800df8a:	f100 0001 	add.w	r0, r0, #1
 800df8e:	d003      	beq.n	800df98 <__lo0bits+0x56>
 800df90:	6013      	str	r3, [r2, #0]
 800df92:	4770      	bx	lr
 800df94:	2000      	movs	r0, #0
 800df96:	4770      	bx	lr
 800df98:	2020      	movs	r0, #32
 800df9a:	4770      	bx	lr

0800df9c <__i2b>:
 800df9c:	b510      	push	{r4, lr}
 800df9e:	460c      	mov	r4, r1
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	f7ff febd 	bl	800dd20 <_Balloc>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	b928      	cbnz	r0, 800dfb6 <__i2b+0x1a>
 800dfaa:	4b05      	ldr	r3, [pc, #20]	@ (800dfc0 <__i2b+0x24>)
 800dfac:	4805      	ldr	r0, [pc, #20]	@ (800dfc4 <__i2b+0x28>)
 800dfae:	f240 1145 	movw	r1, #325	@ 0x145
 800dfb2:	f7fe ff3d 	bl	800ce30 <__assert_func>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	6144      	str	r4, [r0, #20]
 800dfba:	6103      	str	r3, [r0, #16]
 800dfbc:	bd10      	pop	{r4, pc}
 800dfbe:	bf00      	nop
 800dfc0:	08010ecd 	.word	0x08010ecd
 800dfc4:	08010ede 	.word	0x08010ede

0800dfc8 <__multiply>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	4617      	mov	r7, r2
 800dfce:	690a      	ldr	r2, [r1, #16]
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	bfa8      	it	ge
 800dfd6:	463b      	movge	r3, r7
 800dfd8:	4689      	mov	r9, r1
 800dfda:	bfa4      	itt	ge
 800dfdc:	460f      	movge	r7, r1
 800dfde:	4699      	movge	r9, r3
 800dfe0:	693d      	ldr	r5, [r7, #16]
 800dfe2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	6879      	ldr	r1, [r7, #4]
 800dfea:	eb05 060a 	add.w	r6, r5, sl
 800dfee:	42b3      	cmp	r3, r6
 800dff0:	b085      	sub	sp, #20
 800dff2:	bfb8      	it	lt
 800dff4:	3101      	addlt	r1, #1
 800dff6:	f7ff fe93 	bl	800dd20 <_Balloc>
 800dffa:	b930      	cbnz	r0, 800e00a <__multiply+0x42>
 800dffc:	4602      	mov	r2, r0
 800dffe:	4b41      	ldr	r3, [pc, #260]	@ (800e104 <__multiply+0x13c>)
 800e000:	4841      	ldr	r0, [pc, #260]	@ (800e108 <__multiply+0x140>)
 800e002:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e006:	f7fe ff13 	bl	800ce30 <__assert_func>
 800e00a:	f100 0414 	add.w	r4, r0, #20
 800e00e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e012:	4623      	mov	r3, r4
 800e014:	2200      	movs	r2, #0
 800e016:	4573      	cmp	r3, lr
 800e018:	d320      	bcc.n	800e05c <__multiply+0x94>
 800e01a:	f107 0814 	add.w	r8, r7, #20
 800e01e:	f109 0114 	add.w	r1, r9, #20
 800e022:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e026:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e02a:	9302      	str	r3, [sp, #8]
 800e02c:	1beb      	subs	r3, r5, r7
 800e02e:	3b15      	subs	r3, #21
 800e030:	f023 0303 	bic.w	r3, r3, #3
 800e034:	3304      	adds	r3, #4
 800e036:	3715      	adds	r7, #21
 800e038:	42bd      	cmp	r5, r7
 800e03a:	bf38      	it	cc
 800e03c:	2304      	movcc	r3, #4
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	9b02      	ldr	r3, [sp, #8]
 800e042:	9103      	str	r1, [sp, #12]
 800e044:	428b      	cmp	r3, r1
 800e046:	d80c      	bhi.n	800e062 <__multiply+0x9a>
 800e048:	2e00      	cmp	r6, #0
 800e04a:	dd03      	ble.n	800e054 <__multiply+0x8c>
 800e04c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e050:	2b00      	cmp	r3, #0
 800e052:	d055      	beq.n	800e100 <__multiply+0x138>
 800e054:	6106      	str	r6, [r0, #16]
 800e056:	b005      	add	sp, #20
 800e058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05c:	f843 2b04 	str.w	r2, [r3], #4
 800e060:	e7d9      	b.n	800e016 <__multiply+0x4e>
 800e062:	f8b1 a000 	ldrh.w	sl, [r1]
 800e066:	f1ba 0f00 	cmp.w	sl, #0
 800e06a:	d01f      	beq.n	800e0ac <__multiply+0xe4>
 800e06c:	46c4      	mov	ip, r8
 800e06e:	46a1      	mov	r9, r4
 800e070:	2700      	movs	r7, #0
 800e072:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e076:	f8d9 3000 	ldr.w	r3, [r9]
 800e07a:	fa1f fb82 	uxth.w	fp, r2
 800e07e:	b29b      	uxth	r3, r3
 800e080:	fb0a 330b 	mla	r3, sl, fp, r3
 800e084:	443b      	add	r3, r7
 800e086:	f8d9 7000 	ldr.w	r7, [r9]
 800e08a:	0c12      	lsrs	r2, r2, #16
 800e08c:	0c3f      	lsrs	r7, r7, #16
 800e08e:	fb0a 7202 	mla	r2, sl, r2, r7
 800e092:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e096:	b29b      	uxth	r3, r3
 800e098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e09c:	4565      	cmp	r5, ip
 800e09e:	f849 3b04 	str.w	r3, [r9], #4
 800e0a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e0a6:	d8e4      	bhi.n	800e072 <__multiply+0xaa>
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	50e7      	str	r7, [r4, r3]
 800e0ac:	9b03      	ldr	r3, [sp, #12]
 800e0ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e0b2:	3104      	adds	r1, #4
 800e0b4:	f1b9 0f00 	cmp.w	r9, #0
 800e0b8:	d020      	beq.n	800e0fc <__multiply+0x134>
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	4647      	mov	r7, r8
 800e0be:	46a4      	mov	ip, r4
 800e0c0:	f04f 0a00 	mov.w	sl, #0
 800e0c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800e0c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e0cc:	fb09 220b 	mla	r2, r9, fp, r2
 800e0d0:	4452      	add	r2, sl
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0d8:	f84c 3b04 	str.w	r3, [ip], #4
 800e0dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800e0e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800e0e8:	fb09 330a 	mla	r3, r9, sl, r3
 800e0ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e0f0:	42bd      	cmp	r5, r7
 800e0f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0f6:	d8e5      	bhi.n	800e0c4 <__multiply+0xfc>
 800e0f8:	9a01      	ldr	r2, [sp, #4]
 800e0fa:	50a3      	str	r3, [r4, r2]
 800e0fc:	3404      	adds	r4, #4
 800e0fe:	e79f      	b.n	800e040 <__multiply+0x78>
 800e100:	3e01      	subs	r6, #1
 800e102:	e7a1      	b.n	800e048 <__multiply+0x80>
 800e104:	08010ecd 	.word	0x08010ecd
 800e108:	08010ede 	.word	0x08010ede

0800e10c <__pow5mult>:
 800e10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e110:	4615      	mov	r5, r2
 800e112:	f012 0203 	ands.w	r2, r2, #3
 800e116:	4607      	mov	r7, r0
 800e118:	460e      	mov	r6, r1
 800e11a:	d007      	beq.n	800e12c <__pow5mult+0x20>
 800e11c:	4c25      	ldr	r4, [pc, #148]	@ (800e1b4 <__pow5mult+0xa8>)
 800e11e:	3a01      	subs	r2, #1
 800e120:	2300      	movs	r3, #0
 800e122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e126:	f7ff fe5d 	bl	800dde4 <__multadd>
 800e12a:	4606      	mov	r6, r0
 800e12c:	10ad      	asrs	r5, r5, #2
 800e12e:	d03d      	beq.n	800e1ac <__pow5mult+0xa0>
 800e130:	69fc      	ldr	r4, [r7, #28]
 800e132:	b97c      	cbnz	r4, 800e154 <__pow5mult+0x48>
 800e134:	2010      	movs	r0, #16
 800e136:	f7ff fd3d 	bl	800dbb4 <malloc>
 800e13a:	4602      	mov	r2, r0
 800e13c:	61f8      	str	r0, [r7, #28]
 800e13e:	b928      	cbnz	r0, 800e14c <__pow5mult+0x40>
 800e140:	4b1d      	ldr	r3, [pc, #116]	@ (800e1b8 <__pow5mult+0xac>)
 800e142:	481e      	ldr	r0, [pc, #120]	@ (800e1bc <__pow5mult+0xb0>)
 800e144:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e148:	f7fe fe72 	bl	800ce30 <__assert_func>
 800e14c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e150:	6004      	str	r4, [r0, #0]
 800e152:	60c4      	str	r4, [r0, #12]
 800e154:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e15c:	b94c      	cbnz	r4, 800e172 <__pow5mult+0x66>
 800e15e:	f240 2171 	movw	r1, #625	@ 0x271
 800e162:	4638      	mov	r0, r7
 800e164:	f7ff ff1a 	bl	800df9c <__i2b>
 800e168:	2300      	movs	r3, #0
 800e16a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e16e:	4604      	mov	r4, r0
 800e170:	6003      	str	r3, [r0, #0]
 800e172:	f04f 0900 	mov.w	r9, #0
 800e176:	07eb      	lsls	r3, r5, #31
 800e178:	d50a      	bpl.n	800e190 <__pow5mult+0x84>
 800e17a:	4631      	mov	r1, r6
 800e17c:	4622      	mov	r2, r4
 800e17e:	4638      	mov	r0, r7
 800e180:	f7ff ff22 	bl	800dfc8 <__multiply>
 800e184:	4631      	mov	r1, r6
 800e186:	4680      	mov	r8, r0
 800e188:	4638      	mov	r0, r7
 800e18a:	f7ff fe09 	bl	800dda0 <_Bfree>
 800e18e:	4646      	mov	r6, r8
 800e190:	106d      	asrs	r5, r5, #1
 800e192:	d00b      	beq.n	800e1ac <__pow5mult+0xa0>
 800e194:	6820      	ldr	r0, [r4, #0]
 800e196:	b938      	cbnz	r0, 800e1a8 <__pow5mult+0x9c>
 800e198:	4622      	mov	r2, r4
 800e19a:	4621      	mov	r1, r4
 800e19c:	4638      	mov	r0, r7
 800e19e:	f7ff ff13 	bl	800dfc8 <__multiply>
 800e1a2:	6020      	str	r0, [r4, #0]
 800e1a4:	f8c0 9000 	str.w	r9, [r0]
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	e7e4      	b.n	800e176 <__pow5mult+0x6a>
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b2:	bf00      	nop
 800e1b4:	08010fb4 	.word	0x08010fb4
 800e1b8:	08010d84 	.word	0x08010d84
 800e1bc:	08010ede 	.word	0x08010ede

0800e1c0 <__lshift>:
 800e1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	6849      	ldr	r1, [r1, #4]
 800e1c8:	6923      	ldr	r3, [r4, #16]
 800e1ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	4607      	mov	r7, r0
 800e1d2:	4691      	mov	r9, r2
 800e1d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1d8:	f108 0601 	add.w	r6, r8, #1
 800e1dc:	42b3      	cmp	r3, r6
 800e1de:	db0b      	blt.n	800e1f8 <__lshift+0x38>
 800e1e0:	4638      	mov	r0, r7
 800e1e2:	f7ff fd9d 	bl	800dd20 <_Balloc>
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	b948      	cbnz	r0, 800e1fe <__lshift+0x3e>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	4b28      	ldr	r3, [pc, #160]	@ (800e290 <__lshift+0xd0>)
 800e1ee:	4829      	ldr	r0, [pc, #164]	@ (800e294 <__lshift+0xd4>)
 800e1f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e1f4:	f7fe fe1c 	bl	800ce30 <__assert_func>
 800e1f8:	3101      	adds	r1, #1
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	e7ee      	b.n	800e1dc <__lshift+0x1c>
 800e1fe:	2300      	movs	r3, #0
 800e200:	f100 0114 	add.w	r1, r0, #20
 800e204:	f100 0210 	add.w	r2, r0, #16
 800e208:	4618      	mov	r0, r3
 800e20a:	4553      	cmp	r3, sl
 800e20c:	db33      	blt.n	800e276 <__lshift+0xb6>
 800e20e:	6920      	ldr	r0, [r4, #16]
 800e210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e214:	f104 0314 	add.w	r3, r4, #20
 800e218:	f019 091f 	ands.w	r9, r9, #31
 800e21c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e220:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e224:	d02b      	beq.n	800e27e <__lshift+0xbe>
 800e226:	f1c9 0e20 	rsb	lr, r9, #32
 800e22a:	468a      	mov	sl, r1
 800e22c:	2200      	movs	r2, #0
 800e22e:	6818      	ldr	r0, [r3, #0]
 800e230:	fa00 f009 	lsl.w	r0, r0, r9
 800e234:	4310      	orrs	r0, r2
 800e236:	f84a 0b04 	str.w	r0, [sl], #4
 800e23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e23e:	459c      	cmp	ip, r3
 800e240:	fa22 f20e 	lsr.w	r2, r2, lr
 800e244:	d8f3      	bhi.n	800e22e <__lshift+0x6e>
 800e246:	ebac 0304 	sub.w	r3, ip, r4
 800e24a:	3b15      	subs	r3, #21
 800e24c:	f023 0303 	bic.w	r3, r3, #3
 800e250:	3304      	adds	r3, #4
 800e252:	f104 0015 	add.w	r0, r4, #21
 800e256:	4560      	cmp	r0, ip
 800e258:	bf88      	it	hi
 800e25a:	2304      	movhi	r3, #4
 800e25c:	50ca      	str	r2, [r1, r3]
 800e25e:	b10a      	cbz	r2, 800e264 <__lshift+0xa4>
 800e260:	f108 0602 	add.w	r6, r8, #2
 800e264:	3e01      	subs	r6, #1
 800e266:	4638      	mov	r0, r7
 800e268:	612e      	str	r6, [r5, #16]
 800e26a:	4621      	mov	r1, r4
 800e26c:	f7ff fd98 	bl	800dda0 <_Bfree>
 800e270:	4628      	mov	r0, r5
 800e272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e276:	f842 0f04 	str.w	r0, [r2, #4]!
 800e27a:	3301      	adds	r3, #1
 800e27c:	e7c5      	b.n	800e20a <__lshift+0x4a>
 800e27e:	3904      	subs	r1, #4
 800e280:	f853 2b04 	ldr.w	r2, [r3], #4
 800e284:	f841 2f04 	str.w	r2, [r1, #4]!
 800e288:	459c      	cmp	ip, r3
 800e28a:	d8f9      	bhi.n	800e280 <__lshift+0xc0>
 800e28c:	e7ea      	b.n	800e264 <__lshift+0xa4>
 800e28e:	bf00      	nop
 800e290:	08010ecd 	.word	0x08010ecd
 800e294:	08010ede 	.word	0x08010ede

0800e298 <__mcmp>:
 800e298:	690a      	ldr	r2, [r1, #16]
 800e29a:	4603      	mov	r3, r0
 800e29c:	6900      	ldr	r0, [r0, #16]
 800e29e:	1a80      	subs	r0, r0, r2
 800e2a0:	b530      	push	{r4, r5, lr}
 800e2a2:	d10e      	bne.n	800e2c2 <__mcmp+0x2a>
 800e2a4:	3314      	adds	r3, #20
 800e2a6:	3114      	adds	r1, #20
 800e2a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e2ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e2b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e2b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e2b8:	4295      	cmp	r5, r2
 800e2ba:	d003      	beq.n	800e2c4 <__mcmp+0x2c>
 800e2bc:	d205      	bcs.n	800e2ca <__mcmp+0x32>
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	bd30      	pop	{r4, r5, pc}
 800e2c4:	42a3      	cmp	r3, r4
 800e2c6:	d3f3      	bcc.n	800e2b0 <__mcmp+0x18>
 800e2c8:	e7fb      	b.n	800e2c2 <__mcmp+0x2a>
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	e7f9      	b.n	800e2c2 <__mcmp+0x2a>
	...

0800e2d0 <__mdiff>:
 800e2d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	4689      	mov	r9, r1
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	4611      	mov	r1, r2
 800e2da:	4648      	mov	r0, r9
 800e2dc:	4614      	mov	r4, r2
 800e2de:	f7ff ffdb 	bl	800e298 <__mcmp>
 800e2e2:	1e05      	subs	r5, r0, #0
 800e2e4:	d112      	bne.n	800e30c <__mdiff+0x3c>
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7ff fd19 	bl	800dd20 <_Balloc>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	b928      	cbnz	r0, 800e2fe <__mdiff+0x2e>
 800e2f2:	4b3f      	ldr	r3, [pc, #252]	@ (800e3f0 <__mdiff+0x120>)
 800e2f4:	f240 2137 	movw	r1, #567	@ 0x237
 800e2f8:	483e      	ldr	r0, [pc, #248]	@ (800e3f4 <__mdiff+0x124>)
 800e2fa:	f7fe fd99 	bl	800ce30 <__assert_func>
 800e2fe:	2301      	movs	r3, #1
 800e300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e304:	4610      	mov	r0, r2
 800e306:	b003      	add	sp, #12
 800e308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e30c:	bfbc      	itt	lt
 800e30e:	464b      	movlt	r3, r9
 800e310:	46a1      	movlt	r9, r4
 800e312:	4630      	mov	r0, r6
 800e314:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e318:	bfba      	itte	lt
 800e31a:	461c      	movlt	r4, r3
 800e31c:	2501      	movlt	r5, #1
 800e31e:	2500      	movge	r5, #0
 800e320:	f7ff fcfe 	bl	800dd20 <_Balloc>
 800e324:	4602      	mov	r2, r0
 800e326:	b918      	cbnz	r0, 800e330 <__mdiff+0x60>
 800e328:	4b31      	ldr	r3, [pc, #196]	@ (800e3f0 <__mdiff+0x120>)
 800e32a:	f240 2145 	movw	r1, #581	@ 0x245
 800e32e:	e7e3      	b.n	800e2f8 <__mdiff+0x28>
 800e330:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e334:	6926      	ldr	r6, [r4, #16]
 800e336:	60c5      	str	r5, [r0, #12]
 800e338:	f109 0310 	add.w	r3, r9, #16
 800e33c:	f109 0514 	add.w	r5, r9, #20
 800e340:	f104 0e14 	add.w	lr, r4, #20
 800e344:	f100 0b14 	add.w	fp, r0, #20
 800e348:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e34c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	46d9      	mov	r9, fp
 800e354:	f04f 0c00 	mov.w	ip, #0
 800e358:	9b01      	ldr	r3, [sp, #4]
 800e35a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e35e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e362:	9301      	str	r3, [sp, #4]
 800e364:	fa1f f38a 	uxth.w	r3, sl
 800e368:	4619      	mov	r1, r3
 800e36a:	b283      	uxth	r3, r0
 800e36c:	1acb      	subs	r3, r1, r3
 800e36e:	0c00      	lsrs	r0, r0, #16
 800e370:	4463      	add	r3, ip
 800e372:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e376:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e380:	4576      	cmp	r6, lr
 800e382:	f849 3b04 	str.w	r3, [r9], #4
 800e386:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e38a:	d8e5      	bhi.n	800e358 <__mdiff+0x88>
 800e38c:	1b33      	subs	r3, r6, r4
 800e38e:	3b15      	subs	r3, #21
 800e390:	f023 0303 	bic.w	r3, r3, #3
 800e394:	3415      	adds	r4, #21
 800e396:	3304      	adds	r3, #4
 800e398:	42a6      	cmp	r6, r4
 800e39a:	bf38      	it	cc
 800e39c:	2304      	movcc	r3, #4
 800e39e:	441d      	add	r5, r3
 800e3a0:	445b      	add	r3, fp
 800e3a2:	461e      	mov	r6, r3
 800e3a4:	462c      	mov	r4, r5
 800e3a6:	4544      	cmp	r4, r8
 800e3a8:	d30e      	bcc.n	800e3c8 <__mdiff+0xf8>
 800e3aa:	f108 0103 	add.w	r1, r8, #3
 800e3ae:	1b49      	subs	r1, r1, r5
 800e3b0:	f021 0103 	bic.w	r1, r1, #3
 800e3b4:	3d03      	subs	r5, #3
 800e3b6:	45a8      	cmp	r8, r5
 800e3b8:	bf38      	it	cc
 800e3ba:	2100      	movcc	r1, #0
 800e3bc:	440b      	add	r3, r1
 800e3be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3c2:	b191      	cbz	r1, 800e3ea <__mdiff+0x11a>
 800e3c4:	6117      	str	r7, [r2, #16]
 800e3c6:	e79d      	b.n	800e304 <__mdiff+0x34>
 800e3c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e3cc:	46e6      	mov	lr, ip
 800e3ce:	0c08      	lsrs	r0, r1, #16
 800e3d0:	fa1c fc81 	uxtah	ip, ip, r1
 800e3d4:	4471      	add	r1, lr
 800e3d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e3da:	b289      	uxth	r1, r1
 800e3dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e3e0:	f846 1b04 	str.w	r1, [r6], #4
 800e3e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e3e8:	e7dd      	b.n	800e3a6 <__mdiff+0xd6>
 800e3ea:	3f01      	subs	r7, #1
 800e3ec:	e7e7      	b.n	800e3be <__mdiff+0xee>
 800e3ee:	bf00      	nop
 800e3f0:	08010ecd 	.word	0x08010ecd
 800e3f4:	08010ede 	.word	0x08010ede

0800e3f8 <__ulp>:
 800e3f8:	b082      	sub	sp, #8
 800e3fa:	ed8d 0b00 	vstr	d0, [sp]
 800e3fe:	9a01      	ldr	r2, [sp, #4]
 800e400:	4b0f      	ldr	r3, [pc, #60]	@ (800e440 <__ulp+0x48>)
 800e402:	4013      	ands	r3, r2
 800e404:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dc08      	bgt.n	800e41e <__ulp+0x26>
 800e40c:	425b      	negs	r3, r3
 800e40e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e412:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e416:	da04      	bge.n	800e422 <__ulp+0x2a>
 800e418:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e41c:	4113      	asrs	r3, r2
 800e41e:	2200      	movs	r2, #0
 800e420:	e008      	b.n	800e434 <__ulp+0x3c>
 800e422:	f1a2 0314 	sub.w	r3, r2, #20
 800e426:	2b1e      	cmp	r3, #30
 800e428:	bfda      	itte	le
 800e42a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e42e:	40da      	lsrle	r2, r3
 800e430:	2201      	movgt	r2, #1
 800e432:	2300      	movs	r3, #0
 800e434:	4619      	mov	r1, r3
 800e436:	4610      	mov	r0, r2
 800e438:	ec41 0b10 	vmov	d0, r0, r1
 800e43c:	b002      	add	sp, #8
 800e43e:	4770      	bx	lr
 800e440:	7ff00000 	.word	0x7ff00000

0800e444 <__b2d>:
 800e444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e448:	6906      	ldr	r6, [r0, #16]
 800e44a:	f100 0814 	add.w	r8, r0, #20
 800e44e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e452:	1f37      	subs	r7, r6, #4
 800e454:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e458:	4610      	mov	r0, r2
 800e45a:	f7ff fd53 	bl	800df04 <__hi0bits>
 800e45e:	f1c0 0320 	rsb	r3, r0, #32
 800e462:	280a      	cmp	r0, #10
 800e464:	600b      	str	r3, [r1, #0]
 800e466:	491b      	ldr	r1, [pc, #108]	@ (800e4d4 <__b2d+0x90>)
 800e468:	dc15      	bgt.n	800e496 <__b2d+0x52>
 800e46a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e46e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e472:	45b8      	cmp	r8, r7
 800e474:	ea43 0501 	orr.w	r5, r3, r1
 800e478:	bf34      	ite	cc
 800e47a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e47e:	2300      	movcs	r3, #0
 800e480:	3015      	adds	r0, #21
 800e482:	fa02 f000 	lsl.w	r0, r2, r0
 800e486:	fa23 f30c 	lsr.w	r3, r3, ip
 800e48a:	4303      	orrs	r3, r0
 800e48c:	461c      	mov	r4, r3
 800e48e:	ec45 4b10 	vmov	d0, r4, r5
 800e492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e496:	45b8      	cmp	r8, r7
 800e498:	bf3a      	itte	cc
 800e49a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e49e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e4a2:	2300      	movcs	r3, #0
 800e4a4:	380b      	subs	r0, #11
 800e4a6:	d012      	beq.n	800e4ce <__b2d+0x8a>
 800e4a8:	f1c0 0120 	rsb	r1, r0, #32
 800e4ac:	fa23 f401 	lsr.w	r4, r3, r1
 800e4b0:	4082      	lsls	r2, r0
 800e4b2:	4322      	orrs	r2, r4
 800e4b4:	4547      	cmp	r7, r8
 800e4b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e4ba:	bf8c      	ite	hi
 800e4bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e4c0:	2200      	movls	r2, #0
 800e4c2:	4083      	lsls	r3, r0
 800e4c4:	40ca      	lsrs	r2, r1
 800e4c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	e7de      	b.n	800e48c <__b2d+0x48>
 800e4ce:	ea42 0501 	orr.w	r5, r2, r1
 800e4d2:	e7db      	b.n	800e48c <__b2d+0x48>
 800e4d4:	3ff00000 	.word	0x3ff00000

0800e4d8 <__d2b>:
 800e4d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4dc:	460f      	mov	r7, r1
 800e4de:	2101      	movs	r1, #1
 800e4e0:	ec59 8b10 	vmov	r8, r9, d0
 800e4e4:	4616      	mov	r6, r2
 800e4e6:	f7ff fc1b 	bl	800dd20 <_Balloc>
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	b930      	cbnz	r0, 800e4fc <__d2b+0x24>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	4b23      	ldr	r3, [pc, #140]	@ (800e580 <__d2b+0xa8>)
 800e4f2:	4824      	ldr	r0, [pc, #144]	@ (800e584 <__d2b+0xac>)
 800e4f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e4f8:	f7fe fc9a 	bl	800ce30 <__assert_func>
 800e4fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e504:	b10d      	cbz	r5, 800e50a <__d2b+0x32>
 800e506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	f1b8 0300 	subs.w	r3, r8, #0
 800e510:	d023      	beq.n	800e55a <__d2b+0x82>
 800e512:	4668      	mov	r0, sp
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	f7ff fd14 	bl	800df42 <__lo0bits>
 800e51a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e51e:	b1d0      	cbz	r0, 800e556 <__d2b+0x7e>
 800e520:	f1c0 0320 	rsb	r3, r0, #32
 800e524:	fa02 f303 	lsl.w	r3, r2, r3
 800e528:	430b      	orrs	r3, r1
 800e52a:	40c2      	lsrs	r2, r0
 800e52c:	6163      	str	r3, [r4, #20]
 800e52e:	9201      	str	r2, [sp, #4]
 800e530:	9b01      	ldr	r3, [sp, #4]
 800e532:	61a3      	str	r3, [r4, #24]
 800e534:	2b00      	cmp	r3, #0
 800e536:	bf0c      	ite	eq
 800e538:	2201      	moveq	r2, #1
 800e53a:	2202      	movne	r2, #2
 800e53c:	6122      	str	r2, [r4, #16]
 800e53e:	b1a5      	cbz	r5, 800e56a <__d2b+0x92>
 800e540:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e544:	4405      	add	r5, r0
 800e546:	603d      	str	r5, [r7, #0]
 800e548:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e54c:	6030      	str	r0, [r6, #0]
 800e54e:	4620      	mov	r0, r4
 800e550:	b003      	add	sp, #12
 800e552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e556:	6161      	str	r1, [r4, #20]
 800e558:	e7ea      	b.n	800e530 <__d2b+0x58>
 800e55a:	a801      	add	r0, sp, #4
 800e55c:	f7ff fcf1 	bl	800df42 <__lo0bits>
 800e560:	9b01      	ldr	r3, [sp, #4]
 800e562:	6163      	str	r3, [r4, #20]
 800e564:	3020      	adds	r0, #32
 800e566:	2201      	movs	r2, #1
 800e568:	e7e8      	b.n	800e53c <__d2b+0x64>
 800e56a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e56e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e572:	6038      	str	r0, [r7, #0]
 800e574:	6918      	ldr	r0, [r3, #16]
 800e576:	f7ff fcc5 	bl	800df04 <__hi0bits>
 800e57a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e57e:	e7e5      	b.n	800e54c <__d2b+0x74>
 800e580:	08010ecd 	.word	0x08010ecd
 800e584:	08010ede 	.word	0x08010ede

0800e588 <__ratio>:
 800e588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58c:	b085      	sub	sp, #20
 800e58e:	e9cd 1000 	strd	r1, r0, [sp]
 800e592:	a902      	add	r1, sp, #8
 800e594:	f7ff ff56 	bl	800e444 <__b2d>
 800e598:	9800      	ldr	r0, [sp, #0]
 800e59a:	a903      	add	r1, sp, #12
 800e59c:	ec55 4b10 	vmov	r4, r5, d0
 800e5a0:	f7ff ff50 	bl	800e444 <__b2d>
 800e5a4:	9b01      	ldr	r3, [sp, #4]
 800e5a6:	6919      	ldr	r1, [r3, #16]
 800e5a8:	9b00      	ldr	r3, [sp, #0]
 800e5aa:	691b      	ldr	r3, [r3, #16]
 800e5ac:	1ac9      	subs	r1, r1, r3
 800e5ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e5b2:	1a9b      	subs	r3, r3, r2
 800e5b4:	ec5b ab10 	vmov	sl, fp, d0
 800e5b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	bfce      	itee	gt
 800e5c0:	462a      	movgt	r2, r5
 800e5c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e5c6:	465a      	movle	r2, fp
 800e5c8:	462f      	mov	r7, r5
 800e5ca:	46d9      	mov	r9, fp
 800e5cc:	bfcc      	ite	gt
 800e5ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e5d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e5d6:	464b      	mov	r3, r9
 800e5d8:	4652      	mov	r2, sl
 800e5da:	4620      	mov	r0, r4
 800e5dc:	4639      	mov	r1, r7
 800e5de:	f7f2 f935 	bl	800084c <__aeabi_ddiv>
 800e5e2:	ec41 0b10 	vmov	d0, r0, r1
 800e5e6:	b005      	add	sp, #20
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5ec <__copybits>:
 800e5ec:	3901      	subs	r1, #1
 800e5ee:	b570      	push	{r4, r5, r6, lr}
 800e5f0:	1149      	asrs	r1, r1, #5
 800e5f2:	6914      	ldr	r4, [r2, #16]
 800e5f4:	3101      	adds	r1, #1
 800e5f6:	f102 0314 	add.w	r3, r2, #20
 800e5fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e5fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e602:	1f05      	subs	r5, r0, #4
 800e604:	42a3      	cmp	r3, r4
 800e606:	d30c      	bcc.n	800e622 <__copybits+0x36>
 800e608:	1aa3      	subs	r3, r4, r2
 800e60a:	3b11      	subs	r3, #17
 800e60c:	f023 0303 	bic.w	r3, r3, #3
 800e610:	3211      	adds	r2, #17
 800e612:	42a2      	cmp	r2, r4
 800e614:	bf88      	it	hi
 800e616:	2300      	movhi	r3, #0
 800e618:	4418      	add	r0, r3
 800e61a:	2300      	movs	r3, #0
 800e61c:	4288      	cmp	r0, r1
 800e61e:	d305      	bcc.n	800e62c <__copybits+0x40>
 800e620:	bd70      	pop	{r4, r5, r6, pc}
 800e622:	f853 6b04 	ldr.w	r6, [r3], #4
 800e626:	f845 6f04 	str.w	r6, [r5, #4]!
 800e62a:	e7eb      	b.n	800e604 <__copybits+0x18>
 800e62c:	f840 3b04 	str.w	r3, [r0], #4
 800e630:	e7f4      	b.n	800e61c <__copybits+0x30>

0800e632 <__any_on>:
 800e632:	f100 0214 	add.w	r2, r0, #20
 800e636:	6900      	ldr	r0, [r0, #16]
 800e638:	114b      	asrs	r3, r1, #5
 800e63a:	4298      	cmp	r0, r3
 800e63c:	b510      	push	{r4, lr}
 800e63e:	db11      	blt.n	800e664 <__any_on+0x32>
 800e640:	dd0a      	ble.n	800e658 <__any_on+0x26>
 800e642:	f011 011f 	ands.w	r1, r1, #31
 800e646:	d007      	beq.n	800e658 <__any_on+0x26>
 800e648:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e64c:	fa24 f001 	lsr.w	r0, r4, r1
 800e650:	fa00 f101 	lsl.w	r1, r0, r1
 800e654:	428c      	cmp	r4, r1
 800e656:	d10b      	bne.n	800e670 <__any_on+0x3e>
 800e658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d803      	bhi.n	800e668 <__any_on+0x36>
 800e660:	2000      	movs	r0, #0
 800e662:	bd10      	pop	{r4, pc}
 800e664:	4603      	mov	r3, r0
 800e666:	e7f7      	b.n	800e658 <__any_on+0x26>
 800e668:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e66c:	2900      	cmp	r1, #0
 800e66e:	d0f5      	beq.n	800e65c <__any_on+0x2a>
 800e670:	2001      	movs	r0, #1
 800e672:	e7f6      	b.n	800e662 <__any_on+0x30>

0800e674 <sulp>:
 800e674:	b570      	push	{r4, r5, r6, lr}
 800e676:	4604      	mov	r4, r0
 800e678:	460d      	mov	r5, r1
 800e67a:	ec45 4b10 	vmov	d0, r4, r5
 800e67e:	4616      	mov	r6, r2
 800e680:	f7ff feba 	bl	800e3f8 <__ulp>
 800e684:	ec51 0b10 	vmov	r0, r1, d0
 800e688:	b17e      	cbz	r6, 800e6aa <sulp+0x36>
 800e68a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e68e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e692:	2b00      	cmp	r3, #0
 800e694:	dd09      	ble.n	800e6aa <sulp+0x36>
 800e696:	051b      	lsls	r3, r3, #20
 800e698:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e69c:	2400      	movs	r4, #0
 800e69e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e6a2:	4622      	mov	r2, r4
 800e6a4:	462b      	mov	r3, r5
 800e6a6:	f7f1 ffa7 	bl	80005f8 <__aeabi_dmul>
 800e6aa:	ec41 0b10 	vmov	d0, r0, r1
 800e6ae:	bd70      	pop	{r4, r5, r6, pc}

0800e6b0 <_strtod_l>:
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	b09f      	sub	sp, #124	@ 0x7c
 800e6b6:	460c      	mov	r4, r1
 800e6b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800e6be:	9005      	str	r0, [sp, #20]
 800e6c0:	f04f 0a00 	mov.w	sl, #0
 800e6c4:	f04f 0b00 	mov.w	fp, #0
 800e6c8:	460a      	mov	r2, r1
 800e6ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6cc:	7811      	ldrb	r1, [r2, #0]
 800e6ce:	292b      	cmp	r1, #43	@ 0x2b
 800e6d0:	d04a      	beq.n	800e768 <_strtod_l+0xb8>
 800e6d2:	d838      	bhi.n	800e746 <_strtod_l+0x96>
 800e6d4:	290d      	cmp	r1, #13
 800e6d6:	d832      	bhi.n	800e73e <_strtod_l+0x8e>
 800e6d8:	2908      	cmp	r1, #8
 800e6da:	d832      	bhi.n	800e742 <_strtod_l+0x92>
 800e6dc:	2900      	cmp	r1, #0
 800e6de:	d03b      	beq.n	800e758 <_strtod_l+0xa8>
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e6e6:	782a      	ldrb	r2, [r5, #0]
 800e6e8:	2a30      	cmp	r2, #48	@ 0x30
 800e6ea:	f040 80b2 	bne.w	800e852 <_strtod_l+0x1a2>
 800e6ee:	786a      	ldrb	r2, [r5, #1]
 800e6f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e6f4:	2a58      	cmp	r2, #88	@ 0x58
 800e6f6:	d16e      	bne.n	800e7d6 <_strtod_l+0x126>
 800e6f8:	9302      	str	r3, [sp, #8]
 800e6fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6fc:	9301      	str	r3, [sp, #4]
 800e6fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	4a8f      	ldr	r2, [pc, #572]	@ (800e940 <_strtod_l+0x290>)
 800e704:	9805      	ldr	r0, [sp, #20]
 800e706:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e708:	a919      	add	r1, sp, #100	@ 0x64
 800e70a:	f001 fac7 	bl	800fc9c <__gethex>
 800e70e:	f010 060f 	ands.w	r6, r0, #15
 800e712:	4604      	mov	r4, r0
 800e714:	d005      	beq.n	800e722 <_strtod_l+0x72>
 800e716:	2e06      	cmp	r6, #6
 800e718:	d128      	bne.n	800e76c <_strtod_l+0xbc>
 800e71a:	3501      	adds	r5, #1
 800e71c:	2300      	movs	r3, #0
 800e71e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e720:	930e      	str	r3, [sp, #56]	@ 0x38
 800e722:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e724:	2b00      	cmp	r3, #0
 800e726:	f040 858e 	bne.w	800f246 <_strtod_l+0xb96>
 800e72a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e72c:	b1cb      	cbz	r3, 800e762 <_strtod_l+0xb2>
 800e72e:	4652      	mov	r2, sl
 800e730:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e734:	ec43 2b10 	vmov	d0, r2, r3
 800e738:	b01f      	add	sp, #124	@ 0x7c
 800e73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73e:	2920      	cmp	r1, #32
 800e740:	d1ce      	bne.n	800e6e0 <_strtod_l+0x30>
 800e742:	3201      	adds	r2, #1
 800e744:	e7c1      	b.n	800e6ca <_strtod_l+0x1a>
 800e746:	292d      	cmp	r1, #45	@ 0x2d
 800e748:	d1ca      	bne.n	800e6e0 <_strtod_l+0x30>
 800e74a:	2101      	movs	r1, #1
 800e74c:	910e      	str	r1, [sp, #56]	@ 0x38
 800e74e:	1c51      	adds	r1, r2, #1
 800e750:	9119      	str	r1, [sp, #100]	@ 0x64
 800e752:	7852      	ldrb	r2, [r2, #1]
 800e754:	2a00      	cmp	r2, #0
 800e756:	d1c5      	bne.n	800e6e4 <_strtod_l+0x34>
 800e758:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e75a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f040 8570 	bne.w	800f242 <_strtod_l+0xb92>
 800e762:	4652      	mov	r2, sl
 800e764:	465b      	mov	r3, fp
 800e766:	e7e5      	b.n	800e734 <_strtod_l+0x84>
 800e768:	2100      	movs	r1, #0
 800e76a:	e7ef      	b.n	800e74c <_strtod_l+0x9c>
 800e76c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e76e:	b13a      	cbz	r2, 800e780 <_strtod_l+0xd0>
 800e770:	2135      	movs	r1, #53	@ 0x35
 800e772:	a81c      	add	r0, sp, #112	@ 0x70
 800e774:	f7ff ff3a 	bl	800e5ec <__copybits>
 800e778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e77a:	9805      	ldr	r0, [sp, #20]
 800e77c:	f7ff fb10 	bl	800dda0 <_Bfree>
 800e780:	3e01      	subs	r6, #1
 800e782:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e784:	2e04      	cmp	r6, #4
 800e786:	d806      	bhi.n	800e796 <_strtod_l+0xe6>
 800e788:	e8df f006 	tbb	[pc, r6]
 800e78c:	201d0314 	.word	0x201d0314
 800e790:	14          	.byte	0x14
 800e791:	00          	.byte	0x00
 800e792:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e796:	05e1      	lsls	r1, r4, #23
 800e798:	bf48      	it	mi
 800e79a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e79e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7a2:	0d1b      	lsrs	r3, r3, #20
 800e7a4:	051b      	lsls	r3, r3, #20
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1bb      	bne.n	800e722 <_strtod_l+0x72>
 800e7aa:	f7fe faff 	bl	800cdac <__errno>
 800e7ae:	2322      	movs	r3, #34	@ 0x22
 800e7b0:	6003      	str	r3, [r0, #0]
 800e7b2:	e7b6      	b.n	800e722 <_strtod_l+0x72>
 800e7b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e7b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e7bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e7c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e7c4:	e7e7      	b.n	800e796 <_strtod_l+0xe6>
 800e7c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e948 <_strtod_l+0x298>
 800e7ca:	e7e4      	b.n	800e796 <_strtod_l+0xe6>
 800e7cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e7d0:	f04f 3aff 	mov.w	sl, #4294967295
 800e7d4:	e7df      	b.n	800e796 <_strtod_l+0xe6>
 800e7d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	9219      	str	r2, [sp, #100]	@ 0x64
 800e7dc:	785b      	ldrb	r3, [r3, #1]
 800e7de:	2b30      	cmp	r3, #48	@ 0x30
 800e7e0:	d0f9      	beq.n	800e7d6 <_strtod_l+0x126>
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d09d      	beq.n	800e722 <_strtod_l+0x72>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	2700      	movs	r7, #0
 800e7ea:	9308      	str	r3, [sp, #32]
 800e7ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800e7f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e7f2:	46b9      	mov	r9, r7
 800e7f4:	220a      	movs	r2, #10
 800e7f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e7f8:	7805      	ldrb	r5, [r0, #0]
 800e7fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e7fe:	b2d9      	uxtb	r1, r3
 800e800:	2909      	cmp	r1, #9
 800e802:	d928      	bls.n	800e856 <_strtod_l+0x1a6>
 800e804:	494f      	ldr	r1, [pc, #316]	@ (800e944 <_strtod_l+0x294>)
 800e806:	2201      	movs	r2, #1
 800e808:	f7fe fa74 	bl	800ccf4 <strncmp>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d032      	beq.n	800e876 <_strtod_l+0x1c6>
 800e810:	2000      	movs	r0, #0
 800e812:	462a      	mov	r2, r5
 800e814:	900a      	str	r0, [sp, #40]	@ 0x28
 800e816:	464d      	mov	r5, r9
 800e818:	4603      	mov	r3, r0
 800e81a:	2a65      	cmp	r2, #101	@ 0x65
 800e81c:	d001      	beq.n	800e822 <_strtod_l+0x172>
 800e81e:	2a45      	cmp	r2, #69	@ 0x45
 800e820:	d114      	bne.n	800e84c <_strtod_l+0x19c>
 800e822:	b91d      	cbnz	r5, 800e82c <_strtod_l+0x17c>
 800e824:	9a08      	ldr	r2, [sp, #32]
 800e826:	4302      	orrs	r2, r0
 800e828:	d096      	beq.n	800e758 <_strtod_l+0xa8>
 800e82a:	2500      	movs	r5, #0
 800e82c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e82e:	1c62      	adds	r2, r4, #1
 800e830:	9219      	str	r2, [sp, #100]	@ 0x64
 800e832:	7862      	ldrb	r2, [r4, #1]
 800e834:	2a2b      	cmp	r2, #43	@ 0x2b
 800e836:	d07a      	beq.n	800e92e <_strtod_l+0x27e>
 800e838:	2a2d      	cmp	r2, #45	@ 0x2d
 800e83a:	d07e      	beq.n	800e93a <_strtod_l+0x28a>
 800e83c:	f04f 0c00 	mov.w	ip, #0
 800e840:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e844:	2909      	cmp	r1, #9
 800e846:	f240 8085 	bls.w	800e954 <_strtod_l+0x2a4>
 800e84a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e84c:	f04f 0800 	mov.w	r8, #0
 800e850:	e0a5      	b.n	800e99e <_strtod_l+0x2ee>
 800e852:	2300      	movs	r3, #0
 800e854:	e7c8      	b.n	800e7e8 <_strtod_l+0x138>
 800e856:	f1b9 0f08 	cmp.w	r9, #8
 800e85a:	bfd8      	it	le
 800e85c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e85e:	f100 0001 	add.w	r0, r0, #1
 800e862:	bfda      	itte	le
 800e864:	fb02 3301 	mlale	r3, r2, r1, r3
 800e868:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e86a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e86e:	f109 0901 	add.w	r9, r9, #1
 800e872:	9019      	str	r0, [sp, #100]	@ 0x64
 800e874:	e7bf      	b.n	800e7f6 <_strtod_l+0x146>
 800e876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e878:	1c5a      	adds	r2, r3, #1
 800e87a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e87c:	785a      	ldrb	r2, [r3, #1]
 800e87e:	f1b9 0f00 	cmp.w	r9, #0
 800e882:	d03b      	beq.n	800e8fc <_strtod_l+0x24c>
 800e884:	900a      	str	r0, [sp, #40]	@ 0x28
 800e886:	464d      	mov	r5, r9
 800e888:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e88c:	2b09      	cmp	r3, #9
 800e88e:	d912      	bls.n	800e8b6 <_strtod_l+0x206>
 800e890:	2301      	movs	r3, #1
 800e892:	e7c2      	b.n	800e81a <_strtod_l+0x16a>
 800e894:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e896:	1c5a      	adds	r2, r3, #1
 800e898:	9219      	str	r2, [sp, #100]	@ 0x64
 800e89a:	785a      	ldrb	r2, [r3, #1]
 800e89c:	3001      	adds	r0, #1
 800e89e:	2a30      	cmp	r2, #48	@ 0x30
 800e8a0:	d0f8      	beq.n	800e894 <_strtod_l+0x1e4>
 800e8a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e8a6:	2b08      	cmp	r3, #8
 800e8a8:	f200 84d2 	bhi.w	800f250 <_strtod_l+0xba0>
 800e8ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8b4:	4605      	mov	r5, r0
 800e8b6:	3a30      	subs	r2, #48	@ 0x30
 800e8b8:	f100 0301 	add.w	r3, r0, #1
 800e8bc:	d018      	beq.n	800e8f0 <_strtod_l+0x240>
 800e8be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8c0:	4419      	add	r1, r3
 800e8c2:	910a      	str	r1, [sp, #40]	@ 0x28
 800e8c4:	462e      	mov	r6, r5
 800e8c6:	f04f 0e0a 	mov.w	lr, #10
 800e8ca:	1c71      	adds	r1, r6, #1
 800e8cc:	eba1 0c05 	sub.w	ip, r1, r5
 800e8d0:	4563      	cmp	r3, ip
 800e8d2:	dc15      	bgt.n	800e900 <_strtod_l+0x250>
 800e8d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e8d8:	182b      	adds	r3, r5, r0
 800e8da:	2b08      	cmp	r3, #8
 800e8dc:	f105 0501 	add.w	r5, r5, #1
 800e8e0:	4405      	add	r5, r0
 800e8e2:	dc1a      	bgt.n	800e91a <_strtod_l+0x26a>
 800e8e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8e6:	230a      	movs	r3, #10
 800e8e8:	fb03 2301 	mla	r3, r3, r1, r2
 800e8ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e8f2:	1c51      	adds	r1, r2, #1
 800e8f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800e8f6:	7852      	ldrb	r2, [r2, #1]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	e7c5      	b.n	800e888 <_strtod_l+0x1d8>
 800e8fc:	4648      	mov	r0, r9
 800e8fe:	e7ce      	b.n	800e89e <_strtod_l+0x1ee>
 800e900:	2e08      	cmp	r6, #8
 800e902:	dc05      	bgt.n	800e910 <_strtod_l+0x260>
 800e904:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e906:	fb0e f606 	mul.w	r6, lr, r6
 800e90a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e90c:	460e      	mov	r6, r1
 800e90e:	e7dc      	b.n	800e8ca <_strtod_l+0x21a>
 800e910:	2910      	cmp	r1, #16
 800e912:	bfd8      	it	le
 800e914:	fb0e f707 	mulle.w	r7, lr, r7
 800e918:	e7f8      	b.n	800e90c <_strtod_l+0x25c>
 800e91a:	2b0f      	cmp	r3, #15
 800e91c:	bfdc      	itt	le
 800e91e:	230a      	movle	r3, #10
 800e920:	fb03 2707 	mlale	r7, r3, r7, r2
 800e924:	e7e3      	b.n	800e8ee <_strtod_l+0x23e>
 800e926:	2300      	movs	r3, #0
 800e928:	930a      	str	r3, [sp, #40]	@ 0x28
 800e92a:	2301      	movs	r3, #1
 800e92c:	e77a      	b.n	800e824 <_strtod_l+0x174>
 800e92e:	f04f 0c00 	mov.w	ip, #0
 800e932:	1ca2      	adds	r2, r4, #2
 800e934:	9219      	str	r2, [sp, #100]	@ 0x64
 800e936:	78a2      	ldrb	r2, [r4, #2]
 800e938:	e782      	b.n	800e840 <_strtod_l+0x190>
 800e93a:	f04f 0c01 	mov.w	ip, #1
 800e93e:	e7f8      	b.n	800e932 <_strtod_l+0x282>
 800e940:	080110c4 	.word	0x080110c4
 800e944:	08010f37 	.word	0x08010f37
 800e948:	7ff00000 	.word	0x7ff00000
 800e94c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e94e:	1c51      	adds	r1, r2, #1
 800e950:	9119      	str	r1, [sp, #100]	@ 0x64
 800e952:	7852      	ldrb	r2, [r2, #1]
 800e954:	2a30      	cmp	r2, #48	@ 0x30
 800e956:	d0f9      	beq.n	800e94c <_strtod_l+0x29c>
 800e958:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e95c:	2908      	cmp	r1, #8
 800e95e:	f63f af75 	bhi.w	800e84c <_strtod_l+0x19c>
 800e962:	3a30      	subs	r2, #48	@ 0x30
 800e964:	9209      	str	r2, [sp, #36]	@ 0x24
 800e966:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e968:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e96a:	f04f 080a 	mov.w	r8, #10
 800e96e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e970:	1c56      	adds	r6, r2, #1
 800e972:	9619      	str	r6, [sp, #100]	@ 0x64
 800e974:	7852      	ldrb	r2, [r2, #1]
 800e976:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e97a:	f1be 0f09 	cmp.w	lr, #9
 800e97e:	d939      	bls.n	800e9f4 <_strtod_l+0x344>
 800e980:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e982:	1a76      	subs	r6, r6, r1
 800e984:	2e08      	cmp	r6, #8
 800e986:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e98a:	dc03      	bgt.n	800e994 <_strtod_l+0x2e4>
 800e98c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e98e:	4588      	cmp	r8, r1
 800e990:	bfa8      	it	ge
 800e992:	4688      	movge	r8, r1
 800e994:	f1bc 0f00 	cmp.w	ip, #0
 800e998:	d001      	beq.n	800e99e <_strtod_l+0x2ee>
 800e99a:	f1c8 0800 	rsb	r8, r8, #0
 800e99e:	2d00      	cmp	r5, #0
 800e9a0:	d14e      	bne.n	800ea40 <_strtod_l+0x390>
 800e9a2:	9908      	ldr	r1, [sp, #32]
 800e9a4:	4308      	orrs	r0, r1
 800e9a6:	f47f aebc 	bne.w	800e722 <_strtod_l+0x72>
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f47f aed4 	bne.w	800e758 <_strtod_l+0xa8>
 800e9b0:	2a69      	cmp	r2, #105	@ 0x69
 800e9b2:	d028      	beq.n	800ea06 <_strtod_l+0x356>
 800e9b4:	dc25      	bgt.n	800ea02 <_strtod_l+0x352>
 800e9b6:	2a49      	cmp	r2, #73	@ 0x49
 800e9b8:	d025      	beq.n	800ea06 <_strtod_l+0x356>
 800e9ba:	2a4e      	cmp	r2, #78	@ 0x4e
 800e9bc:	f47f aecc 	bne.w	800e758 <_strtod_l+0xa8>
 800e9c0:	499a      	ldr	r1, [pc, #616]	@ (800ec2c <_strtod_l+0x57c>)
 800e9c2:	a819      	add	r0, sp, #100	@ 0x64
 800e9c4:	f001 fb8c 	bl	80100e0 <__match>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	f43f aec5 	beq.w	800e758 <_strtod_l+0xa8>
 800e9ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	2b28      	cmp	r3, #40	@ 0x28
 800e9d4:	d12e      	bne.n	800ea34 <_strtod_l+0x384>
 800e9d6:	4996      	ldr	r1, [pc, #600]	@ (800ec30 <_strtod_l+0x580>)
 800e9d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800e9da:	a819      	add	r0, sp, #100	@ 0x64
 800e9dc:	f001 fb94 	bl	8010108 <__hexnan>
 800e9e0:	2805      	cmp	r0, #5
 800e9e2:	d127      	bne.n	800ea34 <_strtod_l+0x384>
 800e9e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e9e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e9ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e9ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e9f2:	e696      	b.n	800e722 <_strtod_l+0x72>
 800e9f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9f6:	fb08 2101 	mla	r1, r8, r1, r2
 800e9fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea00:	e7b5      	b.n	800e96e <_strtod_l+0x2be>
 800ea02:	2a6e      	cmp	r2, #110	@ 0x6e
 800ea04:	e7da      	b.n	800e9bc <_strtod_l+0x30c>
 800ea06:	498b      	ldr	r1, [pc, #556]	@ (800ec34 <_strtod_l+0x584>)
 800ea08:	a819      	add	r0, sp, #100	@ 0x64
 800ea0a:	f001 fb69 	bl	80100e0 <__match>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	f43f aea2 	beq.w	800e758 <_strtod_l+0xa8>
 800ea14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea16:	4988      	ldr	r1, [pc, #544]	@ (800ec38 <_strtod_l+0x588>)
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	a819      	add	r0, sp, #100	@ 0x64
 800ea1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea1e:	f001 fb5f 	bl	80100e0 <__match>
 800ea22:	b910      	cbnz	r0, 800ea2a <_strtod_l+0x37a>
 800ea24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea26:	3301      	adds	r3, #1
 800ea28:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea2a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ec48 <_strtod_l+0x598>
 800ea2e:	f04f 0a00 	mov.w	sl, #0
 800ea32:	e676      	b.n	800e722 <_strtod_l+0x72>
 800ea34:	4881      	ldr	r0, [pc, #516]	@ (800ec3c <_strtod_l+0x58c>)
 800ea36:	f001 f8a7 	bl	800fb88 <nan>
 800ea3a:	ec5b ab10 	vmov	sl, fp, d0
 800ea3e:	e670      	b.n	800e722 <_strtod_l+0x72>
 800ea40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ea44:	eba8 0303 	sub.w	r3, r8, r3
 800ea48:	f1b9 0f00 	cmp.w	r9, #0
 800ea4c:	bf08      	it	eq
 800ea4e:	46a9      	moveq	r9, r5
 800ea50:	2d10      	cmp	r5, #16
 800ea52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea54:	462c      	mov	r4, r5
 800ea56:	bfa8      	it	ge
 800ea58:	2410      	movge	r4, #16
 800ea5a:	f7f1 fd53 	bl	8000504 <__aeabi_ui2d>
 800ea5e:	2d09      	cmp	r5, #9
 800ea60:	4682      	mov	sl, r0
 800ea62:	468b      	mov	fp, r1
 800ea64:	dc13      	bgt.n	800ea8e <_strtod_l+0x3de>
 800ea66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f43f ae5a 	beq.w	800e722 <_strtod_l+0x72>
 800ea6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea70:	dd78      	ble.n	800eb64 <_strtod_l+0x4b4>
 800ea72:	2b16      	cmp	r3, #22
 800ea74:	dc5f      	bgt.n	800eb36 <_strtod_l+0x486>
 800ea76:	4972      	ldr	r1, [pc, #456]	@ (800ec40 <_strtod_l+0x590>)
 800ea78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea80:	4652      	mov	r2, sl
 800ea82:	465b      	mov	r3, fp
 800ea84:	f7f1 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ea88:	4682      	mov	sl, r0
 800ea8a:	468b      	mov	fp, r1
 800ea8c:	e649      	b.n	800e722 <_strtod_l+0x72>
 800ea8e:	4b6c      	ldr	r3, [pc, #432]	@ (800ec40 <_strtod_l+0x590>)
 800ea90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ea98:	f7f1 fdae 	bl	80005f8 <__aeabi_dmul>
 800ea9c:	4682      	mov	sl, r0
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	468b      	mov	fp, r1
 800eaa2:	f7f1 fd2f 	bl	8000504 <__aeabi_ui2d>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4650      	mov	r0, sl
 800eaac:	4659      	mov	r1, fp
 800eaae:	f7f1 fbed 	bl	800028c <__adddf3>
 800eab2:	2d0f      	cmp	r5, #15
 800eab4:	4682      	mov	sl, r0
 800eab6:	468b      	mov	fp, r1
 800eab8:	ddd5      	ble.n	800ea66 <_strtod_l+0x3b6>
 800eaba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eabc:	1b2c      	subs	r4, r5, r4
 800eabe:	441c      	add	r4, r3
 800eac0:	2c00      	cmp	r4, #0
 800eac2:	f340 8093 	ble.w	800ebec <_strtod_l+0x53c>
 800eac6:	f014 030f 	ands.w	r3, r4, #15
 800eaca:	d00a      	beq.n	800eae2 <_strtod_l+0x432>
 800eacc:	495c      	ldr	r1, [pc, #368]	@ (800ec40 <_strtod_l+0x590>)
 800eace:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ead2:	4652      	mov	r2, sl
 800ead4:	465b      	mov	r3, fp
 800ead6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eada:	f7f1 fd8d 	bl	80005f8 <__aeabi_dmul>
 800eade:	4682      	mov	sl, r0
 800eae0:	468b      	mov	fp, r1
 800eae2:	f034 040f 	bics.w	r4, r4, #15
 800eae6:	d073      	beq.n	800ebd0 <_strtod_l+0x520>
 800eae8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800eaec:	dd49      	ble.n	800eb82 <_strtod_l+0x4d2>
 800eaee:	2400      	movs	r4, #0
 800eaf0:	46a0      	mov	r8, r4
 800eaf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eaf4:	46a1      	mov	r9, r4
 800eaf6:	9a05      	ldr	r2, [sp, #20]
 800eaf8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ec48 <_strtod_l+0x598>
 800eafc:	2322      	movs	r3, #34	@ 0x22
 800eafe:	6013      	str	r3, [r2, #0]
 800eb00:	f04f 0a00 	mov.w	sl, #0
 800eb04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f43f ae0b 	beq.w	800e722 <_strtod_l+0x72>
 800eb0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb0e:	9805      	ldr	r0, [sp, #20]
 800eb10:	f7ff f946 	bl	800dda0 <_Bfree>
 800eb14:	9805      	ldr	r0, [sp, #20]
 800eb16:	4649      	mov	r1, r9
 800eb18:	f7ff f942 	bl	800dda0 <_Bfree>
 800eb1c:	9805      	ldr	r0, [sp, #20]
 800eb1e:	4641      	mov	r1, r8
 800eb20:	f7ff f93e 	bl	800dda0 <_Bfree>
 800eb24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb26:	9805      	ldr	r0, [sp, #20]
 800eb28:	f7ff f93a 	bl	800dda0 <_Bfree>
 800eb2c:	9805      	ldr	r0, [sp, #20]
 800eb2e:	4621      	mov	r1, r4
 800eb30:	f7ff f936 	bl	800dda0 <_Bfree>
 800eb34:	e5f5      	b.n	800e722 <_strtod_l+0x72>
 800eb36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	dbbc      	blt.n	800eaba <_strtod_l+0x40a>
 800eb40:	4c3f      	ldr	r4, [pc, #252]	@ (800ec40 <_strtod_l+0x590>)
 800eb42:	f1c5 050f 	rsb	r5, r5, #15
 800eb46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eb4a:	4652      	mov	r2, sl
 800eb4c:	465b      	mov	r3, fp
 800eb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb52:	f7f1 fd51 	bl	80005f8 <__aeabi_dmul>
 800eb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb58:	1b5d      	subs	r5, r3, r5
 800eb5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eb5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eb62:	e78f      	b.n	800ea84 <_strtod_l+0x3d4>
 800eb64:	3316      	adds	r3, #22
 800eb66:	dba8      	blt.n	800eaba <_strtod_l+0x40a>
 800eb68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb6a:	eba3 0808 	sub.w	r8, r3, r8
 800eb6e:	4b34      	ldr	r3, [pc, #208]	@ (800ec40 <_strtod_l+0x590>)
 800eb70:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800eb74:	e9d8 2300 	ldrd	r2, r3, [r8]
 800eb78:	4650      	mov	r0, sl
 800eb7a:	4659      	mov	r1, fp
 800eb7c:	f7f1 fe66 	bl	800084c <__aeabi_ddiv>
 800eb80:	e782      	b.n	800ea88 <_strtod_l+0x3d8>
 800eb82:	2300      	movs	r3, #0
 800eb84:	4f2f      	ldr	r7, [pc, #188]	@ (800ec44 <_strtod_l+0x594>)
 800eb86:	1124      	asrs	r4, r4, #4
 800eb88:	4650      	mov	r0, sl
 800eb8a:	4659      	mov	r1, fp
 800eb8c:	461e      	mov	r6, r3
 800eb8e:	2c01      	cmp	r4, #1
 800eb90:	dc21      	bgt.n	800ebd6 <_strtod_l+0x526>
 800eb92:	b10b      	cbz	r3, 800eb98 <_strtod_l+0x4e8>
 800eb94:	4682      	mov	sl, r0
 800eb96:	468b      	mov	fp, r1
 800eb98:	492a      	ldr	r1, [pc, #168]	@ (800ec44 <_strtod_l+0x594>)
 800eb9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800eb9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800eba2:	4652      	mov	r2, sl
 800eba4:	465b      	mov	r3, fp
 800eba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebaa:	f7f1 fd25 	bl	80005f8 <__aeabi_dmul>
 800ebae:	4b26      	ldr	r3, [pc, #152]	@ (800ec48 <_strtod_l+0x598>)
 800ebb0:	460a      	mov	r2, r1
 800ebb2:	400b      	ands	r3, r1
 800ebb4:	4925      	ldr	r1, [pc, #148]	@ (800ec4c <_strtod_l+0x59c>)
 800ebb6:	428b      	cmp	r3, r1
 800ebb8:	4682      	mov	sl, r0
 800ebba:	d898      	bhi.n	800eaee <_strtod_l+0x43e>
 800ebbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ebc0:	428b      	cmp	r3, r1
 800ebc2:	bf86      	itte	hi
 800ebc4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ec50 <_strtod_l+0x5a0>
 800ebc8:	f04f 3aff 	movhi.w	sl, #4294967295
 800ebcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	9308      	str	r3, [sp, #32]
 800ebd4:	e076      	b.n	800ecc4 <_strtod_l+0x614>
 800ebd6:	07e2      	lsls	r2, r4, #31
 800ebd8:	d504      	bpl.n	800ebe4 <_strtod_l+0x534>
 800ebda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebde:	f7f1 fd0b 	bl	80005f8 <__aeabi_dmul>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	3601      	adds	r6, #1
 800ebe6:	1064      	asrs	r4, r4, #1
 800ebe8:	3708      	adds	r7, #8
 800ebea:	e7d0      	b.n	800eb8e <_strtod_l+0x4de>
 800ebec:	d0f0      	beq.n	800ebd0 <_strtod_l+0x520>
 800ebee:	4264      	negs	r4, r4
 800ebf0:	f014 020f 	ands.w	r2, r4, #15
 800ebf4:	d00a      	beq.n	800ec0c <_strtod_l+0x55c>
 800ebf6:	4b12      	ldr	r3, [pc, #72]	@ (800ec40 <_strtod_l+0x590>)
 800ebf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebfc:	4650      	mov	r0, sl
 800ebfe:	4659      	mov	r1, fp
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	f7f1 fe22 	bl	800084c <__aeabi_ddiv>
 800ec08:	4682      	mov	sl, r0
 800ec0a:	468b      	mov	fp, r1
 800ec0c:	1124      	asrs	r4, r4, #4
 800ec0e:	d0df      	beq.n	800ebd0 <_strtod_l+0x520>
 800ec10:	2c1f      	cmp	r4, #31
 800ec12:	dd1f      	ble.n	800ec54 <_strtod_l+0x5a4>
 800ec14:	2400      	movs	r4, #0
 800ec16:	46a0      	mov	r8, r4
 800ec18:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ec1a:	46a1      	mov	r9, r4
 800ec1c:	9a05      	ldr	r2, [sp, #20]
 800ec1e:	2322      	movs	r3, #34	@ 0x22
 800ec20:	f04f 0a00 	mov.w	sl, #0
 800ec24:	f04f 0b00 	mov.w	fp, #0
 800ec28:	6013      	str	r3, [r2, #0]
 800ec2a:	e76b      	b.n	800eb04 <_strtod_l+0x454>
 800ec2c:	08010e00 	.word	0x08010e00
 800ec30:	080110b0 	.word	0x080110b0
 800ec34:	08010df8 	.word	0x08010df8
 800ec38:	08010e6b 	.word	0x08010e6b
 800ec3c:	08010e67 	.word	0x08010e67
 800ec40:	08010fe8 	.word	0x08010fe8
 800ec44:	08010fc0 	.word	0x08010fc0
 800ec48:	7ff00000 	.word	0x7ff00000
 800ec4c:	7ca00000 	.word	0x7ca00000
 800ec50:	7fefffff 	.word	0x7fefffff
 800ec54:	f014 0310 	ands.w	r3, r4, #16
 800ec58:	bf18      	it	ne
 800ec5a:	236a      	movne	r3, #106	@ 0x6a
 800ec5c:	4ea9      	ldr	r6, [pc, #676]	@ (800ef04 <_strtod_l+0x854>)
 800ec5e:	9308      	str	r3, [sp, #32]
 800ec60:	4650      	mov	r0, sl
 800ec62:	4659      	mov	r1, fp
 800ec64:	2300      	movs	r3, #0
 800ec66:	07e7      	lsls	r7, r4, #31
 800ec68:	d504      	bpl.n	800ec74 <_strtod_l+0x5c4>
 800ec6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec6e:	f7f1 fcc3 	bl	80005f8 <__aeabi_dmul>
 800ec72:	2301      	movs	r3, #1
 800ec74:	1064      	asrs	r4, r4, #1
 800ec76:	f106 0608 	add.w	r6, r6, #8
 800ec7a:	d1f4      	bne.n	800ec66 <_strtod_l+0x5b6>
 800ec7c:	b10b      	cbz	r3, 800ec82 <_strtod_l+0x5d2>
 800ec7e:	4682      	mov	sl, r0
 800ec80:	468b      	mov	fp, r1
 800ec82:	9b08      	ldr	r3, [sp, #32]
 800ec84:	b1b3      	cbz	r3, 800ecb4 <_strtod_l+0x604>
 800ec86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ec8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	4659      	mov	r1, fp
 800ec92:	dd0f      	ble.n	800ecb4 <_strtod_l+0x604>
 800ec94:	2b1f      	cmp	r3, #31
 800ec96:	dd56      	ble.n	800ed46 <_strtod_l+0x696>
 800ec98:	2b34      	cmp	r3, #52	@ 0x34
 800ec9a:	bfde      	ittt	le
 800ec9c:	f04f 33ff 	movle.w	r3, #4294967295
 800eca0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eca4:	4093      	lslle	r3, r2
 800eca6:	f04f 0a00 	mov.w	sl, #0
 800ecaa:	bfcc      	ite	gt
 800ecac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ecb0:	ea03 0b01 	andle.w	fp, r3, r1
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	4650      	mov	r0, sl
 800ecba:	4659      	mov	r1, fp
 800ecbc:	f7f1 ff04 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d1a7      	bne.n	800ec14 <_strtod_l+0x564>
 800ecc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ecca:	9805      	ldr	r0, [sp, #20]
 800eccc:	462b      	mov	r3, r5
 800ecce:	464a      	mov	r2, r9
 800ecd0:	f7ff f8ce 	bl	800de70 <__s2b>
 800ecd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f43f af09 	beq.w	800eaee <_strtod_l+0x43e>
 800ecdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ece0:	2a00      	cmp	r2, #0
 800ece2:	eba3 0308 	sub.w	r3, r3, r8
 800ece6:	bfa8      	it	ge
 800ece8:	2300      	movge	r3, #0
 800ecea:	9312      	str	r3, [sp, #72]	@ 0x48
 800ecec:	2400      	movs	r4, #0
 800ecee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ecf2:	9316      	str	r3, [sp, #88]	@ 0x58
 800ecf4:	46a0      	mov	r8, r4
 800ecf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecf8:	9805      	ldr	r0, [sp, #20]
 800ecfa:	6859      	ldr	r1, [r3, #4]
 800ecfc:	f7ff f810 	bl	800dd20 <_Balloc>
 800ed00:	4681      	mov	r9, r0
 800ed02:	2800      	cmp	r0, #0
 800ed04:	f43f aef7 	beq.w	800eaf6 <_strtod_l+0x446>
 800ed08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed0a:	691a      	ldr	r2, [r3, #16]
 800ed0c:	3202      	adds	r2, #2
 800ed0e:	f103 010c 	add.w	r1, r3, #12
 800ed12:	0092      	lsls	r2, r2, #2
 800ed14:	300c      	adds	r0, #12
 800ed16:	f7fe f876 	bl	800ce06 <memcpy>
 800ed1a:	ec4b ab10 	vmov	d0, sl, fp
 800ed1e:	9805      	ldr	r0, [sp, #20]
 800ed20:	aa1c      	add	r2, sp, #112	@ 0x70
 800ed22:	a91b      	add	r1, sp, #108	@ 0x6c
 800ed24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ed28:	f7ff fbd6 	bl	800e4d8 <__d2b>
 800ed2c:	901a      	str	r0, [sp, #104]	@ 0x68
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	f43f aee1 	beq.w	800eaf6 <_strtod_l+0x446>
 800ed34:	9805      	ldr	r0, [sp, #20]
 800ed36:	2101      	movs	r1, #1
 800ed38:	f7ff f930 	bl	800df9c <__i2b>
 800ed3c:	4680      	mov	r8, r0
 800ed3e:	b948      	cbnz	r0, 800ed54 <_strtod_l+0x6a4>
 800ed40:	f04f 0800 	mov.w	r8, #0
 800ed44:	e6d7      	b.n	800eaf6 <_strtod_l+0x446>
 800ed46:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed4e:	ea03 0a0a 	and.w	sl, r3, sl
 800ed52:	e7af      	b.n	800ecb4 <_strtod_l+0x604>
 800ed54:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ed56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ed58:	2d00      	cmp	r5, #0
 800ed5a:	bfab      	itete	ge
 800ed5c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ed5e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ed60:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ed62:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ed64:	bfac      	ite	ge
 800ed66:	18ef      	addge	r7, r5, r3
 800ed68:	1b5e      	sublt	r6, r3, r5
 800ed6a:	9b08      	ldr	r3, [sp, #32]
 800ed6c:	1aed      	subs	r5, r5, r3
 800ed6e:	4415      	add	r5, r2
 800ed70:	4b65      	ldr	r3, [pc, #404]	@ (800ef08 <_strtod_l+0x858>)
 800ed72:	3d01      	subs	r5, #1
 800ed74:	429d      	cmp	r5, r3
 800ed76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ed7a:	da50      	bge.n	800ee1e <_strtod_l+0x76e>
 800ed7c:	1b5b      	subs	r3, r3, r5
 800ed7e:	2b1f      	cmp	r3, #31
 800ed80:	eba2 0203 	sub.w	r2, r2, r3
 800ed84:	f04f 0101 	mov.w	r1, #1
 800ed88:	dc3d      	bgt.n	800ee06 <_strtod_l+0x756>
 800ed8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ed8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed90:	2300      	movs	r3, #0
 800ed92:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed94:	18bd      	adds	r5, r7, r2
 800ed96:	9b08      	ldr	r3, [sp, #32]
 800ed98:	42af      	cmp	r7, r5
 800ed9a:	4416      	add	r6, r2
 800ed9c:	441e      	add	r6, r3
 800ed9e:	463b      	mov	r3, r7
 800eda0:	bfa8      	it	ge
 800eda2:	462b      	movge	r3, r5
 800eda4:	42b3      	cmp	r3, r6
 800eda6:	bfa8      	it	ge
 800eda8:	4633      	movge	r3, r6
 800edaa:	2b00      	cmp	r3, #0
 800edac:	bfc2      	ittt	gt
 800edae:	1aed      	subgt	r5, r5, r3
 800edb0:	1af6      	subgt	r6, r6, r3
 800edb2:	1aff      	subgt	r7, r7, r3
 800edb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	dd16      	ble.n	800ede8 <_strtod_l+0x738>
 800edba:	4641      	mov	r1, r8
 800edbc:	9805      	ldr	r0, [sp, #20]
 800edbe:	461a      	mov	r2, r3
 800edc0:	f7ff f9a4 	bl	800e10c <__pow5mult>
 800edc4:	4680      	mov	r8, r0
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d0ba      	beq.n	800ed40 <_strtod_l+0x690>
 800edca:	4601      	mov	r1, r0
 800edcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800edce:	9805      	ldr	r0, [sp, #20]
 800edd0:	f7ff f8fa 	bl	800dfc8 <__multiply>
 800edd4:	900a      	str	r0, [sp, #40]	@ 0x28
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f43f ae8d 	beq.w	800eaf6 <_strtod_l+0x446>
 800eddc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800edde:	9805      	ldr	r0, [sp, #20]
 800ede0:	f7fe ffde 	bl	800dda0 <_Bfree>
 800ede4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ede6:	931a      	str	r3, [sp, #104]	@ 0x68
 800ede8:	2d00      	cmp	r5, #0
 800edea:	dc1d      	bgt.n	800ee28 <_strtod_l+0x778>
 800edec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edee:	2b00      	cmp	r3, #0
 800edf0:	dd23      	ble.n	800ee3a <_strtod_l+0x78a>
 800edf2:	4649      	mov	r1, r9
 800edf4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800edf6:	9805      	ldr	r0, [sp, #20]
 800edf8:	f7ff f988 	bl	800e10c <__pow5mult>
 800edfc:	4681      	mov	r9, r0
 800edfe:	b9e0      	cbnz	r0, 800ee3a <_strtod_l+0x78a>
 800ee00:	f04f 0900 	mov.w	r9, #0
 800ee04:	e677      	b.n	800eaf6 <_strtod_l+0x446>
 800ee06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ee0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ee0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ee12:	35e2      	adds	r5, #226	@ 0xe2
 800ee14:	fa01 f305 	lsl.w	r3, r1, r5
 800ee18:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ee1c:	e7ba      	b.n	800ed94 <_strtod_l+0x6e4>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee22:	2301      	movs	r3, #1
 800ee24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee26:	e7b5      	b.n	800ed94 <_strtod_l+0x6e4>
 800ee28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee2a:	9805      	ldr	r0, [sp, #20]
 800ee2c:	462a      	mov	r2, r5
 800ee2e:	f7ff f9c7 	bl	800e1c0 <__lshift>
 800ee32:	901a      	str	r0, [sp, #104]	@ 0x68
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d1d9      	bne.n	800edec <_strtod_l+0x73c>
 800ee38:	e65d      	b.n	800eaf6 <_strtod_l+0x446>
 800ee3a:	2e00      	cmp	r6, #0
 800ee3c:	dd07      	ble.n	800ee4e <_strtod_l+0x79e>
 800ee3e:	4649      	mov	r1, r9
 800ee40:	9805      	ldr	r0, [sp, #20]
 800ee42:	4632      	mov	r2, r6
 800ee44:	f7ff f9bc 	bl	800e1c0 <__lshift>
 800ee48:	4681      	mov	r9, r0
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0d8      	beq.n	800ee00 <_strtod_l+0x750>
 800ee4e:	2f00      	cmp	r7, #0
 800ee50:	dd08      	ble.n	800ee64 <_strtod_l+0x7b4>
 800ee52:	4641      	mov	r1, r8
 800ee54:	9805      	ldr	r0, [sp, #20]
 800ee56:	463a      	mov	r2, r7
 800ee58:	f7ff f9b2 	bl	800e1c0 <__lshift>
 800ee5c:	4680      	mov	r8, r0
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	f43f ae49 	beq.w	800eaf6 <_strtod_l+0x446>
 800ee64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee66:	9805      	ldr	r0, [sp, #20]
 800ee68:	464a      	mov	r2, r9
 800ee6a:	f7ff fa31 	bl	800e2d0 <__mdiff>
 800ee6e:	4604      	mov	r4, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f43f ae40 	beq.w	800eaf6 <_strtod_l+0x446>
 800ee76:	68c3      	ldr	r3, [r0, #12]
 800ee78:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	60c3      	str	r3, [r0, #12]
 800ee7e:	4641      	mov	r1, r8
 800ee80:	f7ff fa0a 	bl	800e298 <__mcmp>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	da45      	bge.n	800ef14 <_strtod_l+0x864>
 800ee88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee8a:	ea53 030a 	orrs.w	r3, r3, sl
 800ee8e:	d16b      	bne.n	800ef68 <_strtod_l+0x8b8>
 800ee90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d167      	bne.n	800ef68 <_strtod_l+0x8b8>
 800ee98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ee9c:	0d1b      	lsrs	r3, r3, #20
 800ee9e:	051b      	lsls	r3, r3, #20
 800eea0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eea4:	d960      	bls.n	800ef68 <_strtod_l+0x8b8>
 800eea6:	6963      	ldr	r3, [r4, #20]
 800eea8:	b913      	cbnz	r3, 800eeb0 <_strtod_l+0x800>
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	dd5b      	ble.n	800ef68 <_strtod_l+0x8b8>
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	9805      	ldr	r0, [sp, #20]
 800eeb6:	f7ff f983 	bl	800e1c0 <__lshift>
 800eeba:	4641      	mov	r1, r8
 800eebc:	4604      	mov	r4, r0
 800eebe:	f7ff f9eb 	bl	800e298 <__mcmp>
 800eec2:	2800      	cmp	r0, #0
 800eec4:	dd50      	ble.n	800ef68 <_strtod_l+0x8b8>
 800eec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eeca:	9a08      	ldr	r2, [sp, #32]
 800eecc:	0d1b      	lsrs	r3, r3, #20
 800eece:	051b      	lsls	r3, r3, #20
 800eed0:	2a00      	cmp	r2, #0
 800eed2:	d06a      	beq.n	800efaa <_strtod_l+0x8fa>
 800eed4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eed8:	d867      	bhi.n	800efaa <_strtod_l+0x8fa>
 800eeda:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eede:	f67f ae9d 	bls.w	800ec1c <_strtod_l+0x56c>
 800eee2:	4b0a      	ldr	r3, [pc, #40]	@ (800ef0c <_strtod_l+0x85c>)
 800eee4:	4650      	mov	r0, sl
 800eee6:	4659      	mov	r1, fp
 800eee8:	2200      	movs	r2, #0
 800eeea:	f7f1 fb85 	bl	80005f8 <__aeabi_dmul>
 800eeee:	4b08      	ldr	r3, [pc, #32]	@ (800ef10 <_strtod_l+0x860>)
 800eef0:	400b      	ands	r3, r1
 800eef2:	4682      	mov	sl, r0
 800eef4:	468b      	mov	fp, r1
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	f47f ae08 	bne.w	800eb0c <_strtod_l+0x45c>
 800eefc:	9a05      	ldr	r2, [sp, #20]
 800eefe:	2322      	movs	r3, #34	@ 0x22
 800ef00:	6013      	str	r3, [r2, #0]
 800ef02:	e603      	b.n	800eb0c <_strtod_l+0x45c>
 800ef04:	080110d8 	.word	0x080110d8
 800ef08:	fffffc02 	.word	0xfffffc02
 800ef0c:	39500000 	.word	0x39500000
 800ef10:	7ff00000 	.word	0x7ff00000
 800ef14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ef18:	d165      	bne.n	800efe6 <_strtod_l+0x936>
 800ef1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ef1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef20:	b35a      	cbz	r2, 800ef7a <_strtod_l+0x8ca>
 800ef22:	4a9f      	ldr	r2, [pc, #636]	@ (800f1a0 <_strtod_l+0xaf0>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d12b      	bne.n	800ef80 <_strtod_l+0x8d0>
 800ef28:	9b08      	ldr	r3, [sp, #32]
 800ef2a:	4651      	mov	r1, sl
 800ef2c:	b303      	cbz	r3, 800ef70 <_strtod_l+0x8c0>
 800ef2e:	4b9d      	ldr	r3, [pc, #628]	@ (800f1a4 <_strtod_l+0xaf4>)
 800ef30:	465a      	mov	r2, fp
 800ef32:	4013      	ands	r3, r2
 800ef34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ef38:	f04f 32ff 	mov.w	r2, #4294967295
 800ef3c:	d81b      	bhi.n	800ef76 <_strtod_l+0x8c6>
 800ef3e:	0d1b      	lsrs	r3, r3, #20
 800ef40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ef44:	fa02 f303 	lsl.w	r3, r2, r3
 800ef48:	4299      	cmp	r1, r3
 800ef4a:	d119      	bne.n	800ef80 <_strtod_l+0x8d0>
 800ef4c:	4b96      	ldr	r3, [pc, #600]	@ (800f1a8 <_strtod_l+0xaf8>)
 800ef4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d102      	bne.n	800ef5a <_strtod_l+0x8aa>
 800ef54:	3101      	adds	r1, #1
 800ef56:	f43f adce 	beq.w	800eaf6 <_strtod_l+0x446>
 800ef5a:	4b92      	ldr	r3, [pc, #584]	@ (800f1a4 <_strtod_l+0xaf4>)
 800ef5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef5e:	401a      	ands	r2, r3
 800ef60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ef64:	f04f 0a00 	mov.w	sl, #0
 800ef68:	9b08      	ldr	r3, [sp, #32]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1b9      	bne.n	800eee2 <_strtod_l+0x832>
 800ef6e:	e5cd      	b.n	800eb0c <_strtod_l+0x45c>
 800ef70:	f04f 33ff 	mov.w	r3, #4294967295
 800ef74:	e7e8      	b.n	800ef48 <_strtod_l+0x898>
 800ef76:	4613      	mov	r3, r2
 800ef78:	e7e6      	b.n	800ef48 <_strtod_l+0x898>
 800ef7a:	ea53 030a 	orrs.w	r3, r3, sl
 800ef7e:	d0a2      	beq.n	800eec6 <_strtod_l+0x816>
 800ef80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef82:	b1db      	cbz	r3, 800efbc <_strtod_l+0x90c>
 800ef84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef86:	4213      	tst	r3, r2
 800ef88:	d0ee      	beq.n	800ef68 <_strtod_l+0x8b8>
 800ef8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef8c:	9a08      	ldr	r2, [sp, #32]
 800ef8e:	4650      	mov	r0, sl
 800ef90:	4659      	mov	r1, fp
 800ef92:	b1bb      	cbz	r3, 800efc4 <_strtod_l+0x914>
 800ef94:	f7ff fb6e 	bl	800e674 <sulp>
 800ef98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef9c:	ec53 2b10 	vmov	r2, r3, d0
 800efa0:	f7f1 f974 	bl	800028c <__adddf3>
 800efa4:	4682      	mov	sl, r0
 800efa6:	468b      	mov	fp, r1
 800efa8:	e7de      	b.n	800ef68 <_strtod_l+0x8b8>
 800efaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800efae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800efb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800efb6:	f04f 3aff 	mov.w	sl, #4294967295
 800efba:	e7d5      	b.n	800ef68 <_strtod_l+0x8b8>
 800efbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800efbe:	ea13 0f0a 	tst.w	r3, sl
 800efc2:	e7e1      	b.n	800ef88 <_strtod_l+0x8d8>
 800efc4:	f7ff fb56 	bl	800e674 <sulp>
 800efc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efcc:	ec53 2b10 	vmov	r2, r3, d0
 800efd0:	f7f1 f95a 	bl	8000288 <__aeabi_dsub>
 800efd4:	2200      	movs	r2, #0
 800efd6:	2300      	movs	r3, #0
 800efd8:	4682      	mov	sl, r0
 800efda:	468b      	mov	fp, r1
 800efdc:	f7f1 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d0c1      	beq.n	800ef68 <_strtod_l+0x8b8>
 800efe4:	e61a      	b.n	800ec1c <_strtod_l+0x56c>
 800efe6:	4641      	mov	r1, r8
 800efe8:	4620      	mov	r0, r4
 800efea:	f7ff facd 	bl	800e588 <__ratio>
 800efee:	ec57 6b10 	vmov	r6, r7, d0
 800eff2:	2200      	movs	r2, #0
 800eff4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eff8:	4630      	mov	r0, r6
 800effa:	4639      	mov	r1, r7
 800effc:	f7f1 fd78 	bl	8000af0 <__aeabi_dcmple>
 800f000:	2800      	cmp	r0, #0
 800f002:	d06f      	beq.n	800f0e4 <_strtod_l+0xa34>
 800f004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f006:	2b00      	cmp	r3, #0
 800f008:	d17a      	bne.n	800f100 <_strtod_l+0xa50>
 800f00a:	f1ba 0f00 	cmp.w	sl, #0
 800f00e:	d158      	bne.n	800f0c2 <_strtod_l+0xa12>
 800f010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f016:	2b00      	cmp	r3, #0
 800f018:	d15a      	bne.n	800f0d0 <_strtod_l+0xa20>
 800f01a:	4b64      	ldr	r3, [pc, #400]	@ (800f1ac <_strtod_l+0xafc>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	4630      	mov	r0, r6
 800f020:	4639      	mov	r1, r7
 800f022:	f7f1 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800f026:	2800      	cmp	r0, #0
 800f028:	d159      	bne.n	800f0de <_strtod_l+0xa2e>
 800f02a:	4630      	mov	r0, r6
 800f02c:	4639      	mov	r1, r7
 800f02e:	4b60      	ldr	r3, [pc, #384]	@ (800f1b0 <_strtod_l+0xb00>)
 800f030:	2200      	movs	r2, #0
 800f032:	f7f1 fae1 	bl	80005f8 <__aeabi_dmul>
 800f036:	4606      	mov	r6, r0
 800f038:	460f      	mov	r7, r1
 800f03a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f03e:	9606      	str	r6, [sp, #24]
 800f040:	9307      	str	r3, [sp, #28]
 800f042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f046:	4d57      	ldr	r5, [pc, #348]	@ (800f1a4 <_strtod_l+0xaf4>)
 800f048:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f04e:	401d      	ands	r5, r3
 800f050:	4b58      	ldr	r3, [pc, #352]	@ (800f1b4 <_strtod_l+0xb04>)
 800f052:	429d      	cmp	r5, r3
 800f054:	f040 80b2 	bne.w	800f1bc <_strtod_l+0xb0c>
 800f058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f05a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f05e:	ec4b ab10 	vmov	d0, sl, fp
 800f062:	f7ff f9c9 	bl	800e3f8 <__ulp>
 800f066:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f06a:	ec51 0b10 	vmov	r0, r1, d0
 800f06e:	f7f1 fac3 	bl	80005f8 <__aeabi_dmul>
 800f072:	4652      	mov	r2, sl
 800f074:	465b      	mov	r3, fp
 800f076:	f7f1 f909 	bl	800028c <__adddf3>
 800f07a:	460b      	mov	r3, r1
 800f07c:	4949      	ldr	r1, [pc, #292]	@ (800f1a4 <_strtod_l+0xaf4>)
 800f07e:	4a4e      	ldr	r2, [pc, #312]	@ (800f1b8 <_strtod_l+0xb08>)
 800f080:	4019      	ands	r1, r3
 800f082:	4291      	cmp	r1, r2
 800f084:	4682      	mov	sl, r0
 800f086:	d942      	bls.n	800f10e <_strtod_l+0xa5e>
 800f088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f08a:	4b47      	ldr	r3, [pc, #284]	@ (800f1a8 <_strtod_l+0xaf8>)
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d103      	bne.n	800f098 <_strtod_l+0x9e8>
 800f090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f092:	3301      	adds	r3, #1
 800f094:	f43f ad2f 	beq.w	800eaf6 <_strtod_l+0x446>
 800f098:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f1a8 <_strtod_l+0xaf8>
 800f09c:	f04f 3aff 	mov.w	sl, #4294967295
 800f0a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0a2:	9805      	ldr	r0, [sp, #20]
 800f0a4:	f7fe fe7c 	bl	800dda0 <_Bfree>
 800f0a8:	9805      	ldr	r0, [sp, #20]
 800f0aa:	4649      	mov	r1, r9
 800f0ac:	f7fe fe78 	bl	800dda0 <_Bfree>
 800f0b0:	9805      	ldr	r0, [sp, #20]
 800f0b2:	4641      	mov	r1, r8
 800f0b4:	f7fe fe74 	bl	800dda0 <_Bfree>
 800f0b8:	9805      	ldr	r0, [sp, #20]
 800f0ba:	4621      	mov	r1, r4
 800f0bc:	f7fe fe70 	bl	800dda0 <_Bfree>
 800f0c0:	e619      	b.n	800ecf6 <_strtod_l+0x646>
 800f0c2:	f1ba 0f01 	cmp.w	sl, #1
 800f0c6:	d103      	bne.n	800f0d0 <_strtod_l+0xa20>
 800f0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f43f ada6 	beq.w	800ec1c <_strtod_l+0x56c>
 800f0d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f180 <_strtod_l+0xad0>
 800f0d4:	4f35      	ldr	r7, [pc, #212]	@ (800f1ac <_strtod_l+0xafc>)
 800f0d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f0da:	2600      	movs	r6, #0
 800f0dc:	e7b1      	b.n	800f042 <_strtod_l+0x992>
 800f0de:	4f34      	ldr	r7, [pc, #208]	@ (800f1b0 <_strtod_l+0xb00>)
 800f0e0:	2600      	movs	r6, #0
 800f0e2:	e7aa      	b.n	800f03a <_strtod_l+0x98a>
 800f0e4:	4b32      	ldr	r3, [pc, #200]	@ (800f1b0 <_strtod_l+0xb00>)
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	4639      	mov	r1, r7
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f7f1 fa84 	bl	80005f8 <__aeabi_dmul>
 800f0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	460f      	mov	r7, r1
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d09f      	beq.n	800f03a <_strtod_l+0x98a>
 800f0fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f0fe:	e7a0      	b.n	800f042 <_strtod_l+0x992>
 800f100:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f188 <_strtod_l+0xad8>
 800f104:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f108:	ec57 6b17 	vmov	r6, r7, d7
 800f10c:	e799      	b.n	800f042 <_strtod_l+0x992>
 800f10e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f112:	9b08      	ldr	r3, [sp, #32]
 800f114:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1c1      	bne.n	800f0a0 <_strtod_l+0x9f0>
 800f11c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f120:	0d1b      	lsrs	r3, r3, #20
 800f122:	051b      	lsls	r3, r3, #20
 800f124:	429d      	cmp	r5, r3
 800f126:	d1bb      	bne.n	800f0a0 <_strtod_l+0x9f0>
 800f128:	4630      	mov	r0, r6
 800f12a:	4639      	mov	r1, r7
 800f12c:	f7f1 fdc4 	bl	8000cb8 <__aeabi_d2lz>
 800f130:	f7f1 fa34 	bl	800059c <__aeabi_l2d>
 800f134:	4602      	mov	r2, r0
 800f136:	460b      	mov	r3, r1
 800f138:	4630      	mov	r0, r6
 800f13a:	4639      	mov	r1, r7
 800f13c:	f7f1 f8a4 	bl	8000288 <__aeabi_dsub>
 800f140:	460b      	mov	r3, r1
 800f142:	4602      	mov	r2, r0
 800f144:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f148:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f14e:	ea46 060a 	orr.w	r6, r6, sl
 800f152:	431e      	orrs	r6, r3
 800f154:	d06f      	beq.n	800f236 <_strtod_l+0xb86>
 800f156:	a30e      	add	r3, pc, #56	@ (adr r3, 800f190 <_strtod_l+0xae0>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f7f1 fcbe 	bl	8000adc <__aeabi_dcmplt>
 800f160:	2800      	cmp	r0, #0
 800f162:	f47f acd3 	bne.w	800eb0c <_strtod_l+0x45c>
 800f166:	a30c      	add	r3, pc, #48	@ (adr r3, 800f198 <_strtod_l+0xae8>)
 800f168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f170:	f7f1 fcd2 	bl	8000b18 <__aeabi_dcmpgt>
 800f174:	2800      	cmp	r0, #0
 800f176:	d093      	beq.n	800f0a0 <_strtod_l+0x9f0>
 800f178:	e4c8      	b.n	800eb0c <_strtod_l+0x45c>
 800f17a:	bf00      	nop
 800f17c:	f3af 8000 	nop.w
 800f180:	00000000 	.word	0x00000000
 800f184:	bff00000 	.word	0xbff00000
 800f188:	00000000 	.word	0x00000000
 800f18c:	3ff00000 	.word	0x3ff00000
 800f190:	94a03595 	.word	0x94a03595
 800f194:	3fdfffff 	.word	0x3fdfffff
 800f198:	35afe535 	.word	0x35afe535
 800f19c:	3fe00000 	.word	0x3fe00000
 800f1a0:	000fffff 	.word	0x000fffff
 800f1a4:	7ff00000 	.word	0x7ff00000
 800f1a8:	7fefffff 	.word	0x7fefffff
 800f1ac:	3ff00000 	.word	0x3ff00000
 800f1b0:	3fe00000 	.word	0x3fe00000
 800f1b4:	7fe00000 	.word	0x7fe00000
 800f1b8:	7c9fffff 	.word	0x7c9fffff
 800f1bc:	9b08      	ldr	r3, [sp, #32]
 800f1be:	b323      	cbz	r3, 800f20a <_strtod_l+0xb5a>
 800f1c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f1c4:	d821      	bhi.n	800f20a <_strtod_l+0xb5a>
 800f1c6:	a328      	add	r3, pc, #160	@ (adr r3, 800f268 <_strtod_l+0xbb8>)
 800f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	4639      	mov	r1, r7
 800f1d0:	f7f1 fc8e 	bl	8000af0 <__aeabi_dcmple>
 800f1d4:	b1a0      	cbz	r0, 800f200 <_strtod_l+0xb50>
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7f1 fce5 	bl	8000ba8 <__aeabi_d2uiz>
 800f1de:	2801      	cmp	r0, #1
 800f1e0:	bf38      	it	cc
 800f1e2:	2001      	movcc	r0, #1
 800f1e4:	f7f1 f98e 	bl	8000504 <__aeabi_ui2d>
 800f1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460f      	mov	r7, r1
 800f1ee:	b9fb      	cbnz	r3, 800f230 <_strtod_l+0xb80>
 800f1f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800f1f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800f1f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f1fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f202:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f206:	1b5b      	subs	r3, r3, r5
 800f208:	9311      	str	r3, [sp, #68]	@ 0x44
 800f20a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f20e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f212:	f7ff f8f1 	bl	800e3f8 <__ulp>
 800f216:	4650      	mov	r0, sl
 800f218:	ec53 2b10 	vmov	r2, r3, d0
 800f21c:	4659      	mov	r1, fp
 800f21e:	f7f1 f9eb 	bl	80005f8 <__aeabi_dmul>
 800f222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f226:	f7f1 f831 	bl	800028c <__adddf3>
 800f22a:	4682      	mov	sl, r0
 800f22c:	468b      	mov	fp, r1
 800f22e:	e770      	b.n	800f112 <_strtod_l+0xa62>
 800f230:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f234:	e7e0      	b.n	800f1f8 <_strtod_l+0xb48>
 800f236:	a30e      	add	r3, pc, #56	@ (adr r3, 800f270 <_strtod_l+0xbc0>)
 800f238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23c:	f7f1 fc4e 	bl	8000adc <__aeabi_dcmplt>
 800f240:	e798      	b.n	800f174 <_strtod_l+0xac4>
 800f242:	2300      	movs	r3, #0
 800f244:	930e      	str	r3, [sp, #56]	@ 0x38
 800f246:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f24a:	6013      	str	r3, [r2, #0]
 800f24c:	f7ff ba6d 	b.w	800e72a <_strtod_l+0x7a>
 800f250:	2a65      	cmp	r2, #101	@ 0x65
 800f252:	f43f ab68 	beq.w	800e926 <_strtod_l+0x276>
 800f256:	2a45      	cmp	r2, #69	@ 0x45
 800f258:	f43f ab65 	beq.w	800e926 <_strtod_l+0x276>
 800f25c:	2301      	movs	r3, #1
 800f25e:	f7ff bba0 	b.w	800e9a2 <_strtod_l+0x2f2>
 800f262:	bf00      	nop
 800f264:	f3af 8000 	nop.w
 800f268:	ffc00000 	.word	0xffc00000
 800f26c:	41dfffff 	.word	0x41dfffff
 800f270:	94a03595 	.word	0x94a03595
 800f274:	3fcfffff 	.word	0x3fcfffff

0800f278 <_strtod_r>:
 800f278:	4b01      	ldr	r3, [pc, #4]	@ (800f280 <_strtod_r+0x8>)
 800f27a:	f7ff ba19 	b.w	800e6b0 <_strtod_l>
 800f27e:	bf00      	nop
 800f280:	200000e0 	.word	0x200000e0

0800f284 <_strtol_l.isra.0>:
 800f284:	2b24      	cmp	r3, #36	@ 0x24
 800f286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f28a:	4686      	mov	lr, r0
 800f28c:	4690      	mov	r8, r2
 800f28e:	d801      	bhi.n	800f294 <_strtol_l.isra.0+0x10>
 800f290:	2b01      	cmp	r3, #1
 800f292:	d106      	bne.n	800f2a2 <_strtol_l.isra.0+0x1e>
 800f294:	f7fd fd8a 	bl	800cdac <__errno>
 800f298:	2316      	movs	r3, #22
 800f29a:	6003      	str	r3, [r0, #0]
 800f29c:	2000      	movs	r0, #0
 800f29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2a2:	4834      	ldr	r0, [pc, #208]	@ (800f374 <_strtol_l.isra.0+0xf0>)
 800f2a4:	460d      	mov	r5, r1
 800f2a6:	462a      	mov	r2, r5
 800f2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2ac:	5d06      	ldrb	r6, [r0, r4]
 800f2ae:	f016 0608 	ands.w	r6, r6, #8
 800f2b2:	d1f8      	bne.n	800f2a6 <_strtol_l.isra.0+0x22>
 800f2b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f2b6:	d110      	bne.n	800f2da <_strtol_l.isra.0+0x56>
 800f2b8:	782c      	ldrb	r4, [r5, #0]
 800f2ba:	2601      	movs	r6, #1
 800f2bc:	1c95      	adds	r5, r2, #2
 800f2be:	f033 0210 	bics.w	r2, r3, #16
 800f2c2:	d115      	bne.n	800f2f0 <_strtol_l.isra.0+0x6c>
 800f2c4:	2c30      	cmp	r4, #48	@ 0x30
 800f2c6:	d10d      	bne.n	800f2e4 <_strtol_l.isra.0+0x60>
 800f2c8:	782a      	ldrb	r2, [r5, #0]
 800f2ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f2ce:	2a58      	cmp	r2, #88	@ 0x58
 800f2d0:	d108      	bne.n	800f2e4 <_strtol_l.isra.0+0x60>
 800f2d2:	786c      	ldrb	r4, [r5, #1]
 800f2d4:	3502      	adds	r5, #2
 800f2d6:	2310      	movs	r3, #16
 800f2d8:	e00a      	b.n	800f2f0 <_strtol_l.isra.0+0x6c>
 800f2da:	2c2b      	cmp	r4, #43	@ 0x2b
 800f2dc:	bf04      	itt	eq
 800f2de:	782c      	ldrbeq	r4, [r5, #0]
 800f2e0:	1c95      	addeq	r5, r2, #2
 800f2e2:	e7ec      	b.n	800f2be <_strtol_l.isra.0+0x3a>
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1f6      	bne.n	800f2d6 <_strtol_l.isra.0+0x52>
 800f2e8:	2c30      	cmp	r4, #48	@ 0x30
 800f2ea:	bf14      	ite	ne
 800f2ec:	230a      	movne	r3, #10
 800f2ee:	2308      	moveq	r3, #8
 800f2f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f2f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	fbbc f9f3 	udiv	r9, ip, r3
 800f2fe:	4610      	mov	r0, r2
 800f300:	fb03 ca19 	mls	sl, r3, r9, ip
 800f304:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f308:	2f09      	cmp	r7, #9
 800f30a:	d80f      	bhi.n	800f32c <_strtol_l.isra.0+0xa8>
 800f30c:	463c      	mov	r4, r7
 800f30e:	42a3      	cmp	r3, r4
 800f310:	dd1b      	ble.n	800f34a <_strtol_l.isra.0+0xc6>
 800f312:	1c57      	adds	r7, r2, #1
 800f314:	d007      	beq.n	800f326 <_strtol_l.isra.0+0xa2>
 800f316:	4581      	cmp	r9, r0
 800f318:	d314      	bcc.n	800f344 <_strtol_l.isra.0+0xc0>
 800f31a:	d101      	bne.n	800f320 <_strtol_l.isra.0+0x9c>
 800f31c:	45a2      	cmp	sl, r4
 800f31e:	db11      	blt.n	800f344 <_strtol_l.isra.0+0xc0>
 800f320:	fb00 4003 	mla	r0, r0, r3, r4
 800f324:	2201      	movs	r2, #1
 800f326:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f32a:	e7eb      	b.n	800f304 <_strtol_l.isra.0+0x80>
 800f32c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f330:	2f19      	cmp	r7, #25
 800f332:	d801      	bhi.n	800f338 <_strtol_l.isra.0+0xb4>
 800f334:	3c37      	subs	r4, #55	@ 0x37
 800f336:	e7ea      	b.n	800f30e <_strtol_l.isra.0+0x8a>
 800f338:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f33c:	2f19      	cmp	r7, #25
 800f33e:	d804      	bhi.n	800f34a <_strtol_l.isra.0+0xc6>
 800f340:	3c57      	subs	r4, #87	@ 0x57
 800f342:	e7e4      	b.n	800f30e <_strtol_l.isra.0+0x8a>
 800f344:	f04f 32ff 	mov.w	r2, #4294967295
 800f348:	e7ed      	b.n	800f326 <_strtol_l.isra.0+0xa2>
 800f34a:	1c53      	adds	r3, r2, #1
 800f34c:	d108      	bne.n	800f360 <_strtol_l.isra.0+0xdc>
 800f34e:	2322      	movs	r3, #34	@ 0x22
 800f350:	f8ce 3000 	str.w	r3, [lr]
 800f354:	4660      	mov	r0, ip
 800f356:	f1b8 0f00 	cmp.w	r8, #0
 800f35a:	d0a0      	beq.n	800f29e <_strtol_l.isra.0+0x1a>
 800f35c:	1e69      	subs	r1, r5, #1
 800f35e:	e006      	b.n	800f36e <_strtol_l.isra.0+0xea>
 800f360:	b106      	cbz	r6, 800f364 <_strtol_l.isra.0+0xe0>
 800f362:	4240      	negs	r0, r0
 800f364:	f1b8 0f00 	cmp.w	r8, #0
 800f368:	d099      	beq.n	800f29e <_strtol_l.isra.0+0x1a>
 800f36a:	2a00      	cmp	r2, #0
 800f36c:	d1f6      	bne.n	800f35c <_strtol_l.isra.0+0xd8>
 800f36e:	f8c8 1000 	str.w	r1, [r8]
 800f372:	e794      	b.n	800f29e <_strtol_l.isra.0+0x1a>
 800f374:	08011101 	.word	0x08011101

0800f378 <_strtol_r>:
 800f378:	f7ff bf84 	b.w	800f284 <_strtol_l.isra.0>

0800f37c <__ssputs_r>:
 800f37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f380:	688e      	ldr	r6, [r1, #8]
 800f382:	461f      	mov	r7, r3
 800f384:	42be      	cmp	r6, r7
 800f386:	680b      	ldr	r3, [r1, #0]
 800f388:	4682      	mov	sl, r0
 800f38a:	460c      	mov	r4, r1
 800f38c:	4690      	mov	r8, r2
 800f38e:	d82d      	bhi.n	800f3ec <__ssputs_r+0x70>
 800f390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f398:	d026      	beq.n	800f3e8 <__ssputs_r+0x6c>
 800f39a:	6965      	ldr	r5, [r4, #20]
 800f39c:	6909      	ldr	r1, [r1, #16]
 800f39e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3a2:	eba3 0901 	sub.w	r9, r3, r1
 800f3a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3aa:	1c7b      	adds	r3, r7, #1
 800f3ac:	444b      	add	r3, r9
 800f3ae:	106d      	asrs	r5, r5, #1
 800f3b0:	429d      	cmp	r5, r3
 800f3b2:	bf38      	it	cc
 800f3b4:	461d      	movcc	r5, r3
 800f3b6:	0553      	lsls	r3, r2, #21
 800f3b8:	d527      	bpl.n	800f40a <__ssputs_r+0x8e>
 800f3ba:	4629      	mov	r1, r5
 800f3bc:	f7fe fc24 	bl	800dc08 <_malloc_r>
 800f3c0:	4606      	mov	r6, r0
 800f3c2:	b360      	cbz	r0, 800f41e <__ssputs_r+0xa2>
 800f3c4:	6921      	ldr	r1, [r4, #16]
 800f3c6:	464a      	mov	r2, r9
 800f3c8:	f7fd fd1d 	bl	800ce06 <memcpy>
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3d6:	81a3      	strh	r3, [r4, #12]
 800f3d8:	6126      	str	r6, [r4, #16]
 800f3da:	6165      	str	r5, [r4, #20]
 800f3dc:	444e      	add	r6, r9
 800f3de:	eba5 0509 	sub.w	r5, r5, r9
 800f3e2:	6026      	str	r6, [r4, #0]
 800f3e4:	60a5      	str	r5, [r4, #8]
 800f3e6:	463e      	mov	r6, r7
 800f3e8:	42be      	cmp	r6, r7
 800f3ea:	d900      	bls.n	800f3ee <__ssputs_r+0x72>
 800f3ec:	463e      	mov	r6, r7
 800f3ee:	6820      	ldr	r0, [r4, #0]
 800f3f0:	4632      	mov	r2, r6
 800f3f2:	4641      	mov	r1, r8
 800f3f4:	f000 fb7c 	bl	800faf0 <memmove>
 800f3f8:	68a3      	ldr	r3, [r4, #8]
 800f3fa:	1b9b      	subs	r3, r3, r6
 800f3fc:	60a3      	str	r3, [r4, #8]
 800f3fe:	6823      	ldr	r3, [r4, #0]
 800f400:	4433      	add	r3, r6
 800f402:	6023      	str	r3, [r4, #0]
 800f404:	2000      	movs	r0, #0
 800f406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f40a:	462a      	mov	r2, r5
 800f40c:	f000 ff29 	bl	8010262 <_realloc_r>
 800f410:	4606      	mov	r6, r0
 800f412:	2800      	cmp	r0, #0
 800f414:	d1e0      	bne.n	800f3d8 <__ssputs_r+0x5c>
 800f416:	6921      	ldr	r1, [r4, #16]
 800f418:	4650      	mov	r0, sl
 800f41a:	f7fe fb81 	bl	800db20 <_free_r>
 800f41e:	230c      	movs	r3, #12
 800f420:	f8ca 3000 	str.w	r3, [sl]
 800f424:	89a3      	ldrh	r3, [r4, #12]
 800f426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f42a:	81a3      	strh	r3, [r4, #12]
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295
 800f430:	e7e9      	b.n	800f406 <__ssputs_r+0x8a>
	...

0800f434 <_svfiprintf_r>:
 800f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f438:	4698      	mov	r8, r3
 800f43a:	898b      	ldrh	r3, [r1, #12]
 800f43c:	061b      	lsls	r3, r3, #24
 800f43e:	b09d      	sub	sp, #116	@ 0x74
 800f440:	4607      	mov	r7, r0
 800f442:	460d      	mov	r5, r1
 800f444:	4614      	mov	r4, r2
 800f446:	d510      	bpl.n	800f46a <_svfiprintf_r+0x36>
 800f448:	690b      	ldr	r3, [r1, #16]
 800f44a:	b973      	cbnz	r3, 800f46a <_svfiprintf_r+0x36>
 800f44c:	2140      	movs	r1, #64	@ 0x40
 800f44e:	f7fe fbdb 	bl	800dc08 <_malloc_r>
 800f452:	6028      	str	r0, [r5, #0]
 800f454:	6128      	str	r0, [r5, #16]
 800f456:	b930      	cbnz	r0, 800f466 <_svfiprintf_r+0x32>
 800f458:	230c      	movs	r3, #12
 800f45a:	603b      	str	r3, [r7, #0]
 800f45c:	f04f 30ff 	mov.w	r0, #4294967295
 800f460:	b01d      	add	sp, #116	@ 0x74
 800f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f466:	2340      	movs	r3, #64	@ 0x40
 800f468:	616b      	str	r3, [r5, #20]
 800f46a:	2300      	movs	r3, #0
 800f46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f46e:	2320      	movs	r3, #32
 800f470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f474:	f8cd 800c 	str.w	r8, [sp, #12]
 800f478:	2330      	movs	r3, #48	@ 0x30
 800f47a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f618 <_svfiprintf_r+0x1e4>
 800f47e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f482:	f04f 0901 	mov.w	r9, #1
 800f486:	4623      	mov	r3, r4
 800f488:	469a      	mov	sl, r3
 800f48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f48e:	b10a      	cbz	r2, 800f494 <_svfiprintf_r+0x60>
 800f490:	2a25      	cmp	r2, #37	@ 0x25
 800f492:	d1f9      	bne.n	800f488 <_svfiprintf_r+0x54>
 800f494:	ebba 0b04 	subs.w	fp, sl, r4
 800f498:	d00b      	beq.n	800f4b2 <_svfiprintf_r+0x7e>
 800f49a:	465b      	mov	r3, fp
 800f49c:	4622      	mov	r2, r4
 800f49e:	4629      	mov	r1, r5
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	f7ff ff6b 	bl	800f37c <__ssputs_r>
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	f000 80a7 	beq.w	800f5fa <_svfiprintf_r+0x1c6>
 800f4ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4ae:	445a      	add	r2, fp
 800f4b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	f000 809f 	beq.w	800f5fa <_svfiprintf_r+0x1c6>
 800f4bc:	2300      	movs	r3, #0
 800f4be:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4c6:	f10a 0a01 	add.w	sl, sl, #1
 800f4ca:	9304      	str	r3, [sp, #16]
 800f4cc:	9307      	str	r3, [sp, #28]
 800f4ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4d4:	4654      	mov	r4, sl
 800f4d6:	2205      	movs	r2, #5
 800f4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4dc:	484e      	ldr	r0, [pc, #312]	@ (800f618 <_svfiprintf_r+0x1e4>)
 800f4de:	f7f0 fe77 	bl	80001d0 <memchr>
 800f4e2:	9a04      	ldr	r2, [sp, #16]
 800f4e4:	b9d8      	cbnz	r0, 800f51e <_svfiprintf_r+0xea>
 800f4e6:	06d0      	lsls	r0, r2, #27
 800f4e8:	bf44      	itt	mi
 800f4ea:	2320      	movmi	r3, #32
 800f4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4f0:	0711      	lsls	r1, r2, #28
 800f4f2:	bf44      	itt	mi
 800f4f4:	232b      	movmi	r3, #43	@ 0x2b
 800f4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f4fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800f500:	d015      	beq.n	800f52e <_svfiprintf_r+0xfa>
 800f502:	9a07      	ldr	r2, [sp, #28]
 800f504:	4654      	mov	r4, sl
 800f506:	2000      	movs	r0, #0
 800f508:	f04f 0c0a 	mov.w	ip, #10
 800f50c:	4621      	mov	r1, r4
 800f50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f512:	3b30      	subs	r3, #48	@ 0x30
 800f514:	2b09      	cmp	r3, #9
 800f516:	d94b      	bls.n	800f5b0 <_svfiprintf_r+0x17c>
 800f518:	b1b0      	cbz	r0, 800f548 <_svfiprintf_r+0x114>
 800f51a:	9207      	str	r2, [sp, #28]
 800f51c:	e014      	b.n	800f548 <_svfiprintf_r+0x114>
 800f51e:	eba0 0308 	sub.w	r3, r0, r8
 800f522:	fa09 f303 	lsl.w	r3, r9, r3
 800f526:	4313      	orrs	r3, r2
 800f528:	9304      	str	r3, [sp, #16]
 800f52a:	46a2      	mov	sl, r4
 800f52c:	e7d2      	b.n	800f4d4 <_svfiprintf_r+0xa0>
 800f52e:	9b03      	ldr	r3, [sp, #12]
 800f530:	1d19      	adds	r1, r3, #4
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	9103      	str	r1, [sp, #12]
 800f536:	2b00      	cmp	r3, #0
 800f538:	bfbb      	ittet	lt
 800f53a:	425b      	neglt	r3, r3
 800f53c:	f042 0202 	orrlt.w	r2, r2, #2
 800f540:	9307      	strge	r3, [sp, #28]
 800f542:	9307      	strlt	r3, [sp, #28]
 800f544:	bfb8      	it	lt
 800f546:	9204      	strlt	r2, [sp, #16]
 800f548:	7823      	ldrb	r3, [r4, #0]
 800f54a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f54c:	d10a      	bne.n	800f564 <_svfiprintf_r+0x130>
 800f54e:	7863      	ldrb	r3, [r4, #1]
 800f550:	2b2a      	cmp	r3, #42	@ 0x2a
 800f552:	d132      	bne.n	800f5ba <_svfiprintf_r+0x186>
 800f554:	9b03      	ldr	r3, [sp, #12]
 800f556:	1d1a      	adds	r2, r3, #4
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	9203      	str	r2, [sp, #12]
 800f55c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f560:	3402      	adds	r4, #2
 800f562:	9305      	str	r3, [sp, #20]
 800f564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f628 <_svfiprintf_r+0x1f4>
 800f568:	7821      	ldrb	r1, [r4, #0]
 800f56a:	2203      	movs	r2, #3
 800f56c:	4650      	mov	r0, sl
 800f56e:	f7f0 fe2f 	bl	80001d0 <memchr>
 800f572:	b138      	cbz	r0, 800f584 <_svfiprintf_r+0x150>
 800f574:	9b04      	ldr	r3, [sp, #16]
 800f576:	eba0 000a 	sub.w	r0, r0, sl
 800f57a:	2240      	movs	r2, #64	@ 0x40
 800f57c:	4082      	lsls	r2, r0
 800f57e:	4313      	orrs	r3, r2
 800f580:	3401      	adds	r4, #1
 800f582:	9304      	str	r3, [sp, #16]
 800f584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f588:	4824      	ldr	r0, [pc, #144]	@ (800f61c <_svfiprintf_r+0x1e8>)
 800f58a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f58e:	2206      	movs	r2, #6
 800f590:	f7f0 fe1e 	bl	80001d0 <memchr>
 800f594:	2800      	cmp	r0, #0
 800f596:	d036      	beq.n	800f606 <_svfiprintf_r+0x1d2>
 800f598:	4b21      	ldr	r3, [pc, #132]	@ (800f620 <_svfiprintf_r+0x1ec>)
 800f59a:	bb1b      	cbnz	r3, 800f5e4 <_svfiprintf_r+0x1b0>
 800f59c:	9b03      	ldr	r3, [sp, #12]
 800f59e:	3307      	adds	r3, #7
 800f5a0:	f023 0307 	bic.w	r3, r3, #7
 800f5a4:	3308      	adds	r3, #8
 800f5a6:	9303      	str	r3, [sp, #12]
 800f5a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5aa:	4433      	add	r3, r6
 800f5ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5ae:	e76a      	b.n	800f486 <_svfiprintf_r+0x52>
 800f5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	e7a8      	b.n	800f50c <_svfiprintf_r+0xd8>
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	3401      	adds	r4, #1
 800f5be:	9305      	str	r3, [sp, #20]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	f04f 0c0a 	mov.w	ip, #10
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5cc:	3a30      	subs	r2, #48	@ 0x30
 800f5ce:	2a09      	cmp	r2, #9
 800f5d0:	d903      	bls.n	800f5da <_svfiprintf_r+0x1a6>
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d0c6      	beq.n	800f564 <_svfiprintf_r+0x130>
 800f5d6:	9105      	str	r1, [sp, #20]
 800f5d8:	e7c4      	b.n	800f564 <_svfiprintf_r+0x130>
 800f5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5de:	4604      	mov	r4, r0
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e7f0      	b.n	800f5c6 <_svfiprintf_r+0x192>
 800f5e4:	ab03      	add	r3, sp, #12
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	462a      	mov	r2, r5
 800f5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f624 <_svfiprintf_r+0x1f0>)
 800f5ec:	a904      	add	r1, sp, #16
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	f7fc fb88 	bl	800bd04 <_printf_float>
 800f5f4:	1c42      	adds	r2, r0, #1
 800f5f6:	4606      	mov	r6, r0
 800f5f8:	d1d6      	bne.n	800f5a8 <_svfiprintf_r+0x174>
 800f5fa:	89ab      	ldrh	r3, [r5, #12]
 800f5fc:	065b      	lsls	r3, r3, #25
 800f5fe:	f53f af2d 	bmi.w	800f45c <_svfiprintf_r+0x28>
 800f602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f604:	e72c      	b.n	800f460 <_svfiprintf_r+0x2c>
 800f606:	ab03      	add	r3, sp, #12
 800f608:	9300      	str	r3, [sp, #0]
 800f60a:	462a      	mov	r2, r5
 800f60c:	4b05      	ldr	r3, [pc, #20]	@ (800f624 <_svfiprintf_r+0x1f0>)
 800f60e:	a904      	add	r1, sp, #16
 800f610:	4638      	mov	r0, r7
 800f612:	f7fc fe0f 	bl	800c234 <_printf_i>
 800f616:	e7ed      	b.n	800f5f4 <_svfiprintf_r+0x1c0>
 800f618:	08010f39 	.word	0x08010f39
 800f61c:	08010f43 	.word	0x08010f43
 800f620:	0800bd05 	.word	0x0800bd05
 800f624:	0800f37d 	.word	0x0800f37d
 800f628:	08010f3f 	.word	0x08010f3f

0800f62c <__sfputc_r>:
 800f62c:	6893      	ldr	r3, [r2, #8]
 800f62e:	3b01      	subs	r3, #1
 800f630:	2b00      	cmp	r3, #0
 800f632:	b410      	push	{r4}
 800f634:	6093      	str	r3, [r2, #8]
 800f636:	da08      	bge.n	800f64a <__sfputc_r+0x1e>
 800f638:	6994      	ldr	r4, [r2, #24]
 800f63a:	42a3      	cmp	r3, r4
 800f63c:	db01      	blt.n	800f642 <__sfputc_r+0x16>
 800f63e:	290a      	cmp	r1, #10
 800f640:	d103      	bne.n	800f64a <__sfputc_r+0x1e>
 800f642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f646:	f7fd bab8 	b.w	800cbba <__swbuf_r>
 800f64a:	6813      	ldr	r3, [r2, #0]
 800f64c:	1c58      	adds	r0, r3, #1
 800f64e:	6010      	str	r0, [r2, #0]
 800f650:	7019      	strb	r1, [r3, #0]
 800f652:	4608      	mov	r0, r1
 800f654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <__sfputs_r>:
 800f65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65c:	4606      	mov	r6, r0
 800f65e:	460f      	mov	r7, r1
 800f660:	4614      	mov	r4, r2
 800f662:	18d5      	adds	r5, r2, r3
 800f664:	42ac      	cmp	r4, r5
 800f666:	d101      	bne.n	800f66c <__sfputs_r+0x12>
 800f668:	2000      	movs	r0, #0
 800f66a:	e007      	b.n	800f67c <__sfputs_r+0x22>
 800f66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f670:	463a      	mov	r2, r7
 800f672:	4630      	mov	r0, r6
 800f674:	f7ff ffda 	bl	800f62c <__sfputc_r>
 800f678:	1c43      	adds	r3, r0, #1
 800f67a:	d1f3      	bne.n	800f664 <__sfputs_r+0xa>
 800f67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f680 <_vfiprintf_r>:
 800f680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f684:	460d      	mov	r5, r1
 800f686:	b09d      	sub	sp, #116	@ 0x74
 800f688:	4614      	mov	r4, r2
 800f68a:	4698      	mov	r8, r3
 800f68c:	4606      	mov	r6, r0
 800f68e:	b118      	cbz	r0, 800f698 <_vfiprintf_r+0x18>
 800f690:	6a03      	ldr	r3, [r0, #32]
 800f692:	b90b      	cbnz	r3, 800f698 <_vfiprintf_r+0x18>
 800f694:	f7fd f986 	bl	800c9a4 <__sinit>
 800f698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f69a:	07d9      	lsls	r1, r3, #31
 800f69c:	d405      	bmi.n	800f6aa <_vfiprintf_r+0x2a>
 800f69e:	89ab      	ldrh	r3, [r5, #12]
 800f6a0:	059a      	lsls	r2, r3, #22
 800f6a2:	d402      	bmi.n	800f6aa <_vfiprintf_r+0x2a>
 800f6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6a6:	f7fd fbac 	bl	800ce02 <__retarget_lock_acquire_recursive>
 800f6aa:	89ab      	ldrh	r3, [r5, #12]
 800f6ac:	071b      	lsls	r3, r3, #28
 800f6ae:	d501      	bpl.n	800f6b4 <_vfiprintf_r+0x34>
 800f6b0:	692b      	ldr	r3, [r5, #16]
 800f6b2:	b99b      	cbnz	r3, 800f6dc <_vfiprintf_r+0x5c>
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f7fd fabe 	bl	800cc38 <__swsetup_r>
 800f6bc:	b170      	cbz	r0, 800f6dc <_vfiprintf_r+0x5c>
 800f6be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6c0:	07dc      	lsls	r4, r3, #31
 800f6c2:	d504      	bpl.n	800f6ce <_vfiprintf_r+0x4e>
 800f6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c8:	b01d      	add	sp, #116	@ 0x74
 800f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ce:	89ab      	ldrh	r3, [r5, #12]
 800f6d0:	0598      	lsls	r0, r3, #22
 800f6d2:	d4f7      	bmi.n	800f6c4 <_vfiprintf_r+0x44>
 800f6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6d6:	f7fd fb95 	bl	800ce04 <__retarget_lock_release_recursive>
 800f6da:	e7f3      	b.n	800f6c4 <_vfiprintf_r+0x44>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6e0:	2320      	movs	r3, #32
 800f6e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6ea:	2330      	movs	r3, #48	@ 0x30
 800f6ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f89c <_vfiprintf_r+0x21c>
 800f6f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6f4:	f04f 0901 	mov.w	r9, #1
 800f6f8:	4623      	mov	r3, r4
 800f6fa:	469a      	mov	sl, r3
 800f6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f700:	b10a      	cbz	r2, 800f706 <_vfiprintf_r+0x86>
 800f702:	2a25      	cmp	r2, #37	@ 0x25
 800f704:	d1f9      	bne.n	800f6fa <_vfiprintf_r+0x7a>
 800f706:	ebba 0b04 	subs.w	fp, sl, r4
 800f70a:	d00b      	beq.n	800f724 <_vfiprintf_r+0xa4>
 800f70c:	465b      	mov	r3, fp
 800f70e:	4622      	mov	r2, r4
 800f710:	4629      	mov	r1, r5
 800f712:	4630      	mov	r0, r6
 800f714:	f7ff ffa1 	bl	800f65a <__sfputs_r>
 800f718:	3001      	adds	r0, #1
 800f71a:	f000 80a7 	beq.w	800f86c <_vfiprintf_r+0x1ec>
 800f71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f720:	445a      	add	r2, fp
 800f722:	9209      	str	r2, [sp, #36]	@ 0x24
 800f724:	f89a 3000 	ldrb.w	r3, [sl]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f000 809f 	beq.w	800f86c <_vfiprintf_r+0x1ec>
 800f72e:	2300      	movs	r3, #0
 800f730:	f04f 32ff 	mov.w	r2, #4294967295
 800f734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f738:	f10a 0a01 	add.w	sl, sl, #1
 800f73c:	9304      	str	r3, [sp, #16]
 800f73e:	9307      	str	r3, [sp, #28]
 800f740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f744:	931a      	str	r3, [sp, #104]	@ 0x68
 800f746:	4654      	mov	r4, sl
 800f748:	2205      	movs	r2, #5
 800f74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f74e:	4853      	ldr	r0, [pc, #332]	@ (800f89c <_vfiprintf_r+0x21c>)
 800f750:	f7f0 fd3e 	bl	80001d0 <memchr>
 800f754:	9a04      	ldr	r2, [sp, #16]
 800f756:	b9d8      	cbnz	r0, 800f790 <_vfiprintf_r+0x110>
 800f758:	06d1      	lsls	r1, r2, #27
 800f75a:	bf44      	itt	mi
 800f75c:	2320      	movmi	r3, #32
 800f75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f762:	0713      	lsls	r3, r2, #28
 800f764:	bf44      	itt	mi
 800f766:	232b      	movmi	r3, #43	@ 0x2b
 800f768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f76c:	f89a 3000 	ldrb.w	r3, [sl]
 800f770:	2b2a      	cmp	r3, #42	@ 0x2a
 800f772:	d015      	beq.n	800f7a0 <_vfiprintf_r+0x120>
 800f774:	9a07      	ldr	r2, [sp, #28]
 800f776:	4654      	mov	r4, sl
 800f778:	2000      	movs	r0, #0
 800f77a:	f04f 0c0a 	mov.w	ip, #10
 800f77e:	4621      	mov	r1, r4
 800f780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f784:	3b30      	subs	r3, #48	@ 0x30
 800f786:	2b09      	cmp	r3, #9
 800f788:	d94b      	bls.n	800f822 <_vfiprintf_r+0x1a2>
 800f78a:	b1b0      	cbz	r0, 800f7ba <_vfiprintf_r+0x13a>
 800f78c:	9207      	str	r2, [sp, #28]
 800f78e:	e014      	b.n	800f7ba <_vfiprintf_r+0x13a>
 800f790:	eba0 0308 	sub.w	r3, r0, r8
 800f794:	fa09 f303 	lsl.w	r3, r9, r3
 800f798:	4313      	orrs	r3, r2
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	46a2      	mov	sl, r4
 800f79e:	e7d2      	b.n	800f746 <_vfiprintf_r+0xc6>
 800f7a0:	9b03      	ldr	r3, [sp, #12]
 800f7a2:	1d19      	adds	r1, r3, #4
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	9103      	str	r1, [sp, #12]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	bfbb      	ittet	lt
 800f7ac:	425b      	neglt	r3, r3
 800f7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f7b2:	9307      	strge	r3, [sp, #28]
 800f7b4:	9307      	strlt	r3, [sp, #28]
 800f7b6:	bfb8      	it	lt
 800f7b8:	9204      	strlt	r2, [sp, #16]
 800f7ba:	7823      	ldrb	r3, [r4, #0]
 800f7bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7be:	d10a      	bne.n	800f7d6 <_vfiprintf_r+0x156>
 800f7c0:	7863      	ldrb	r3, [r4, #1]
 800f7c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7c4:	d132      	bne.n	800f82c <_vfiprintf_r+0x1ac>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	1d1a      	adds	r2, r3, #4
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	9203      	str	r2, [sp, #12]
 800f7ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7d2:	3402      	adds	r4, #2
 800f7d4:	9305      	str	r3, [sp, #20]
 800f7d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f8ac <_vfiprintf_r+0x22c>
 800f7da:	7821      	ldrb	r1, [r4, #0]
 800f7dc:	2203      	movs	r2, #3
 800f7de:	4650      	mov	r0, sl
 800f7e0:	f7f0 fcf6 	bl	80001d0 <memchr>
 800f7e4:	b138      	cbz	r0, 800f7f6 <_vfiprintf_r+0x176>
 800f7e6:	9b04      	ldr	r3, [sp, #16]
 800f7e8:	eba0 000a 	sub.w	r0, r0, sl
 800f7ec:	2240      	movs	r2, #64	@ 0x40
 800f7ee:	4082      	lsls	r2, r0
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	3401      	adds	r4, #1
 800f7f4:	9304      	str	r3, [sp, #16]
 800f7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7fa:	4829      	ldr	r0, [pc, #164]	@ (800f8a0 <_vfiprintf_r+0x220>)
 800f7fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f800:	2206      	movs	r2, #6
 800f802:	f7f0 fce5 	bl	80001d0 <memchr>
 800f806:	2800      	cmp	r0, #0
 800f808:	d03f      	beq.n	800f88a <_vfiprintf_r+0x20a>
 800f80a:	4b26      	ldr	r3, [pc, #152]	@ (800f8a4 <_vfiprintf_r+0x224>)
 800f80c:	bb1b      	cbnz	r3, 800f856 <_vfiprintf_r+0x1d6>
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	3307      	adds	r3, #7
 800f812:	f023 0307 	bic.w	r3, r3, #7
 800f816:	3308      	adds	r3, #8
 800f818:	9303      	str	r3, [sp, #12]
 800f81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f81c:	443b      	add	r3, r7
 800f81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f820:	e76a      	b.n	800f6f8 <_vfiprintf_r+0x78>
 800f822:	fb0c 3202 	mla	r2, ip, r2, r3
 800f826:	460c      	mov	r4, r1
 800f828:	2001      	movs	r0, #1
 800f82a:	e7a8      	b.n	800f77e <_vfiprintf_r+0xfe>
 800f82c:	2300      	movs	r3, #0
 800f82e:	3401      	adds	r4, #1
 800f830:	9305      	str	r3, [sp, #20]
 800f832:	4619      	mov	r1, r3
 800f834:	f04f 0c0a 	mov.w	ip, #10
 800f838:	4620      	mov	r0, r4
 800f83a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f83e:	3a30      	subs	r2, #48	@ 0x30
 800f840:	2a09      	cmp	r2, #9
 800f842:	d903      	bls.n	800f84c <_vfiprintf_r+0x1cc>
 800f844:	2b00      	cmp	r3, #0
 800f846:	d0c6      	beq.n	800f7d6 <_vfiprintf_r+0x156>
 800f848:	9105      	str	r1, [sp, #20]
 800f84a:	e7c4      	b.n	800f7d6 <_vfiprintf_r+0x156>
 800f84c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f850:	4604      	mov	r4, r0
 800f852:	2301      	movs	r3, #1
 800f854:	e7f0      	b.n	800f838 <_vfiprintf_r+0x1b8>
 800f856:	ab03      	add	r3, sp, #12
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	462a      	mov	r2, r5
 800f85c:	4b12      	ldr	r3, [pc, #72]	@ (800f8a8 <_vfiprintf_r+0x228>)
 800f85e:	a904      	add	r1, sp, #16
 800f860:	4630      	mov	r0, r6
 800f862:	f7fc fa4f 	bl	800bd04 <_printf_float>
 800f866:	4607      	mov	r7, r0
 800f868:	1c78      	adds	r0, r7, #1
 800f86a:	d1d6      	bne.n	800f81a <_vfiprintf_r+0x19a>
 800f86c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f86e:	07d9      	lsls	r1, r3, #31
 800f870:	d405      	bmi.n	800f87e <_vfiprintf_r+0x1fe>
 800f872:	89ab      	ldrh	r3, [r5, #12]
 800f874:	059a      	lsls	r2, r3, #22
 800f876:	d402      	bmi.n	800f87e <_vfiprintf_r+0x1fe>
 800f878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f87a:	f7fd fac3 	bl	800ce04 <__retarget_lock_release_recursive>
 800f87e:	89ab      	ldrh	r3, [r5, #12]
 800f880:	065b      	lsls	r3, r3, #25
 800f882:	f53f af1f 	bmi.w	800f6c4 <_vfiprintf_r+0x44>
 800f886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f888:	e71e      	b.n	800f6c8 <_vfiprintf_r+0x48>
 800f88a:	ab03      	add	r3, sp, #12
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	462a      	mov	r2, r5
 800f890:	4b05      	ldr	r3, [pc, #20]	@ (800f8a8 <_vfiprintf_r+0x228>)
 800f892:	a904      	add	r1, sp, #16
 800f894:	4630      	mov	r0, r6
 800f896:	f7fc fccd 	bl	800c234 <_printf_i>
 800f89a:	e7e4      	b.n	800f866 <_vfiprintf_r+0x1e6>
 800f89c:	08010f39 	.word	0x08010f39
 800f8a0:	08010f43 	.word	0x08010f43
 800f8a4:	0800bd05 	.word	0x0800bd05
 800f8a8:	0800f65b 	.word	0x0800f65b
 800f8ac:	08010f3f 	.word	0x08010f3f

0800f8b0 <__sflush_r>:
 800f8b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b8:	0716      	lsls	r6, r2, #28
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	460c      	mov	r4, r1
 800f8be:	d454      	bmi.n	800f96a <__sflush_r+0xba>
 800f8c0:	684b      	ldr	r3, [r1, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	dc02      	bgt.n	800f8cc <__sflush_r+0x1c>
 800f8c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	dd48      	ble.n	800f95e <__sflush_r+0xae>
 800f8cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8ce:	2e00      	cmp	r6, #0
 800f8d0:	d045      	beq.n	800f95e <__sflush_r+0xae>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f8d8:	682f      	ldr	r7, [r5, #0]
 800f8da:	6a21      	ldr	r1, [r4, #32]
 800f8dc:	602b      	str	r3, [r5, #0]
 800f8de:	d030      	beq.n	800f942 <__sflush_r+0x92>
 800f8e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f8e2:	89a3      	ldrh	r3, [r4, #12]
 800f8e4:	0759      	lsls	r1, r3, #29
 800f8e6:	d505      	bpl.n	800f8f4 <__sflush_r+0x44>
 800f8e8:	6863      	ldr	r3, [r4, #4]
 800f8ea:	1ad2      	subs	r2, r2, r3
 800f8ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f8ee:	b10b      	cbz	r3, 800f8f4 <__sflush_r+0x44>
 800f8f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f8f2:	1ad2      	subs	r2, r2, r3
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f8f8:	6a21      	ldr	r1, [r4, #32]
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	47b0      	blx	r6
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	89a3      	ldrh	r3, [r4, #12]
 800f902:	d106      	bne.n	800f912 <__sflush_r+0x62>
 800f904:	6829      	ldr	r1, [r5, #0]
 800f906:	291d      	cmp	r1, #29
 800f908:	d82b      	bhi.n	800f962 <__sflush_r+0xb2>
 800f90a:	4a2a      	ldr	r2, [pc, #168]	@ (800f9b4 <__sflush_r+0x104>)
 800f90c:	40ca      	lsrs	r2, r1
 800f90e:	07d6      	lsls	r6, r2, #31
 800f910:	d527      	bpl.n	800f962 <__sflush_r+0xb2>
 800f912:	2200      	movs	r2, #0
 800f914:	6062      	str	r2, [r4, #4]
 800f916:	04d9      	lsls	r1, r3, #19
 800f918:	6922      	ldr	r2, [r4, #16]
 800f91a:	6022      	str	r2, [r4, #0]
 800f91c:	d504      	bpl.n	800f928 <__sflush_r+0x78>
 800f91e:	1c42      	adds	r2, r0, #1
 800f920:	d101      	bne.n	800f926 <__sflush_r+0x76>
 800f922:	682b      	ldr	r3, [r5, #0]
 800f924:	b903      	cbnz	r3, 800f928 <__sflush_r+0x78>
 800f926:	6560      	str	r0, [r4, #84]	@ 0x54
 800f928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f92a:	602f      	str	r7, [r5, #0]
 800f92c:	b1b9      	cbz	r1, 800f95e <__sflush_r+0xae>
 800f92e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f932:	4299      	cmp	r1, r3
 800f934:	d002      	beq.n	800f93c <__sflush_r+0x8c>
 800f936:	4628      	mov	r0, r5
 800f938:	f7fe f8f2 	bl	800db20 <_free_r>
 800f93c:	2300      	movs	r3, #0
 800f93e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f940:	e00d      	b.n	800f95e <__sflush_r+0xae>
 800f942:	2301      	movs	r3, #1
 800f944:	4628      	mov	r0, r5
 800f946:	47b0      	blx	r6
 800f948:	4602      	mov	r2, r0
 800f94a:	1c50      	adds	r0, r2, #1
 800f94c:	d1c9      	bne.n	800f8e2 <__sflush_r+0x32>
 800f94e:	682b      	ldr	r3, [r5, #0]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d0c6      	beq.n	800f8e2 <__sflush_r+0x32>
 800f954:	2b1d      	cmp	r3, #29
 800f956:	d001      	beq.n	800f95c <__sflush_r+0xac>
 800f958:	2b16      	cmp	r3, #22
 800f95a:	d11e      	bne.n	800f99a <__sflush_r+0xea>
 800f95c:	602f      	str	r7, [r5, #0]
 800f95e:	2000      	movs	r0, #0
 800f960:	e022      	b.n	800f9a8 <__sflush_r+0xf8>
 800f962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f966:	b21b      	sxth	r3, r3
 800f968:	e01b      	b.n	800f9a2 <__sflush_r+0xf2>
 800f96a:	690f      	ldr	r7, [r1, #16]
 800f96c:	2f00      	cmp	r7, #0
 800f96e:	d0f6      	beq.n	800f95e <__sflush_r+0xae>
 800f970:	0793      	lsls	r3, r2, #30
 800f972:	680e      	ldr	r6, [r1, #0]
 800f974:	bf08      	it	eq
 800f976:	694b      	ldreq	r3, [r1, #20]
 800f978:	600f      	str	r7, [r1, #0]
 800f97a:	bf18      	it	ne
 800f97c:	2300      	movne	r3, #0
 800f97e:	eba6 0807 	sub.w	r8, r6, r7
 800f982:	608b      	str	r3, [r1, #8]
 800f984:	f1b8 0f00 	cmp.w	r8, #0
 800f988:	dde9      	ble.n	800f95e <__sflush_r+0xae>
 800f98a:	6a21      	ldr	r1, [r4, #32]
 800f98c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f98e:	4643      	mov	r3, r8
 800f990:	463a      	mov	r2, r7
 800f992:	4628      	mov	r0, r5
 800f994:	47b0      	blx	r6
 800f996:	2800      	cmp	r0, #0
 800f998:	dc08      	bgt.n	800f9ac <__sflush_r+0xfc>
 800f99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f99e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9a2:	81a3      	strh	r3, [r4, #12]
 800f9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ac:	4407      	add	r7, r0
 800f9ae:	eba8 0800 	sub.w	r8, r8, r0
 800f9b2:	e7e7      	b.n	800f984 <__sflush_r+0xd4>
 800f9b4:	20400001 	.word	0x20400001

0800f9b8 <_fflush_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	690b      	ldr	r3, [r1, #16]
 800f9bc:	4605      	mov	r5, r0
 800f9be:	460c      	mov	r4, r1
 800f9c0:	b913      	cbnz	r3, 800f9c8 <_fflush_r+0x10>
 800f9c2:	2500      	movs	r5, #0
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	b118      	cbz	r0, 800f9d2 <_fflush_r+0x1a>
 800f9ca:	6a03      	ldr	r3, [r0, #32]
 800f9cc:	b90b      	cbnz	r3, 800f9d2 <_fflush_r+0x1a>
 800f9ce:	f7fc ffe9 	bl	800c9a4 <__sinit>
 800f9d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d0f3      	beq.n	800f9c2 <_fflush_r+0xa>
 800f9da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f9dc:	07d0      	lsls	r0, r2, #31
 800f9de:	d404      	bmi.n	800f9ea <_fflush_r+0x32>
 800f9e0:	0599      	lsls	r1, r3, #22
 800f9e2:	d402      	bmi.n	800f9ea <_fflush_r+0x32>
 800f9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9e6:	f7fd fa0c 	bl	800ce02 <__retarget_lock_acquire_recursive>
 800f9ea:	4628      	mov	r0, r5
 800f9ec:	4621      	mov	r1, r4
 800f9ee:	f7ff ff5f 	bl	800f8b0 <__sflush_r>
 800f9f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f9f4:	07da      	lsls	r2, r3, #31
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	d4e4      	bmi.n	800f9c4 <_fflush_r+0xc>
 800f9fa:	89a3      	ldrh	r3, [r4, #12]
 800f9fc:	059b      	lsls	r3, r3, #22
 800f9fe:	d4e1      	bmi.n	800f9c4 <_fflush_r+0xc>
 800fa00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa02:	f7fd f9ff 	bl	800ce04 <__retarget_lock_release_recursive>
 800fa06:	e7dd      	b.n	800f9c4 <_fflush_r+0xc>

0800fa08 <fiprintf>:
 800fa08:	b40e      	push	{r1, r2, r3}
 800fa0a:	b503      	push	{r0, r1, lr}
 800fa0c:	4601      	mov	r1, r0
 800fa0e:	ab03      	add	r3, sp, #12
 800fa10:	4805      	ldr	r0, [pc, #20]	@ (800fa28 <fiprintf+0x20>)
 800fa12:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa16:	6800      	ldr	r0, [r0, #0]
 800fa18:	9301      	str	r3, [sp, #4]
 800fa1a:	f7ff fe31 	bl	800f680 <_vfiprintf_r>
 800fa1e:	b002      	add	sp, #8
 800fa20:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa24:	b003      	add	sp, #12
 800fa26:	4770      	bx	lr
 800fa28:	20000090 	.word	0x20000090

0800fa2c <__swhatbuf_r>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	460c      	mov	r4, r1
 800fa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa34:	2900      	cmp	r1, #0
 800fa36:	b096      	sub	sp, #88	@ 0x58
 800fa38:	4615      	mov	r5, r2
 800fa3a:	461e      	mov	r6, r3
 800fa3c:	da0d      	bge.n	800fa5a <__swhatbuf_r+0x2e>
 800fa3e:	89a3      	ldrh	r3, [r4, #12]
 800fa40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fa44:	f04f 0100 	mov.w	r1, #0
 800fa48:	bf14      	ite	ne
 800fa4a:	2340      	movne	r3, #64	@ 0x40
 800fa4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fa50:	2000      	movs	r0, #0
 800fa52:	6031      	str	r1, [r6, #0]
 800fa54:	602b      	str	r3, [r5, #0]
 800fa56:	b016      	add	sp, #88	@ 0x58
 800fa58:	bd70      	pop	{r4, r5, r6, pc}
 800fa5a:	466a      	mov	r2, sp
 800fa5c:	f000 f862 	bl	800fb24 <_fstat_r>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	dbec      	blt.n	800fa3e <__swhatbuf_r+0x12>
 800fa64:	9901      	ldr	r1, [sp, #4]
 800fa66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fa6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fa6e:	4259      	negs	r1, r3
 800fa70:	4159      	adcs	r1, r3
 800fa72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa76:	e7eb      	b.n	800fa50 <__swhatbuf_r+0x24>

0800fa78 <__smakebuf_r>:
 800fa78:	898b      	ldrh	r3, [r1, #12]
 800fa7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa7c:	079d      	lsls	r5, r3, #30
 800fa7e:	4606      	mov	r6, r0
 800fa80:	460c      	mov	r4, r1
 800fa82:	d507      	bpl.n	800fa94 <__smakebuf_r+0x1c>
 800fa84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	6123      	str	r3, [r4, #16]
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	6163      	str	r3, [r4, #20]
 800fa90:	b003      	add	sp, #12
 800fa92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa94:	ab01      	add	r3, sp, #4
 800fa96:	466a      	mov	r2, sp
 800fa98:	f7ff ffc8 	bl	800fa2c <__swhatbuf_r>
 800fa9c:	9f00      	ldr	r7, [sp, #0]
 800fa9e:	4605      	mov	r5, r0
 800faa0:	4639      	mov	r1, r7
 800faa2:	4630      	mov	r0, r6
 800faa4:	f7fe f8b0 	bl	800dc08 <_malloc_r>
 800faa8:	b948      	cbnz	r0, 800fabe <__smakebuf_r+0x46>
 800faaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faae:	059a      	lsls	r2, r3, #22
 800fab0:	d4ee      	bmi.n	800fa90 <__smakebuf_r+0x18>
 800fab2:	f023 0303 	bic.w	r3, r3, #3
 800fab6:	f043 0302 	orr.w	r3, r3, #2
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	e7e2      	b.n	800fa84 <__smakebuf_r+0xc>
 800fabe:	89a3      	ldrh	r3, [r4, #12]
 800fac0:	6020      	str	r0, [r4, #0]
 800fac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fac6:	81a3      	strh	r3, [r4, #12]
 800fac8:	9b01      	ldr	r3, [sp, #4]
 800faca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800face:	b15b      	cbz	r3, 800fae8 <__smakebuf_r+0x70>
 800fad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fad4:	4630      	mov	r0, r6
 800fad6:	f000 f837 	bl	800fb48 <_isatty_r>
 800fada:	b128      	cbz	r0, 800fae8 <__smakebuf_r+0x70>
 800fadc:	89a3      	ldrh	r3, [r4, #12]
 800fade:	f023 0303 	bic.w	r3, r3, #3
 800fae2:	f043 0301 	orr.w	r3, r3, #1
 800fae6:	81a3      	strh	r3, [r4, #12]
 800fae8:	89a3      	ldrh	r3, [r4, #12]
 800faea:	431d      	orrs	r5, r3
 800faec:	81a5      	strh	r5, [r4, #12]
 800faee:	e7cf      	b.n	800fa90 <__smakebuf_r+0x18>

0800faf0 <memmove>:
 800faf0:	4288      	cmp	r0, r1
 800faf2:	b510      	push	{r4, lr}
 800faf4:	eb01 0402 	add.w	r4, r1, r2
 800faf8:	d902      	bls.n	800fb00 <memmove+0x10>
 800fafa:	4284      	cmp	r4, r0
 800fafc:	4623      	mov	r3, r4
 800fafe:	d807      	bhi.n	800fb10 <memmove+0x20>
 800fb00:	1e43      	subs	r3, r0, #1
 800fb02:	42a1      	cmp	r1, r4
 800fb04:	d008      	beq.n	800fb18 <memmove+0x28>
 800fb06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb0e:	e7f8      	b.n	800fb02 <memmove+0x12>
 800fb10:	4402      	add	r2, r0
 800fb12:	4601      	mov	r1, r0
 800fb14:	428a      	cmp	r2, r1
 800fb16:	d100      	bne.n	800fb1a <memmove+0x2a>
 800fb18:	bd10      	pop	{r4, pc}
 800fb1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb22:	e7f7      	b.n	800fb14 <memmove+0x24>

0800fb24 <_fstat_r>:
 800fb24:	b538      	push	{r3, r4, r5, lr}
 800fb26:	4d07      	ldr	r5, [pc, #28]	@ (800fb44 <_fstat_r+0x20>)
 800fb28:	2300      	movs	r3, #0
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	4608      	mov	r0, r1
 800fb2e:	4611      	mov	r1, r2
 800fb30:	602b      	str	r3, [r5, #0]
 800fb32:	f7f3 f9f1 	bl	8002f18 <_fstat>
 800fb36:	1c43      	adds	r3, r0, #1
 800fb38:	d102      	bne.n	800fb40 <_fstat_r+0x1c>
 800fb3a:	682b      	ldr	r3, [r5, #0]
 800fb3c:	b103      	cbz	r3, 800fb40 <_fstat_r+0x1c>
 800fb3e:	6023      	str	r3, [r4, #0]
 800fb40:	bd38      	pop	{r3, r4, r5, pc}
 800fb42:	bf00      	nop
 800fb44:	200035ac 	.word	0x200035ac

0800fb48 <_isatty_r>:
 800fb48:	b538      	push	{r3, r4, r5, lr}
 800fb4a:	4d06      	ldr	r5, [pc, #24]	@ (800fb64 <_isatty_r+0x1c>)
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	4604      	mov	r4, r0
 800fb50:	4608      	mov	r0, r1
 800fb52:	602b      	str	r3, [r5, #0]
 800fb54:	f7f3 f9f0 	bl	8002f38 <_isatty>
 800fb58:	1c43      	adds	r3, r0, #1
 800fb5a:	d102      	bne.n	800fb62 <_isatty_r+0x1a>
 800fb5c:	682b      	ldr	r3, [r5, #0]
 800fb5e:	b103      	cbz	r3, 800fb62 <_isatty_r+0x1a>
 800fb60:	6023      	str	r3, [r4, #0]
 800fb62:	bd38      	pop	{r3, r4, r5, pc}
 800fb64:	200035ac 	.word	0x200035ac

0800fb68 <_sbrk_r>:
 800fb68:	b538      	push	{r3, r4, r5, lr}
 800fb6a:	4d06      	ldr	r5, [pc, #24]	@ (800fb84 <_sbrk_r+0x1c>)
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	4604      	mov	r4, r0
 800fb70:	4608      	mov	r0, r1
 800fb72:	602b      	str	r3, [r5, #0]
 800fb74:	f7f3 f9f8 	bl	8002f68 <_sbrk>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	d102      	bne.n	800fb82 <_sbrk_r+0x1a>
 800fb7c:	682b      	ldr	r3, [r5, #0]
 800fb7e:	b103      	cbz	r3, 800fb82 <_sbrk_r+0x1a>
 800fb80:	6023      	str	r3, [r4, #0]
 800fb82:	bd38      	pop	{r3, r4, r5, pc}
 800fb84:	200035ac 	.word	0x200035ac

0800fb88 <nan>:
 800fb88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb90 <nan+0x8>
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	00000000 	.word	0x00000000
 800fb94:	7ff80000 	.word	0x7ff80000

0800fb98 <abort>:
 800fb98:	b508      	push	{r3, lr}
 800fb9a:	2006      	movs	r0, #6
 800fb9c:	f000 fbc4 	bl	8010328 <raise>
 800fba0:	2001      	movs	r0, #1
 800fba2:	f7f3 f969 	bl	8002e78 <_exit>

0800fba6 <_calloc_r>:
 800fba6:	b570      	push	{r4, r5, r6, lr}
 800fba8:	fba1 5402 	umull	r5, r4, r1, r2
 800fbac:	b934      	cbnz	r4, 800fbbc <_calloc_r+0x16>
 800fbae:	4629      	mov	r1, r5
 800fbb0:	f7fe f82a 	bl	800dc08 <_malloc_r>
 800fbb4:	4606      	mov	r6, r0
 800fbb6:	b928      	cbnz	r0, 800fbc4 <_calloc_r+0x1e>
 800fbb8:	4630      	mov	r0, r6
 800fbba:	bd70      	pop	{r4, r5, r6, pc}
 800fbbc:	220c      	movs	r2, #12
 800fbbe:	6002      	str	r2, [r0, #0]
 800fbc0:	2600      	movs	r6, #0
 800fbc2:	e7f9      	b.n	800fbb8 <_calloc_r+0x12>
 800fbc4:	462a      	mov	r2, r5
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	f7fd f88c 	bl	800cce4 <memset>
 800fbcc:	e7f4      	b.n	800fbb8 <_calloc_r+0x12>

0800fbce <rshift>:
 800fbce:	6903      	ldr	r3, [r0, #16]
 800fbd0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fbd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbd8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fbdc:	f100 0414 	add.w	r4, r0, #20
 800fbe0:	dd45      	ble.n	800fc6e <rshift+0xa0>
 800fbe2:	f011 011f 	ands.w	r1, r1, #31
 800fbe6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fbea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fbee:	d10c      	bne.n	800fc0a <rshift+0x3c>
 800fbf0:	f100 0710 	add.w	r7, r0, #16
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	42b1      	cmp	r1, r6
 800fbf8:	d334      	bcc.n	800fc64 <rshift+0x96>
 800fbfa:	1a9b      	subs	r3, r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	1eea      	subs	r2, r5, #3
 800fc00:	4296      	cmp	r6, r2
 800fc02:	bf38      	it	cc
 800fc04:	2300      	movcc	r3, #0
 800fc06:	4423      	add	r3, r4
 800fc08:	e015      	b.n	800fc36 <rshift+0x68>
 800fc0a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fc0e:	f1c1 0820 	rsb	r8, r1, #32
 800fc12:	40cf      	lsrs	r7, r1
 800fc14:	f105 0e04 	add.w	lr, r5, #4
 800fc18:	46a1      	mov	r9, r4
 800fc1a:	4576      	cmp	r6, lr
 800fc1c:	46f4      	mov	ip, lr
 800fc1e:	d815      	bhi.n	800fc4c <rshift+0x7e>
 800fc20:	1a9a      	subs	r2, r3, r2
 800fc22:	0092      	lsls	r2, r2, #2
 800fc24:	3a04      	subs	r2, #4
 800fc26:	3501      	adds	r5, #1
 800fc28:	42ae      	cmp	r6, r5
 800fc2a:	bf38      	it	cc
 800fc2c:	2200      	movcc	r2, #0
 800fc2e:	18a3      	adds	r3, r4, r2
 800fc30:	50a7      	str	r7, [r4, r2]
 800fc32:	b107      	cbz	r7, 800fc36 <rshift+0x68>
 800fc34:	3304      	adds	r3, #4
 800fc36:	1b1a      	subs	r2, r3, r4
 800fc38:	42a3      	cmp	r3, r4
 800fc3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc3e:	bf08      	it	eq
 800fc40:	2300      	moveq	r3, #0
 800fc42:	6102      	str	r2, [r0, #16]
 800fc44:	bf08      	it	eq
 800fc46:	6143      	streq	r3, [r0, #20]
 800fc48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc4c:	f8dc c000 	ldr.w	ip, [ip]
 800fc50:	fa0c fc08 	lsl.w	ip, ip, r8
 800fc54:	ea4c 0707 	orr.w	r7, ip, r7
 800fc58:	f849 7b04 	str.w	r7, [r9], #4
 800fc5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc60:	40cf      	lsrs	r7, r1
 800fc62:	e7da      	b.n	800fc1a <rshift+0x4c>
 800fc64:	f851 cb04 	ldr.w	ip, [r1], #4
 800fc68:	f847 cf04 	str.w	ip, [r7, #4]!
 800fc6c:	e7c3      	b.n	800fbf6 <rshift+0x28>
 800fc6e:	4623      	mov	r3, r4
 800fc70:	e7e1      	b.n	800fc36 <rshift+0x68>

0800fc72 <__hexdig_fun>:
 800fc72:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fc76:	2b09      	cmp	r3, #9
 800fc78:	d802      	bhi.n	800fc80 <__hexdig_fun+0xe>
 800fc7a:	3820      	subs	r0, #32
 800fc7c:	b2c0      	uxtb	r0, r0
 800fc7e:	4770      	bx	lr
 800fc80:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fc84:	2b05      	cmp	r3, #5
 800fc86:	d801      	bhi.n	800fc8c <__hexdig_fun+0x1a>
 800fc88:	3847      	subs	r0, #71	@ 0x47
 800fc8a:	e7f7      	b.n	800fc7c <__hexdig_fun+0xa>
 800fc8c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fc90:	2b05      	cmp	r3, #5
 800fc92:	d801      	bhi.n	800fc98 <__hexdig_fun+0x26>
 800fc94:	3827      	subs	r0, #39	@ 0x27
 800fc96:	e7f1      	b.n	800fc7c <__hexdig_fun+0xa>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	4770      	bx	lr

0800fc9c <__gethex>:
 800fc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca0:	b085      	sub	sp, #20
 800fca2:	468a      	mov	sl, r1
 800fca4:	9302      	str	r3, [sp, #8]
 800fca6:	680b      	ldr	r3, [r1, #0]
 800fca8:	9001      	str	r0, [sp, #4]
 800fcaa:	4690      	mov	r8, r2
 800fcac:	1c9c      	adds	r4, r3, #2
 800fcae:	46a1      	mov	r9, r4
 800fcb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fcb4:	2830      	cmp	r0, #48	@ 0x30
 800fcb6:	d0fa      	beq.n	800fcae <__gethex+0x12>
 800fcb8:	eba9 0303 	sub.w	r3, r9, r3
 800fcbc:	f1a3 0b02 	sub.w	fp, r3, #2
 800fcc0:	f7ff ffd7 	bl	800fc72 <__hexdig_fun>
 800fcc4:	4605      	mov	r5, r0
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d168      	bne.n	800fd9c <__gethex+0x100>
 800fcca:	49a0      	ldr	r1, [pc, #640]	@ (800ff4c <__gethex+0x2b0>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	4648      	mov	r0, r9
 800fcd0:	f7fd f810 	bl	800ccf4 <strncmp>
 800fcd4:	4607      	mov	r7, r0
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d167      	bne.n	800fdaa <__gethex+0x10e>
 800fcda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fcde:	4626      	mov	r6, r4
 800fce0:	f7ff ffc7 	bl	800fc72 <__hexdig_fun>
 800fce4:	2800      	cmp	r0, #0
 800fce6:	d062      	beq.n	800fdae <__gethex+0x112>
 800fce8:	4623      	mov	r3, r4
 800fcea:	7818      	ldrb	r0, [r3, #0]
 800fcec:	2830      	cmp	r0, #48	@ 0x30
 800fcee:	4699      	mov	r9, r3
 800fcf0:	f103 0301 	add.w	r3, r3, #1
 800fcf4:	d0f9      	beq.n	800fcea <__gethex+0x4e>
 800fcf6:	f7ff ffbc 	bl	800fc72 <__hexdig_fun>
 800fcfa:	fab0 f580 	clz	r5, r0
 800fcfe:	096d      	lsrs	r5, r5, #5
 800fd00:	f04f 0b01 	mov.w	fp, #1
 800fd04:	464a      	mov	r2, r9
 800fd06:	4616      	mov	r6, r2
 800fd08:	3201      	adds	r2, #1
 800fd0a:	7830      	ldrb	r0, [r6, #0]
 800fd0c:	f7ff ffb1 	bl	800fc72 <__hexdig_fun>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	d1f8      	bne.n	800fd06 <__gethex+0x6a>
 800fd14:	498d      	ldr	r1, [pc, #564]	@ (800ff4c <__gethex+0x2b0>)
 800fd16:	2201      	movs	r2, #1
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7fc ffeb 	bl	800ccf4 <strncmp>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d13f      	bne.n	800fda2 <__gethex+0x106>
 800fd22:	b944      	cbnz	r4, 800fd36 <__gethex+0x9a>
 800fd24:	1c74      	adds	r4, r6, #1
 800fd26:	4622      	mov	r2, r4
 800fd28:	4616      	mov	r6, r2
 800fd2a:	3201      	adds	r2, #1
 800fd2c:	7830      	ldrb	r0, [r6, #0]
 800fd2e:	f7ff ffa0 	bl	800fc72 <__hexdig_fun>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d1f8      	bne.n	800fd28 <__gethex+0x8c>
 800fd36:	1ba4      	subs	r4, r4, r6
 800fd38:	00a7      	lsls	r7, r4, #2
 800fd3a:	7833      	ldrb	r3, [r6, #0]
 800fd3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fd40:	2b50      	cmp	r3, #80	@ 0x50
 800fd42:	d13e      	bne.n	800fdc2 <__gethex+0x126>
 800fd44:	7873      	ldrb	r3, [r6, #1]
 800fd46:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd48:	d033      	beq.n	800fdb2 <__gethex+0x116>
 800fd4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fd4c:	d034      	beq.n	800fdb8 <__gethex+0x11c>
 800fd4e:	1c71      	adds	r1, r6, #1
 800fd50:	2400      	movs	r4, #0
 800fd52:	7808      	ldrb	r0, [r1, #0]
 800fd54:	f7ff ff8d 	bl	800fc72 <__hexdig_fun>
 800fd58:	1e43      	subs	r3, r0, #1
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	2b18      	cmp	r3, #24
 800fd5e:	d830      	bhi.n	800fdc2 <__gethex+0x126>
 800fd60:	f1a0 0210 	sub.w	r2, r0, #16
 800fd64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fd68:	f7ff ff83 	bl	800fc72 <__hexdig_fun>
 800fd6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fd70:	fa5f fc8c 	uxtb.w	ip, ip
 800fd74:	f1bc 0f18 	cmp.w	ip, #24
 800fd78:	f04f 030a 	mov.w	r3, #10
 800fd7c:	d91e      	bls.n	800fdbc <__gethex+0x120>
 800fd7e:	b104      	cbz	r4, 800fd82 <__gethex+0xe6>
 800fd80:	4252      	negs	r2, r2
 800fd82:	4417      	add	r7, r2
 800fd84:	f8ca 1000 	str.w	r1, [sl]
 800fd88:	b1ed      	cbz	r5, 800fdc6 <__gethex+0x12a>
 800fd8a:	f1bb 0f00 	cmp.w	fp, #0
 800fd8e:	bf0c      	ite	eq
 800fd90:	2506      	moveq	r5, #6
 800fd92:	2500      	movne	r5, #0
 800fd94:	4628      	mov	r0, r5
 800fd96:	b005      	add	sp, #20
 800fd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9c:	2500      	movs	r5, #0
 800fd9e:	462c      	mov	r4, r5
 800fda0:	e7b0      	b.n	800fd04 <__gethex+0x68>
 800fda2:	2c00      	cmp	r4, #0
 800fda4:	d1c7      	bne.n	800fd36 <__gethex+0x9a>
 800fda6:	4627      	mov	r7, r4
 800fda8:	e7c7      	b.n	800fd3a <__gethex+0x9e>
 800fdaa:	464e      	mov	r6, r9
 800fdac:	462f      	mov	r7, r5
 800fdae:	2501      	movs	r5, #1
 800fdb0:	e7c3      	b.n	800fd3a <__gethex+0x9e>
 800fdb2:	2400      	movs	r4, #0
 800fdb4:	1cb1      	adds	r1, r6, #2
 800fdb6:	e7cc      	b.n	800fd52 <__gethex+0xb6>
 800fdb8:	2401      	movs	r4, #1
 800fdba:	e7fb      	b.n	800fdb4 <__gethex+0x118>
 800fdbc:	fb03 0002 	mla	r0, r3, r2, r0
 800fdc0:	e7ce      	b.n	800fd60 <__gethex+0xc4>
 800fdc2:	4631      	mov	r1, r6
 800fdc4:	e7de      	b.n	800fd84 <__gethex+0xe8>
 800fdc6:	eba6 0309 	sub.w	r3, r6, r9
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	4629      	mov	r1, r5
 800fdce:	2b07      	cmp	r3, #7
 800fdd0:	dc0a      	bgt.n	800fde8 <__gethex+0x14c>
 800fdd2:	9801      	ldr	r0, [sp, #4]
 800fdd4:	f7fd ffa4 	bl	800dd20 <_Balloc>
 800fdd8:	4604      	mov	r4, r0
 800fdda:	b940      	cbnz	r0, 800fdee <__gethex+0x152>
 800fddc:	4b5c      	ldr	r3, [pc, #368]	@ (800ff50 <__gethex+0x2b4>)
 800fdde:	4602      	mov	r2, r0
 800fde0:	21e4      	movs	r1, #228	@ 0xe4
 800fde2:	485c      	ldr	r0, [pc, #368]	@ (800ff54 <__gethex+0x2b8>)
 800fde4:	f7fd f824 	bl	800ce30 <__assert_func>
 800fde8:	3101      	adds	r1, #1
 800fdea:	105b      	asrs	r3, r3, #1
 800fdec:	e7ef      	b.n	800fdce <__gethex+0x132>
 800fdee:	f100 0a14 	add.w	sl, r0, #20
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	4655      	mov	r5, sl
 800fdf6:	469b      	mov	fp, r3
 800fdf8:	45b1      	cmp	r9, r6
 800fdfa:	d337      	bcc.n	800fe6c <__gethex+0x1d0>
 800fdfc:	f845 bb04 	str.w	fp, [r5], #4
 800fe00:	eba5 050a 	sub.w	r5, r5, sl
 800fe04:	10ad      	asrs	r5, r5, #2
 800fe06:	6125      	str	r5, [r4, #16]
 800fe08:	4658      	mov	r0, fp
 800fe0a:	f7fe f87b 	bl	800df04 <__hi0bits>
 800fe0e:	016d      	lsls	r5, r5, #5
 800fe10:	f8d8 6000 	ldr.w	r6, [r8]
 800fe14:	1a2d      	subs	r5, r5, r0
 800fe16:	42b5      	cmp	r5, r6
 800fe18:	dd54      	ble.n	800fec4 <__gethex+0x228>
 800fe1a:	1bad      	subs	r5, r5, r6
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f7fe fc07 	bl	800e632 <__any_on>
 800fe24:	4681      	mov	r9, r0
 800fe26:	b178      	cbz	r0, 800fe48 <__gethex+0x1ac>
 800fe28:	1e6b      	subs	r3, r5, #1
 800fe2a:	1159      	asrs	r1, r3, #5
 800fe2c:	f003 021f 	and.w	r2, r3, #31
 800fe30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fe34:	f04f 0901 	mov.w	r9, #1
 800fe38:	fa09 f202 	lsl.w	r2, r9, r2
 800fe3c:	420a      	tst	r2, r1
 800fe3e:	d003      	beq.n	800fe48 <__gethex+0x1ac>
 800fe40:	454b      	cmp	r3, r9
 800fe42:	dc36      	bgt.n	800feb2 <__gethex+0x216>
 800fe44:	f04f 0902 	mov.w	r9, #2
 800fe48:	4629      	mov	r1, r5
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f7ff febf 	bl	800fbce <rshift>
 800fe50:	442f      	add	r7, r5
 800fe52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe56:	42bb      	cmp	r3, r7
 800fe58:	da42      	bge.n	800fee0 <__gethex+0x244>
 800fe5a:	9801      	ldr	r0, [sp, #4]
 800fe5c:	4621      	mov	r1, r4
 800fe5e:	f7fd ff9f 	bl	800dda0 <_Bfree>
 800fe62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe64:	2300      	movs	r3, #0
 800fe66:	6013      	str	r3, [r2, #0]
 800fe68:	25a3      	movs	r5, #163	@ 0xa3
 800fe6a:	e793      	b.n	800fd94 <__gethex+0xf8>
 800fe6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fe70:	2a2e      	cmp	r2, #46	@ 0x2e
 800fe72:	d012      	beq.n	800fe9a <__gethex+0x1fe>
 800fe74:	2b20      	cmp	r3, #32
 800fe76:	d104      	bne.n	800fe82 <__gethex+0x1e6>
 800fe78:	f845 bb04 	str.w	fp, [r5], #4
 800fe7c:	f04f 0b00 	mov.w	fp, #0
 800fe80:	465b      	mov	r3, fp
 800fe82:	7830      	ldrb	r0, [r6, #0]
 800fe84:	9303      	str	r3, [sp, #12]
 800fe86:	f7ff fef4 	bl	800fc72 <__hexdig_fun>
 800fe8a:	9b03      	ldr	r3, [sp, #12]
 800fe8c:	f000 000f 	and.w	r0, r0, #15
 800fe90:	4098      	lsls	r0, r3
 800fe92:	ea4b 0b00 	orr.w	fp, fp, r0
 800fe96:	3304      	adds	r3, #4
 800fe98:	e7ae      	b.n	800fdf8 <__gethex+0x15c>
 800fe9a:	45b1      	cmp	r9, r6
 800fe9c:	d8ea      	bhi.n	800fe74 <__gethex+0x1d8>
 800fe9e:	492b      	ldr	r1, [pc, #172]	@ (800ff4c <__gethex+0x2b0>)
 800fea0:	9303      	str	r3, [sp, #12]
 800fea2:	2201      	movs	r2, #1
 800fea4:	4630      	mov	r0, r6
 800fea6:	f7fc ff25 	bl	800ccf4 <strncmp>
 800feaa:	9b03      	ldr	r3, [sp, #12]
 800feac:	2800      	cmp	r0, #0
 800feae:	d1e1      	bne.n	800fe74 <__gethex+0x1d8>
 800feb0:	e7a2      	b.n	800fdf8 <__gethex+0x15c>
 800feb2:	1ea9      	subs	r1, r5, #2
 800feb4:	4620      	mov	r0, r4
 800feb6:	f7fe fbbc 	bl	800e632 <__any_on>
 800feba:	2800      	cmp	r0, #0
 800febc:	d0c2      	beq.n	800fe44 <__gethex+0x1a8>
 800febe:	f04f 0903 	mov.w	r9, #3
 800fec2:	e7c1      	b.n	800fe48 <__gethex+0x1ac>
 800fec4:	da09      	bge.n	800feda <__gethex+0x23e>
 800fec6:	1b75      	subs	r5, r6, r5
 800fec8:	4621      	mov	r1, r4
 800feca:	9801      	ldr	r0, [sp, #4]
 800fecc:	462a      	mov	r2, r5
 800fece:	f7fe f977 	bl	800e1c0 <__lshift>
 800fed2:	1b7f      	subs	r7, r7, r5
 800fed4:	4604      	mov	r4, r0
 800fed6:	f100 0a14 	add.w	sl, r0, #20
 800feda:	f04f 0900 	mov.w	r9, #0
 800fede:	e7b8      	b.n	800fe52 <__gethex+0x1b6>
 800fee0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fee4:	42bd      	cmp	r5, r7
 800fee6:	dd6f      	ble.n	800ffc8 <__gethex+0x32c>
 800fee8:	1bed      	subs	r5, r5, r7
 800feea:	42ae      	cmp	r6, r5
 800feec:	dc34      	bgt.n	800ff58 <__gethex+0x2bc>
 800feee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d022      	beq.n	800ff3c <__gethex+0x2a0>
 800fef6:	2b03      	cmp	r3, #3
 800fef8:	d024      	beq.n	800ff44 <__gethex+0x2a8>
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d115      	bne.n	800ff2a <__gethex+0x28e>
 800fefe:	42ae      	cmp	r6, r5
 800ff00:	d113      	bne.n	800ff2a <__gethex+0x28e>
 800ff02:	2e01      	cmp	r6, #1
 800ff04:	d10b      	bne.n	800ff1e <__gethex+0x282>
 800ff06:	9a02      	ldr	r2, [sp, #8]
 800ff08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff0c:	6013      	str	r3, [r2, #0]
 800ff0e:	2301      	movs	r3, #1
 800ff10:	6123      	str	r3, [r4, #16]
 800ff12:	f8ca 3000 	str.w	r3, [sl]
 800ff16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff18:	2562      	movs	r5, #98	@ 0x62
 800ff1a:	601c      	str	r4, [r3, #0]
 800ff1c:	e73a      	b.n	800fd94 <__gethex+0xf8>
 800ff1e:	1e71      	subs	r1, r6, #1
 800ff20:	4620      	mov	r0, r4
 800ff22:	f7fe fb86 	bl	800e632 <__any_on>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	d1ed      	bne.n	800ff06 <__gethex+0x26a>
 800ff2a:	9801      	ldr	r0, [sp, #4]
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f7fd ff37 	bl	800dda0 <_Bfree>
 800ff32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff34:	2300      	movs	r3, #0
 800ff36:	6013      	str	r3, [r2, #0]
 800ff38:	2550      	movs	r5, #80	@ 0x50
 800ff3a:	e72b      	b.n	800fd94 <__gethex+0xf8>
 800ff3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1f3      	bne.n	800ff2a <__gethex+0x28e>
 800ff42:	e7e0      	b.n	800ff06 <__gethex+0x26a>
 800ff44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d1dd      	bne.n	800ff06 <__gethex+0x26a>
 800ff4a:	e7ee      	b.n	800ff2a <__gethex+0x28e>
 800ff4c:	08010f37 	.word	0x08010f37
 800ff50:	08010ecd 	.word	0x08010ecd
 800ff54:	08010f52 	.word	0x08010f52
 800ff58:	1e6f      	subs	r7, r5, #1
 800ff5a:	f1b9 0f00 	cmp.w	r9, #0
 800ff5e:	d130      	bne.n	800ffc2 <__gethex+0x326>
 800ff60:	b127      	cbz	r7, 800ff6c <__gethex+0x2d0>
 800ff62:	4639      	mov	r1, r7
 800ff64:	4620      	mov	r0, r4
 800ff66:	f7fe fb64 	bl	800e632 <__any_on>
 800ff6a:	4681      	mov	r9, r0
 800ff6c:	117a      	asrs	r2, r7, #5
 800ff6e:	2301      	movs	r3, #1
 800ff70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ff74:	f007 071f 	and.w	r7, r7, #31
 800ff78:	40bb      	lsls	r3, r7
 800ff7a:	4213      	tst	r3, r2
 800ff7c:	4629      	mov	r1, r5
 800ff7e:	4620      	mov	r0, r4
 800ff80:	bf18      	it	ne
 800ff82:	f049 0902 	orrne.w	r9, r9, #2
 800ff86:	f7ff fe22 	bl	800fbce <rshift>
 800ff8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ff8e:	1b76      	subs	r6, r6, r5
 800ff90:	2502      	movs	r5, #2
 800ff92:	f1b9 0f00 	cmp.w	r9, #0
 800ff96:	d047      	beq.n	8010028 <__gethex+0x38c>
 800ff98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff9c:	2b02      	cmp	r3, #2
 800ff9e:	d015      	beq.n	800ffcc <__gethex+0x330>
 800ffa0:	2b03      	cmp	r3, #3
 800ffa2:	d017      	beq.n	800ffd4 <__gethex+0x338>
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d109      	bne.n	800ffbc <__gethex+0x320>
 800ffa8:	f019 0f02 	tst.w	r9, #2
 800ffac:	d006      	beq.n	800ffbc <__gethex+0x320>
 800ffae:	f8da 3000 	ldr.w	r3, [sl]
 800ffb2:	ea49 0903 	orr.w	r9, r9, r3
 800ffb6:	f019 0f01 	tst.w	r9, #1
 800ffba:	d10e      	bne.n	800ffda <__gethex+0x33e>
 800ffbc:	f045 0510 	orr.w	r5, r5, #16
 800ffc0:	e032      	b.n	8010028 <__gethex+0x38c>
 800ffc2:	f04f 0901 	mov.w	r9, #1
 800ffc6:	e7d1      	b.n	800ff6c <__gethex+0x2d0>
 800ffc8:	2501      	movs	r5, #1
 800ffca:	e7e2      	b.n	800ff92 <__gethex+0x2f6>
 800ffcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffce:	f1c3 0301 	rsb	r3, r3, #1
 800ffd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ffd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0f0      	beq.n	800ffbc <__gethex+0x320>
 800ffda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ffde:	f104 0314 	add.w	r3, r4, #20
 800ffe2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ffe6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ffea:	f04f 0c00 	mov.w	ip, #0
 800ffee:	4618      	mov	r0, r3
 800fff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fff4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fff8:	d01b      	beq.n	8010032 <__gethex+0x396>
 800fffa:	3201      	adds	r2, #1
 800fffc:	6002      	str	r2, [r0, #0]
 800fffe:	2d02      	cmp	r5, #2
 8010000:	f104 0314 	add.w	r3, r4, #20
 8010004:	d13c      	bne.n	8010080 <__gethex+0x3e4>
 8010006:	f8d8 2000 	ldr.w	r2, [r8]
 801000a:	3a01      	subs	r2, #1
 801000c:	42b2      	cmp	r2, r6
 801000e:	d109      	bne.n	8010024 <__gethex+0x388>
 8010010:	1171      	asrs	r1, r6, #5
 8010012:	2201      	movs	r2, #1
 8010014:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010018:	f006 061f 	and.w	r6, r6, #31
 801001c:	fa02 f606 	lsl.w	r6, r2, r6
 8010020:	421e      	tst	r6, r3
 8010022:	d13a      	bne.n	801009a <__gethex+0x3fe>
 8010024:	f045 0520 	orr.w	r5, r5, #32
 8010028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801002a:	601c      	str	r4, [r3, #0]
 801002c:	9b02      	ldr	r3, [sp, #8]
 801002e:	601f      	str	r7, [r3, #0]
 8010030:	e6b0      	b.n	800fd94 <__gethex+0xf8>
 8010032:	4299      	cmp	r1, r3
 8010034:	f843 cc04 	str.w	ip, [r3, #-4]
 8010038:	d8d9      	bhi.n	800ffee <__gethex+0x352>
 801003a:	68a3      	ldr	r3, [r4, #8]
 801003c:	459b      	cmp	fp, r3
 801003e:	db17      	blt.n	8010070 <__gethex+0x3d4>
 8010040:	6861      	ldr	r1, [r4, #4]
 8010042:	9801      	ldr	r0, [sp, #4]
 8010044:	3101      	adds	r1, #1
 8010046:	f7fd fe6b 	bl	800dd20 <_Balloc>
 801004a:	4681      	mov	r9, r0
 801004c:	b918      	cbnz	r0, 8010056 <__gethex+0x3ba>
 801004e:	4b1a      	ldr	r3, [pc, #104]	@ (80100b8 <__gethex+0x41c>)
 8010050:	4602      	mov	r2, r0
 8010052:	2184      	movs	r1, #132	@ 0x84
 8010054:	e6c5      	b.n	800fde2 <__gethex+0x146>
 8010056:	6922      	ldr	r2, [r4, #16]
 8010058:	3202      	adds	r2, #2
 801005a:	f104 010c 	add.w	r1, r4, #12
 801005e:	0092      	lsls	r2, r2, #2
 8010060:	300c      	adds	r0, #12
 8010062:	f7fc fed0 	bl	800ce06 <memcpy>
 8010066:	4621      	mov	r1, r4
 8010068:	9801      	ldr	r0, [sp, #4]
 801006a:	f7fd fe99 	bl	800dda0 <_Bfree>
 801006e:	464c      	mov	r4, r9
 8010070:	6923      	ldr	r3, [r4, #16]
 8010072:	1c5a      	adds	r2, r3, #1
 8010074:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010078:	6122      	str	r2, [r4, #16]
 801007a:	2201      	movs	r2, #1
 801007c:	615a      	str	r2, [r3, #20]
 801007e:	e7be      	b.n	800fffe <__gethex+0x362>
 8010080:	6922      	ldr	r2, [r4, #16]
 8010082:	455a      	cmp	r2, fp
 8010084:	dd0b      	ble.n	801009e <__gethex+0x402>
 8010086:	2101      	movs	r1, #1
 8010088:	4620      	mov	r0, r4
 801008a:	f7ff fda0 	bl	800fbce <rshift>
 801008e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010092:	3701      	adds	r7, #1
 8010094:	42bb      	cmp	r3, r7
 8010096:	f6ff aee0 	blt.w	800fe5a <__gethex+0x1be>
 801009a:	2501      	movs	r5, #1
 801009c:	e7c2      	b.n	8010024 <__gethex+0x388>
 801009e:	f016 061f 	ands.w	r6, r6, #31
 80100a2:	d0fa      	beq.n	801009a <__gethex+0x3fe>
 80100a4:	4453      	add	r3, sl
 80100a6:	f1c6 0620 	rsb	r6, r6, #32
 80100aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80100ae:	f7fd ff29 	bl	800df04 <__hi0bits>
 80100b2:	42b0      	cmp	r0, r6
 80100b4:	dbe7      	blt.n	8010086 <__gethex+0x3ea>
 80100b6:	e7f0      	b.n	801009a <__gethex+0x3fe>
 80100b8:	08010ecd 	.word	0x08010ecd

080100bc <L_shift>:
 80100bc:	f1c2 0208 	rsb	r2, r2, #8
 80100c0:	0092      	lsls	r2, r2, #2
 80100c2:	b570      	push	{r4, r5, r6, lr}
 80100c4:	f1c2 0620 	rsb	r6, r2, #32
 80100c8:	6843      	ldr	r3, [r0, #4]
 80100ca:	6804      	ldr	r4, [r0, #0]
 80100cc:	fa03 f506 	lsl.w	r5, r3, r6
 80100d0:	432c      	orrs	r4, r5
 80100d2:	40d3      	lsrs	r3, r2
 80100d4:	6004      	str	r4, [r0, #0]
 80100d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80100da:	4288      	cmp	r0, r1
 80100dc:	d3f4      	bcc.n	80100c8 <L_shift+0xc>
 80100de:	bd70      	pop	{r4, r5, r6, pc}

080100e0 <__match>:
 80100e0:	b530      	push	{r4, r5, lr}
 80100e2:	6803      	ldr	r3, [r0, #0]
 80100e4:	3301      	adds	r3, #1
 80100e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ea:	b914      	cbnz	r4, 80100f2 <__match+0x12>
 80100ec:	6003      	str	r3, [r0, #0]
 80100ee:	2001      	movs	r0, #1
 80100f0:	bd30      	pop	{r4, r5, pc}
 80100f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80100fa:	2d19      	cmp	r5, #25
 80100fc:	bf98      	it	ls
 80100fe:	3220      	addls	r2, #32
 8010100:	42a2      	cmp	r2, r4
 8010102:	d0f0      	beq.n	80100e6 <__match+0x6>
 8010104:	2000      	movs	r0, #0
 8010106:	e7f3      	b.n	80100f0 <__match+0x10>

08010108 <__hexnan>:
 8010108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010c:	680b      	ldr	r3, [r1, #0]
 801010e:	6801      	ldr	r1, [r0, #0]
 8010110:	115e      	asrs	r6, r3, #5
 8010112:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010116:	f013 031f 	ands.w	r3, r3, #31
 801011a:	b087      	sub	sp, #28
 801011c:	bf18      	it	ne
 801011e:	3604      	addne	r6, #4
 8010120:	2500      	movs	r5, #0
 8010122:	1f37      	subs	r7, r6, #4
 8010124:	4682      	mov	sl, r0
 8010126:	4690      	mov	r8, r2
 8010128:	9301      	str	r3, [sp, #4]
 801012a:	f846 5c04 	str.w	r5, [r6, #-4]
 801012e:	46b9      	mov	r9, r7
 8010130:	463c      	mov	r4, r7
 8010132:	9502      	str	r5, [sp, #8]
 8010134:	46ab      	mov	fp, r5
 8010136:	784a      	ldrb	r2, [r1, #1]
 8010138:	1c4b      	adds	r3, r1, #1
 801013a:	9303      	str	r3, [sp, #12]
 801013c:	b342      	cbz	r2, 8010190 <__hexnan+0x88>
 801013e:	4610      	mov	r0, r2
 8010140:	9105      	str	r1, [sp, #20]
 8010142:	9204      	str	r2, [sp, #16]
 8010144:	f7ff fd95 	bl	800fc72 <__hexdig_fun>
 8010148:	2800      	cmp	r0, #0
 801014a:	d151      	bne.n	80101f0 <__hexnan+0xe8>
 801014c:	9a04      	ldr	r2, [sp, #16]
 801014e:	9905      	ldr	r1, [sp, #20]
 8010150:	2a20      	cmp	r2, #32
 8010152:	d818      	bhi.n	8010186 <__hexnan+0x7e>
 8010154:	9b02      	ldr	r3, [sp, #8]
 8010156:	459b      	cmp	fp, r3
 8010158:	dd13      	ble.n	8010182 <__hexnan+0x7a>
 801015a:	454c      	cmp	r4, r9
 801015c:	d206      	bcs.n	801016c <__hexnan+0x64>
 801015e:	2d07      	cmp	r5, #7
 8010160:	dc04      	bgt.n	801016c <__hexnan+0x64>
 8010162:	462a      	mov	r2, r5
 8010164:	4649      	mov	r1, r9
 8010166:	4620      	mov	r0, r4
 8010168:	f7ff ffa8 	bl	80100bc <L_shift>
 801016c:	4544      	cmp	r4, r8
 801016e:	d952      	bls.n	8010216 <__hexnan+0x10e>
 8010170:	2300      	movs	r3, #0
 8010172:	f1a4 0904 	sub.w	r9, r4, #4
 8010176:	f844 3c04 	str.w	r3, [r4, #-4]
 801017a:	f8cd b008 	str.w	fp, [sp, #8]
 801017e:	464c      	mov	r4, r9
 8010180:	461d      	mov	r5, r3
 8010182:	9903      	ldr	r1, [sp, #12]
 8010184:	e7d7      	b.n	8010136 <__hexnan+0x2e>
 8010186:	2a29      	cmp	r2, #41	@ 0x29
 8010188:	d157      	bne.n	801023a <__hexnan+0x132>
 801018a:	3102      	adds	r1, #2
 801018c:	f8ca 1000 	str.w	r1, [sl]
 8010190:	f1bb 0f00 	cmp.w	fp, #0
 8010194:	d051      	beq.n	801023a <__hexnan+0x132>
 8010196:	454c      	cmp	r4, r9
 8010198:	d206      	bcs.n	80101a8 <__hexnan+0xa0>
 801019a:	2d07      	cmp	r5, #7
 801019c:	dc04      	bgt.n	80101a8 <__hexnan+0xa0>
 801019e:	462a      	mov	r2, r5
 80101a0:	4649      	mov	r1, r9
 80101a2:	4620      	mov	r0, r4
 80101a4:	f7ff ff8a 	bl	80100bc <L_shift>
 80101a8:	4544      	cmp	r4, r8
 80101aa:	d936      	bls.n	801021a <__hexnan+0x112>
 80101ac:	f1a8 0204 	sub.w	r2, r8, #4
 80101b0:	4623      	mov	r3, r4
 80101b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80101b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80101ba:	429f      	cmp	r7, r3
 80101bc:	d2f9      	bcs.n	80101b2 <__hexnan+0xaa>
 80101be:	1b3b      	subs	r3, r7, r4
 80101c0:	f023 0303 	bic.w	r3, r3, #3
 80101c4:	3304      	adds	r3, #4
 80101c6:	3401      	adds	r4, #1
 80101c8:	3e03      	subs	r6, #3
 80101ca:	42b4      	cmp	r4, r6
 80101cc:	bf88      	it	hi
 80101ce:	2304      	movhi	r3, #4
 80101d0:	4443      	add	r3, r8
 80101d2:	2200      	movs	r2, #0
 80101d4:	f843 2b04 	str.w	r2, [r3], #4
 80101d8:	429f      	cmp	r7, r3
 80101da:	d2fb      	bcs.n	80101d4 <__hexnan+0xcc>
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	b91b      	cbnz	r3, 80101e8 <__hexnan+0xe0>
 80101e0:	4547      	cmp	r7, r8
 80101e2:	d128      	bne.n	8010236 <__hexnan+0x12e>
 80101e4:	2301      	movs	r3, #1
 80101e6:	603b      	str	r3, [r7, #0]
 80101e8:	2005      	movs	r0, #5
 80101ea:	b007      	add	sp, #28
 80101ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f0:	3501      	adds	r5, #1
 80101f2:	2d08      	cmp	r5, #8
 80101f4:	f10b 0b01 	add.w	fp, fp, #1
 80101f8:	dd06      	ble.n	8010208 <__hexnan+0x100>
 80101fa:	4544      	cmp	r4, r8
 80101fc:	d9c1      	bls.n	8010182 <__hexnan+0x7a>
 80101fe:	2300      	movs	r3, #0
 8010200:	f844 3c04 	str.w	r3, [r4, #-4]
 8010204:	2501      	movs	r5, #1
 8010206:	3c04      	subs	r4, #4
 8010208:	6822      	ldr	r2, [r4, #0]
 801020a:	f000 000f 	and.w	r0, r0, #15
 801020e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010212:	6020      	str	r0, [r4, #0]
 8010214:	e7b5      	b.n	8010182 <__hexnan+0x7a>
 8010216:	2508      	movs	r5, #8
 8010218:	e7b3      	b.n	8010182 <__hexnan+0x7a>
 801021a:	9b01      	ldr	r3, [sp, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d0dd      	beq.n	80101dc <__hexnan+0xd4>
 8010220:	f1c3 0320 	rsb	r3, r3, #32
 8010224:	f04f 32ff 	mov.w	r2, #4294967295
 8010228:	40da      	lsrs	r2, r3
 801022a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801022e:	4013      	ands	r3, r2
 8010230:	f846 3c04 	str.w	r3, [r6, #-4]
 8010234:	e7d2      	b.n	80101dc <__hexnan+0xd4>
 8010236:	3f04      	subs	r7, #4
 8010238:	e7d0      	b.n	80101dc <__hexnan+0xd4>
 801023a:	2004      	movs	r0, #4
 801023c:	e7d5      	b.n	80101ea <__hexnan+0xe2>

0801023e <__ascii_mbtowc>:
 801023e:	b082      	sub	sp, #8
 8010240:	b901      	cbnz	r1, 8010244 <__ascii_mbtowc+0x6>
 8010242:	a901      	add	r1, sp, #4
 8010244:	b142      	cbz	r2, 8010258 <__ascii_mbtowc+0x1a>
 8010246:	b14b      	cbz	r3, 801025c <__ascii_mbtowc+0x1e>
 8010248:	7813      	ldrb	r3, [r2, #0]
 801024a:	600b      	str	r3, [r1, #0]
 801024c:	7812      	ldrb	r2, [r2, #0]
 801024e:	1e10      	subs	r0, r2, #0
 8010250:	bf18      	it	ne
 8010252:	2001      	movne	r0, #1
 8010254:	b002      	add	sp, #8
 8010256:	4770      	bx	lr
 8010258:	4610      	mov	r0, r2
 801025a:	e7fb      	b.n	8010254 <__ascii_mbtowc+0x16>
 801025c:	f06f 0001 	mvn.w	r0, #1
 8010260:	e7f8      	b.n	8010254 <__ascii_mbtowc+0x16>

08010262 <_realloc_r>:
 8010262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010266:	4607      	mov	r7, r0
 8010268:	4614      	mov	r4, r2
 801026a:	460d      	mov	r5, r1
 801026c:	b921      	cbnz	r1, 8010278 <_realloc_r+0x16>
 801026e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010272:	4611      	mov	r1, r2
 8010274:	f7fd bcc8 	b.w	800dc08 <_malloc_r>
 8010278:	b92a      	cbnz	r2, 8010286 <_realloc_r+0x24>
 801027a:	f7fd fc51 	bl	800db20 <_free_r>
 801027e:	4625      	mov	r5, r4
 8010280:	4628      	mov	r0, r5
 8010282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010286:	f000 f86b 	bl	8010360 <_malloc_usable_size_r>
 801028a:	4284      	cmp	r4, r0
 801028c:	4606      	mov	r6, r0
 801028e:	d802      	bhi.n	8010296 <_realloc_r+0x34>
 8010290:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010294:	d8f4      	bhi.n	8010280 <_realloc_r+0x1e>
 8010296:	4621      	mov	r1, r4
 8010298:	4638      	mov	r0, r7
 801029a:	f7fd fcb5 	bl	800dc08 <_malloc_r>
 801029e:	4680      	mov	r8, r0
 80102a0:	b908      	cbnz	r0, 80102a6 <_realloc_r+0x44>
 80102a2:	4645      	mov	r5, r8
 80102a4:	e7ec      	b.n	8010280 <_realloc_r+0x1e>
 80102a6:	42b4      	cmp	r4, r6
 80102a8:	4622      	mov	r2, r4
 80102aa:	4629      	mov	r1, r5
 80102ac:	bf28      	it	cs
 80102ae:	4632      	movcs	r2, r6
 80102b0:	f7fc fda9 	bl	800ce06 <memcpy>
 80102b4:	4629      	mov	r1, r5
 80102b6:	4638      	mov	r0, r7
 80102b8:	f7fd fc32 	bl	800db20 <_free_r>
 80102bc:	e7f1      	b.n	80102a2 <_realloc_r+0x40>

080102be <__ascii_wctomb>:
 80102be:	4603      	mov	r3, r0
 80102c0:	4608      	mov	r0, r1
 80102c2:	b141      	cbz	r1, 80102d6 <__ascii_wctomb+0x18>
 80102c4:	2aff      	cmp	r2, #255	@ 0xff
 80102c6:	d904      	bls.n	80102d2 <__ascii_wctomb+0x14>
 80102c8:	228a      	movs	r2, #138	@ 0x8a
 80102ca:	601a      	str	r2, [r3, #0]
 80102cc:	f04f 30ff 	mov.w	r0, #4294967295
 80102d0:	4770      	bx	lr
 80102d2:	700a      	strb	r2, [r1, #0]
 80102d4:	2001      	movs	r0, #1
 80102d6:	4770      	bx	lr

080102d8 <_raise_r>:
 80102d8:	291f      	cmp	r1, #31
 80102da:	b538      	push	{r3, r4, r5, lr}
 80102dc:	4605      	mov	r5, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	d904      	bls.n	80102ec <_raise_r+0x14>
 80102e2:	2316      	movs	r3, #22
 80102e4:	6003      	str	r3, [r0, #0]
 80102e6:	f04f 30ff 	mov.w	r0, #4294967295
 80102ea:	bd38      	pop	{r3, r4, r5, pc}
 80102ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80102ee:	b112      	cbz	r2, 80102f6 <_raise_r+0x1e>
 80102f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102f4:	b94b      	cbnz	r3, 801030a <_raise_r+0x32>
 80102f6:	4628      	mov	r0, r5
 80102f8:	f000 f830 	bl	801035c <_getpid_r>
 80102fc:	4622      	mov	r2, r4
 80102fe:	4601      	mov	r1, r0
 8010300:	4628      	mov	r0, r5
 8010302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010306:	f000 b817 	b.w	8010338 <_kill_r>
 801030a:	2b01      	cmp	r3, #1
 801030c:	d00a      	beq.n	8010324 <_raise_r+0x4c>
 801030e:	1c59      	adds	r1, r3, #1
 8010310:	d103      	bne.n	801031a <_raise_r+0x42>
 8010312:	2316      	movs	r3, #22
 8010314:	6003      	str	r3, [r0, #0]
 8010316:	2001      	movs	r0, #1
 8010318:	e7e7      	b.n	80102ea <_raise_r+0x12>
 801031a:	2100      	movs	r1, #0
 801031c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010320:	4620      	mov	r0, r4
 8010322:	4798      	blx	r3
 8010324:	2000      	movs	r0, #0
 8010326:	e7e0      	b.n	80102ea <_raise_r+0x12>

08010328 <raise>:
 8010328:	4b02      	ldr	r3, [pc, #8]	@ (8010334 <raise+0xc>)
 801032a:	4601      	mov	r1, r0
 801032c:	6818      	ldr	r0, [r3, #0]
 801032e:	f7ff bfd3 	b.w	80102d8 <_raise_r>
 8010332:	bf00      	nop
 8010334:	20000090 	.word	0x20000090

08010338 <_kill_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4d07      	ldr	r5, [pc, #28]	@ (8010358 <_kill_r+0x20>)
 801033c:	2300      	movs	r3, #0
 801033e:	4604      	mov	r4, r0
 8010340:	4608      	mov	r0, r1
 8010342:	4611      	mov	r1, r2
 8010344:	602b      	str	r3, [r5, #0]
 8010346:	f7f2 fd87 	bl	8002e58 <_kill>
 801034a:	1c43      	adds	r3, r0, #1
 801034c:	d102      	bne.n	8010354 <_kill_r+0x1c>
 801034e:	682b      	ldr	r3, [r5, #0]
 8010350:	b103      	cbz	r3, 8010354 <_kill_r+0x1c>
 8010352:	6023      	str	r3, [r4, #0]
 8010354:	bd38      	pop	{r3, r4, r5, pc}
 8010356:	bf00      	nop
 8010358:	200035ac 	.word	0x200035ac

0801035c <_getpid_r>:
 801035c:	f7f2 bd74 	b.w	8002e48 <_getpid>

08010360 <_malloc_usable_size_r>:
 8010360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010364:	1f18      	subs	r0, r3, #4
 8010366:	2b00      	cmp	r3, #0
 8010368:	bfbc      	itt	lt
 801036a:	580b      	ldrlt	r3, [r1, r0]
 801036c:	18c0      	addlt	r0, r0, r3
 801036e:	4770      	bx	lr

08010370 <powf>:
 8010370:	b508      	push	{r3, lr}
 8010372:	ed2d 8b04 	vpush	{d8-d9}
 8010376:	eeb0 8a60 	vmov.f32	s16, s1
 801037a:	eeb0 9a40 	vmov.f32	s18, s0
 801037e:	f000 f859 	bl	8010434 <__ieee754_powf>
 8010382:	eeb4 8a48 	vcmp.f32	s16, s16
 8010386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038a:	eef0 8a40 	vmov.f32	s17, s0
 801038e:	d63e      	bvs.n	801040e <powf+0x9e>
 8010390:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010398:	d112      	bne.n	80103c0 <powf+0x50>
 801039a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a2:	d039      	beq.n	8010418 <powf+0xa8>
 80103a4:	eeb0 0a48 	vmov.f32	s0, s16
 80103a8:	f000 f839 	bl	801041e <finitef>
 80103ac:	b378      	cbz	r0, 801040e <powf+0x9e>
 80103ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80103b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b6:	d52a      	bpl.n	801040e <powf+0x9e>
 80103b8:	f7fc fcf8 	bl	800cdac <__errno>
 80103bc:	2322      	movs	r3, #34	@ 0x22
 80103be:	e014      	b.n	80103ea <powf+0x7a>
 80103c0:	f000 f82d 	bl	801041e <finitef>
 80103c4:	b998      	cbnz	r0, 80103ee <powf+0x7e>
 80103c6:	eeb0 0a49 	vmov.f32	s0, s18
 80103ca:	f000 f828 	bl	801041e <finitef>
 80103ce:	b170      	cbz	r0, 80103ee <powf+0x7e>
 80103d0:	eeb0 0a48 	vmov.f32	s0, s16
 80103d4:	f000 f823 	bl	801041e <finitef>
 80103d8:	b148      	cbz	r0, 80103ee <powf+0x7e>
 80103da:	eef4 8a68 	vcmp.f32	s17, s17
 80103de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e2:	d7e9      	bvc.n	80103b8 <powf+0x48>
 80103e4:	f7fc fce2 	bl	800cdac <__errno>
 80103e8:	2321      	movs	r3, #33	@ 0x21
 80103ea:	6003      	str	r3, [r0, #0]
 80103ec:	e00f      	b.n	801040e <powf+0x9e>
 80103ee:	eef5 8a40 	vcmp.f32	s17, #0.0
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	d10a      	bne.n	801040e <powf+0x9e>
 80103f8:	eeb0 0a49 	vmov.f32	s0, s18
 80103fc:	f000 f80f 	bl	801041e <finitef>
 8010400:	b128      	cbz	r0, 801040e <powf+0x9e>
 8010402:	eeb0 0a48 	vmov.f32	s0, s16
 8010406:	f000 f80a 	bl	801041e <finitef>
 801040a:	2800      	cmp	r0, #0
 801040c:	d1d4      	bne.n	80103b8 <powf+0x48>
 801040e:	eeb0 0a68 	vmov.f32	s0, s17
 8010412:	ecbd 8b04 	vpop	{d8-d9}
 8010416:	bd08      	pop	{r3, pc}
 8010418:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801041c:	e7f7      	b.n	801040e <powf+0x9e>

0801041e <finitef>:
 801041e:	ee10 3a10 	vmov	r3, s0
 8010422:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010426:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801042a:	bfac      	ite	ge
 801042c:	2000      	movge	r0, #0
 801042e:	2001      	movlt	r0, #1
 8010430:	4770      	bx	lr
	...

08010434 <__ieee754_powf>:
 8010434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010438:	ee10 4a90 	vmov	r4, s1
 801043c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010440:	ed2d 8b02 	vpush	{d8}
 8010444:	ee10 6a10 	vmov	r6, s0
 8010448:	eeb0 8a40 	vmov.f32	s16, s0
 801044c:	eef0 8a60 	vmov.f32	s17, s1
 8010450:	d10c      	bne.n	801046c <__ieee754_powf+0x38>
 8010452:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8010456:	0076      	lsls	r6, r6, #1
 8010458:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801045c:	f240 8274 	bls.w	8010948 <__ieee754_powf+0x514>
 8010460:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010464:	ecbd 8b02 	vpop	{d8}
 8010468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801046c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010470:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010474:	d802      	bhi.n	801047c <__ieee754_powf+0x48>
 8010476:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801047a:	d908      	bls.n	801048e <__ieee754_powf+0x5a>
 801047c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010480:	d1ee      	bne.n	8010460 <__ieee754_powf+0x2c>
 8010482:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010486:	0064      	lsls	r4, r4, #1
 8010488:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801048c:	e7e6      	b.n	801045c <__ieee754_powf+0x28>
 801048e:	2e00      	cmp	r6, #0
 8010490:	da1f      	bge.n	80104d2 <__ieee754_powf+0x9e>
 8010492:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010496:	f080 8260 	bcs.w	801095a <__ieee754_powf+0x526>
 801049a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801049e:	d32f      	bcc.n	8010500 <__ieee754_powf+0xcc>
 80104a0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80104a4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80104a8:	fa49 f503 	asr.w	r5, r9, r3
 80104ac:	fa05 f303 	lsl.w	r3, r5, r3
 80104b0:	454b      	cmp	r3, r9
 80104b2:	d123      	bne.n	80104fc <__ieee754_powf+0xc8>
 80104b4:	f005 0501 	and.w	r5, r5, #1
 80104b8:	f1c5 0502 	rsb	r5, r5, #2
 80104bc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80104c0:	d11f      	bne.n	8010502 <__ieee754_powf+0xce>
 80104c2:	2c00      	cmp	r4, #0
 80104c4:	f280 8246 	bge.w	8010954 <__ieee754_powf+0x520>
 80104c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80104cc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80104d0:	e7c8      	b.n	8010464 <__ieee754_powf+0x30>
 80104d2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80104d6:	d111      	bne.n	80104fc <__ieee754_powf+0xc8>
 80104d8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80104dc:	f000 8234 	beq.w	8010948 <__ieee754_powf+0x514>
 80104e0:	d906      	bls.n	80104f0 <__ieee754_powf+0xbc>
 80104e2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80107f8 <__ieee754_powf+0x3c4>
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	bfa8      	it	ge
 80104ea:	eeb0 0a68 	vmovge.f32	s0, s17
 80104ee:	e7b9      	b.n	8010464 <__ieee754_powf+0x30>
 80104f0:	2c00      	cmp	r4, #0
 80104f2:	f280 822c 	bge.w	801094e <__ieee754_powf+0x51a>
 80104f6:	eeb1 0a68 	vneg.f32	s0, s17
 80104fa:	e7b3      	b.n	8010464 <__ieee754_powf+0x30>
 80104fc:	2500      	movs	r5, #0
 80104fe:	e7dd      	b.n	80104bc <__ieee754_powf+0x88>
 8010500:	2500      	movs	r5, #0
 8010502:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010506:	d102      	bne.n	801050e <__ieee754_powf+0xda>
 8010508:	ee28 0a08 	vmul.f32	s0, s16, s16
 801050c:	e7aa      	b.n	8010464 <__ieee754_powf+0x30>
 801050e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010512:	f040 8227 	bne.w	8010964 <__ieee754_powf+0x530>
 8010516:	2e00      	cmp	r6, #0
 8010518:	f2c0 8224 	blt.w	8010964 <__ieee754_powf+0x530>
 801051c:	eeb0 0a48 	vmov.f32	s0, s16
 8010520:	ecbd 8b02 	vpop	{d8}
 8010524:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010528:	f000 bae6 	b.w	8010af8 <__ieee754_sqrtf>
 801052c:	2d01      	cmp	r5, #1
 801052e:	d199      	bne.n	8010464 <__ieee754_powf+0x30>
 8010530:	eeb1 0a40 	vneg.f32	s0, s0
 8010534:	e796      	b.n	8010464 <__ieee754_powf+0x30>
 8010536:	0ff0      	lsrs	r0, r6, #31
 8010538:	3801      	subs	r0, #1
 801053a:	ea55 0300 	orrs.w	r3, r5, r0
 801053e:	d104      	bne.n	801054a <__ieee754_powf+0x116>
 8010540:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010544:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010548:	e78c      	b.n	8010464 <__ieee754_powf+0x30>
 801054a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801054e:	d96d      	bls.n	801062c <__ieee754_powf+0x1f8>
 8010550:	4baa      	ldr	r3, [pc, #680]	@ (80107fc <__ieee754_powf+0x3c8>)
 8010552:	4598      	cmp	r8, r3
 8010554:	d808      	bhi.n	8010568 <__ieee754_powf+0x134>
 8010556:	2c00      	cmp	r4, #0
 8010558:	da0b      	bge.n	8010572 <__ieee754_powf+0x13e>
 801055a:	2000      	movs	r0, #0
 801055c:	ecbd 8b02 	vpop	{d8}
 8010560:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010564:	f000 bac2 	b.w	8010aec <__math_oflowf>
 8010568:	4ba5      	ldr	r3, [pc, #660]	@ (8010800 <__ieee754_powf+0x3cc>)
 801056a:	4598      	cmp	r8, r3
 801056c:	d908      	bls.n	8010580 <__ieee754_powf+0x14c>
 801056e:	2c00      	cmp	r4, #0
 8010570:	dcf3      	bgt.n	801055a <__ieee754_powf+0x126>
 8010572:	2000      	movs	r0, #0
 8010574:	ecbd 8b02 	vpop	{d8}
 8010578:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801057c:	f000 bab0 	b.w	8010ae0 <__math_uflowf>
 8010580:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010584:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010588:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8010804 <__ieee754_powf+0x3d0>
 801058c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010590:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010594:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010598:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801059c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80105a0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8010808 <__ieee754_powf+0x3d4>
 80105a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105a8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801080c <__ieee754_powf+0x3d8>
 80105ac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80105b0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8010810 <__ieee754_powf+0x3dc>
 80105b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80105b8:	eeb0 7a67 	vmov.f32	s14, s15
 80105bc:	eea0 7a26 	vfma.f32	s14, s0, s13
 80105c0:	ee17 3a10 	vmov	r3, s14
 80105c4:	f36f 030b 	bfc	r3, #0, #12
 80105c8:	ee07 3a10 	vmov	s14, r3
 80105cc:	eeb0 6a47 	vmov.f32	s12, s14
 80105d0:	eea0 6a66 	vfms.f32	s12, s0, s13
 80105d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80105d8:	3d01      	subs	r5, #1
 80105da:	4305      	orrs	r5, r0
 80105dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80105e0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80105e4:	f36f 040b 	bfc	r4, #0, #12
 80105e8:	bf18      	it	ne
 80105ea:	eeb0 8a66 	vmovne.f32	s16, s13
 80105ee:	ee06 4a90 	vmov	s13, r4
 80105f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80105f6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80105fa:	ee67 7a26 	vmul.f32	s15, s14, s13
 80105fe:	eee6 0a07 	vfma.f32	s1, s12, s14
 8010602:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010606:	ee17 1a10 	vmov	r1, s14
 801060a:	2900      	cmp	r1, #0
 801060c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010610:	f340 80dd 	ble.w	80107ce <__ieee754_powf+0x39a>
 8010614:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010618:	f240 80ca 	bls.w	80107b0 <__ieee754_powf+0x37c>
 801061c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010624:	bf4c      	ite	mi
 8010626:	2001      	movmi	r0, #1
 8010628:	2000      	movpl	r0, #0
 801062a:	e797      	b.n	801055c <__ieee754_powf+0x128>
 801062c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010630:	bf01      	itttt	eq
 8010632:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010814 <__ieee754_powf+0x3e0>
 8010636:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801063a:	f06f 0317 	mvneq.w	r3, #23
 801063e:	ee17 7a90 	vmoveq	r7, s15
 8010642:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010646:	bf18      	it	ne
 8010648:	2300      	movne	r3, #0
 801064a:	3a7f      	subs	r2, #127	@ 0x7f
 801064c:	441a      	add	r2, r3
 801064e:	4b72      	ldr	r3, [pc, #456]	@ (8010818 <__ieee754_powf+0x3e4>)
 8010650:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010654:	429f      	cmp	r7, r3
 8010656:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801065a:	dd06      	ble.n	801066a <__ieee754_powf+0x236>
 801065c:	4b6f      	ldr	r3, [pc, #444]	@ (801081c <__ieee754_powf+0x3e8>)
 801065e:	429f      	cmp	r7, r3
 8010660:	f340 80a4 	ble.w	80107ac <__ieee754_powf+0x378>
 8010664:	3201      	adds	r2, #1
 8010666:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801066a:	2600      	movs	r6, #0
 801066c:	4b6c      	ldr	r3, [pc, #432]	@ (8010820 <__ieee754_powf+0x3ec>)
 801066e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010672:	ee07 1a10 	vmov	s14, r1
 8010676:	edd3 5a00 	vldr	s11, [r3]
 801067a:	4b6a      	ldr	r3, [pc, #424]	@ (8010824 <__ieee754_powf+0x3f0>)
 801067c:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010684:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010688:	1049      	asrs	r1, r1, #1
 801068a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801068e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010692:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010696:	ee37 6a65 	vsub.f32	s12, s14, s11
 801069a:	ee07 1a90 	vmov	s15, r1
 801069e:	ee26 5a24 	vmul.f32	s10, s12, s9
 80106a2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80106a6:	ee15 7a10 	vmov	r7, s10
 80106aa:	401f      	ands	r7, r3
 80106ac:	ee06 7a90 	vmov	s13, r7
 80106b0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80106b4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80106b8:	ee65 7a05 	vmul.f32	s15, s10, s10
 80106bc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80106c0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010828 <__ieee754_powf+0x3f4>
 80106c4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801082c <__ieee754_powf+0x3f8>
 80106c8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80106cc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010830 <__ieee754_powf+0x3fc>
 80106d0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80106d4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010804 <__ieee754_powf+0x3d0>
 80106d8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80106dc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010834 <__ieee754_powf+0x400>
 80106e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80106e4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010838 <__ieee754_powf+0x404>
 80106e8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80106ec:	eee7 5a27 	vfma.f32	s11, s14, s15
 80106f0:	ee35 7a26 	vadd.f32	s14, s10, s13
 80106f4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80106f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80106fc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010700:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010704:	eef0 5a67 	vmov.f32	s11, s15
 8010708:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801070c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010710:	ee15 1a90 	vmov	r1, s11
 8010714:	4019      	ands	r1, r3
 8010716:	ee05 1a90 	vmov	s11, r1
 801071a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801071e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8010722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010726:	ee67 7a85 	vmul.f32	s15, s15, s10
 801072a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801072e:	eeb0 6a67 	vmov.f32	s12, s15
 8010732:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010736:	ee16 1a10 	vmov	r1, s12
 801073a:	4019      	ands	r1, r3
 801073c:	ee06 1a10 	vmov	s12, r1
 8010740:	eeb0 7a46 	vmov.f32	s14, s12
 8010744:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010748:	493c      	ldr	r1, [pc, #240]	@ (801083c <__ieee754_powf+0x408>)
 801074a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801074e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010752:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8010840 <__ieee754_powf+0x40c>
 8010756:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010844 <__ieee754_powf+0x410>
 801075a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801075e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010848 <__ieee754_powf+0x414>
 8010762:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010766:	ed91 7a00 	vldr	s14, [r1]
 801076a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801076e:	ee07 2a10 	vmov	s14, r2
 8010772:	4a36      	ldr	r2, [pc, #216]	@ (801084c <__ieee754_powf+0x418>)
 8010774:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010778:	eeb0 7a67 	vmov.f32	s14, s15
 801077c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8010780:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010784:	ed92 5a00 	vldr	s10, [r2]
 8010788:	ee37 7a05 	vadd.f32	s14, s14, s10
 801078c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010790:	ee17 2a10 	vmov	r2, s14
 8010794:	401a      	ands	r2, r3
 8010796:	ee07 2a10 	vmov	s14, r2
 801079a:	ee77 6a66 	vsub.f32	s13, s14, s13
 801079e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80107a2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80107a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80107aa:	e715      	b.n	80105d8 <__ieee754_powf+0x1a4>
 80107ac:	2601      	movs	r6, #1
 80107ae:	e75d      	b.n	801066c <__ieee754_powf+0x238>
 80107b0:	d152      	bne.n	8010858 <__ieee754_powf+0x424>
 80107b2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010850 <__ieee754_powf+0x41c>
 80107b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107ba:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80107be:	eef4 6ac7 	vcmpe.f32	s13, s14
 80107c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c6:	f73f af29 	bgt.w	801061c <__ieee754_powf+0x1e8>
 80107ca:	2386      	movs	r3, #134	@ 0x86
 80107cc:	e048      	b.n	8010860 <__ieee754_powf+0x42c>
 80107ce:	4a21      	ldr	r2, [pc, #132]	@ (8010854 <__ieee754_powf+0x420>)
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d907      	bls.n	80107e4 <__ieee754_powf+0x3b0>
 80107d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80107d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107dc:	bf4c      	ite	mi
 80107de:	2001      	movmi	r0, #1
 80107e0:	2000      	movpl	r0, #0
 80107e2:	e6c7      	b.n	8010574 <__ieee754_powf+0x140>
 80107e4:	d138      	bne.n	8010858 <__ieee754_powf+0x424>
 80107e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107ea:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80107ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f2:	dbea      	blt.n	80107ca <__ieee754_powf+0x396>
 80107f4:	e7ee      	b.n	80107d4 <__ieee754_powf+0x3a0>
 80107f6:	bf00      	nop
 80107f8:	00000000 	.word	0x00000000
 80107fc:	3f7ffff3 	.word	0x3f7ffff3
 8010800:	3f800007 	.word	0x3f800007
 8010804:	3eaaaaab 	.word	0x3eaaaaab
 8010808:	3fb8aa00 	.word	0x3fb8aa00
 801080c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010810:	36eca570 	.word	0x36eca570
 8010814:	4b800000 	.word	0x4b800000
 8010818:	001cc471 	.word	0x001cc471
 801081c:	005db3d6 	.word	0x005db3d6
 8010820:	08011214 	.word	0x08011214
 8010824:	fffff000 	.word	0xfffff000
 8010828:	3e6c3255 	.word	0x3e6c3255
 801082c:	3e53f142 	.word	0x3e53f142
 8010830:	3e8ba305 	.word	0x3e8ba305
 8010834:	3edb6db7 	.word	0x3edb6db7
 8010838:	3f19999a 	.word	0x3f19999a
 801083c:	08011204 	.word	0x08011204
 8010840:	3f76384f 	.word	0x3f76384f
 8010844:	3f763800 	.word	0x3f763800
 8010848:	369dc3a0 	.word	0x369dc3a0
 801084c:	0801120c 	.word	0x0801120c
 8010850:	3338aa3c 	.word	0x3338aa3c
 8010854:	43160000 	.word	0x43160000
 8010858:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801085c:	d96f      	bls.n	801093e <__ieee754_powf+0x50a>
 801085e:	15db      	asrs	r3, r3, #23
 8010860:	3b7e      	subs	r3, #126	@ 0x7e
 8010862:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010866:	4118      	asrs	r0, r3
 8010868:	4408      	add	r0, r1
 801086a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801086e:	4a4e      	ldr	r2, [pc, #312]	@ (80109a8 <__ieee754_powf+0x574>)
 8010870:	3b7f      	subs	r3, #127	@ 0x7f
 8010872:	411a      	asrs	r2, r3
 8010874:	4002      	ands	r2, r0
 8010876:	ee07 2a10 	vmov	s14, r2
 801087a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801087e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010882:	f1c3 0317 	rsb	r3, r3, #23
 8010886:	4118      	asrs	r0, r3
 8010888:	2900      	cmp	r1, #0
 801088a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801088e:	bfb8      	it	lt
 8010890:	4240      	neglt	r0, r0
 8010892:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010896:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80109ac <__ieee754_powf+0x578>
 801089a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80109b0 <__ieee754_powf+0x57c>
 801089e:	ee16 3a90 	vmov	r3, s13
 80108a2:	f36f 030b 	bfc	r3, #0, #12
 80108a6:	ee06 3a90 	vmov	s13, r3
 80108aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80108ae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80108b2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80108b6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80109b4 <__ieee754_powf+0x580>
 80108ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108be:	eee0 7a87 	vfma.f32	s15, s1, s14
 80108c2:	eeb0 7a67 	vmov.f32	s14, s15
 80108c6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80108ca:	eef0 5a47 	vmov.f32	s11, s14
 80108ce:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80108d2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80108d6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80108da:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80109b8 <__ieee754_powf+0x584>
 80108de:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80109bc <__ieee754_powf+0x588>
 80108e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80108e6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80109c0 <__ieee754_powf+0x58c>
 80108ea:	eee6 5a26 	vfma.f32	s11, s12, s13
 80108ee:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80109c4 <__ieee754_powf+0x590>
 80108f2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80108f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80109c8 <__ieee754_powf+0x594>
 80108fa:	eee6 5a26 	vfma.f32	s11, s12, s13
 80108fe:	eeb0 6a47 	vmov.f32	s12, s14
 8010902:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8010906:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801090a:	ee67 5a06 	vmul.f32	s11, s14, s12
 801090e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010912:	eee7 7a27 	vfma.f32	s15, s14, s15
 8010916:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801091a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801091e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010922:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010926:	ee10 3a10 	vmov	r3, s0
 801092a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801092e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010932:	da06      	bge.n	8010942 <__ieee754_powf+0x50e>
 8010934:	f000 f854 	bl	80109e0 <scalbnf>
 8010938:	ee20 0a08 	vmul.f32	s0, s0, s16
 801093c:	e592      	b.n	8010464 <__ieee754_powf+0x30>
 801093e:	2000      	movs	r0, #0
 8010940:	e7a7      	b.n	8010892 <__ieee754_powf+0x45e>
 8010942:	ee00 3a10 	vmov	s0, r3
 8010946:	e7f7      	b.n	8010938 <__ieee754_powf+0x504>
 8010948:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801094c:	e58a      	b.n	8010464 <__ieee754_powf+0x30>
 801094e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80109cc <__ieee754_powf+0x598>
 8010952:	e587      	b.n	8010464 <__ieee754_powf+0x30>
 8010954:	eeb0 0a48 	vmov.f32	s0, s16
 8010958:	e584      	b.n	8010464 <__ieee754_powf+0x30>
 801095a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801095e:	f43f adbb 	beq.w	80104d8 <__ieee754_powf+0xa4>
 8010962:	2502      	movs	r5, #2
 8010964:	eeb0 0a48 	vmov.f32	s0, s16
 8010968:	f000 f832 	bl	80109d0 <fabsf>
 801096c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010970:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010974:	4647      	mov	r7, r8
 8010976:	d003      	beq.n	8010980 <__ieee754_powf+0x54c>
 8010978:	f1b8 0f00 	cmp.w	r8, #0
 801097c:	f47f addb 	bne.w	8010536 <__ieee754_powf+0x102>
 8010980:	2c00      	cmp	r4, #0
 8010982:	bfbc      	itt	lt
 8010984:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8010988:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801098c:	2e00      	cmp	r6, #0
 801098e:	f6bf ad69 	bge.w	8010464 <__ieee754_powf+0x30>
 8010992:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8010996:	ea58 0805 	orrs.w	r8, r8, r5
 801099a:	f47f adc7 	bne.w	801052c <__ieee754_powf+0xf8>
 801099e:	ee70 7a40 	vsub.f32	s15, s0, s0
 80109a2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80109a6:	e55d      	b.n	8010464 <__ieee754_powf+0x30>
 80109a8:	ff800000 	.word	0xff800000
 80109ac:	3f317218 	.word	0x3f317218
 80109b0:	3f317200 	.word	0x3f317200
 80109b4:	35bfbe8c 	.word	0x35bfbe8c
 80109b8:	b5ddea0e 	.word	0xb5ddea0e
 80109bc:	3331bb4c 	.word	0x3331bb4c
 80109c0:	388ab355 	.word	0x388ab355
 80109c4:	bb360b61 	.word	0xbb360b61
 80109c8:	3e2aaaab 	.word	0x3e2aaaab
 80109cc:	00000000 	.word	0x00000000

080109d0 <fabsf>:
 80109d0:	ee10 3a10 	vmov	r3, s0
 80109d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80109d8:	ee00 3a10 	vmov	s0, r3
 80109dc:	4770      	bx	lr
	...

080109e0 <scalbnf>:
 80109e0:	ee10 3a10 	vmov	r3, s0
 80109e4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80109e8:	d02b      	beq.n	8010a42 <scalbnf+0x62>
 80109ea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80109ee:	d302      	bcc.n	80109f6 <scalbnf+0x16>
 80109f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80109f4:	4770      	bx	lr
 80109f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80109fa:	d123      	bne.n	8010a44 <scalbnf+0x64>
 80109fc:	4b24      	ldr	r3, [pc, #144]	@ (8010a90 <scalbnf+0xb0>)
 80109fe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010a94 <scalbnf+0xb4>
 8010a02:	4298      	cmp	r0, r3
 8010a04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a08:	db17      	blt.n	8010a3a <scalbnf+0x5a>
 8010a0a:	ee10 3a10 	vmov	r3, s0
 8010a0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010a12:	3a19      	subs	r2, #25
 8010a14:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010a18:	4288      	cmp	r0, r1
 8010a1a:	dd15      	ble.n	8010a48 <scalbnf+0x68>
 8010a1c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010a98 <scalbnf+0xb8>
 8010a20:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010a9c <scalbnf+0xbc>
 8010a24:	ee10 3a10 	vmov	r3, s0
 8010a28:	eeb0 7a67 	vmov.f32	s14, s15
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	bfb8      	it	lt
 8010a30:	eef0 7a66 	vmovlt.f32	s15, s13
 8010a34:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010a38:	4770      	bx	lr
 8010a3a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010aa0 <scalbnf+0xc0>
 8010a3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010a42:	4770      	bx	lr
 8010a44:	0dd2      	lsrs	r2, r2, #23
 8010a46:	e7e5      	b.n	8010a14 <scalbnf+0x34>
 8010a48:	4410      	add	r0, r2
 8010a4a:	28fe      	cmp	r0, #254	@ 0xfe
 8010a4c:	dce6      	bgt.n	8010a1c <scalbnf+0x3c>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	dd06      	ble.n	8010a60 <scalbnf+0x80>
 8010a52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a56:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010a5a:	ee00 3a10 	vmov	s0, r3
 8010a5e:	4770      	bx	lr
 8010a60:	f110 0f16 	cmn.w	r0, #22
 8010a64:	da09      	bge.n	8010a7a <scalbnf+0x9a>
 8010a66:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010aa0 <scalbnf+0xc0>
 8010a6a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010aa4 <scalbnf+0xc4>
 8010a6e:	ee10 3a10 	vmov	r3, s0
 8010a72:	eeb0 7a67 	vmov.f32	s14, s15
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	e7d9      	b.n	8010a2e <scalbnf+0x4e>
 8010a7a:	3019      	adds	r0, #25
 8010a7c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a80:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010a84:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010aa8 <scalbnf+0xc8>
 8010a88:	ee07 3a90 	vmov	s15, r3
 8010a8c:	e7d7      	b.n	8010a3e <scalbnf+0x5e>
 8010a8e:	bf00      	nop
 8010a90:	ffff3cb0 	.word	0xffff3cb0
 8010a94:	4c000000 	.word	0x4c000000
 8010a98:	7149f2ca 	.word	0x7149f2ca
 8010a9c:	f149f2ca 	.word	0xf149f2ca
 8010aa0:	0da24260 	.word	0x0da24260
 8010aa4:	8da24260 	.word	0x8da24260
 8010aa8:	33000000 	.word	0x33000000

08010aac <with_errnof>:
 8010aac:	b510      	push	{r4, lr}
 8010aae:	ed2d 8b02 	vpush	{d8}
 8010ab2:	eeb0 8a40 	vmov.f32	s16, s0
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	f7fc f978 	bl	800cdac <__errno>
 8010abc:	eeb0 0a48 	vmov.f32	s0, s16
 8010ac0:	ecbd 8b02 	vpop	{d8}
 8010ac4:	6004      	str	r4, [r0, #0]
 8010ac6:	bd10      	pop	{r4, pc}

08010ac8 <xflowf>:
 8010ac8:	b130      	cbz	r0, 8010ad8 <xflowf+0x10>
 8010aca:	eef1 7a40 	vneg.f32	s15, s0
 8010ace:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010ad2:	2022      	movs	r0, #34	@ 0x22
 8010ad4:	f7ff bfea 	b.w	8010aac <with_errnof>
 8010ad8:	eef0 7a40 	vmov.f32	s15, s0
 8010adc:	e7f7      	b.n	8010ace <xflowf+0x6>
	...

08010ae0 <__math_uflowf>:
 8010ae0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010ae8 <__math_uflowf+0x8>
 8010ae4:	f7ff bff0 	b.w	8010ac8 <xflowf>
 8010ae8:	10000000 	.word	0x10000000

08010aec <__math_oflowf>:
 8010aec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010af4 <__math_oflowf+0x8>
 8010af0:	f7ff bfea 	b.w	8010ac8 <xflowf>
 8010af4:	70000000 	.word	0x70000000

08010af8 <__ieee754_sqrtf>:
 8010af8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010afc:	4770      	bx	lr
	...

08010b00 <_init>:
 8010b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b02:	bf00      	nop
 8010b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b06:	bc08      	pop	{r3}
 8010b08:	469e      	mov	lr, r3
 8010b0a:	4770      	bx	lr

08010b0c <_fini>:
 8010b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0e:	bf00      	nop
 8010b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b12:	bc08      	pop	{r3}
 8010b14:	469e      	mov	lr, r3
 8010b16:	4770      	bx	lr
